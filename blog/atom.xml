<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kaiming-l.github.io/geaflow-website/blog</id>
    <title>GeaFlow Blog</title>
    <updated>2025-07-30T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kaiming-l.github.io/geaflow-website/blog"/>
    <subtitle>GeaFlow Blog</subtitle>
    <icon>https://kaiming-l.github.io/geaflow-website/img/favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[流图计算之增量match原理与应用]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/28</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/28"/>
        <updated>2025-07-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在流式计算中，数据往往不是全部一批到来，而会源源不断地进行输入和计算，在图计算/图查询领域，也存在类似的场景，图的点边不断地从数据源读取，进行构图，从而形成增量图。在增量图查询中，图随时发生着变化，在不同的图版本中，进行图查询的结果也会有所不同。对于某一次新增的点边，构成了一个新的版本的图，如果重新对全图（即当前所有点边）进行图遍历，开销较大，并且也会和历史数据有重复。由于历史的数据已经计算过一遍，理想情况下，只需要对增量所影响的部分进行计算/查询，而不需要对全图重新进行查询。]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/23857192/1743162676746-973d8e75-11b5-43d7-8832-724e7332b964.png" alt="" class="img_ev3q"></p>
<p>在流式计算中，数据往往不是全部一批到来，而会源源不断地进行输入和计算，在图计算/图查询领域，也存在类似的场景，图的点边不断地从数据源读取，进行构图，从而形成增量图。在增量图查询中，图随时发生着变化，在不同的图版本中，进行图查询的结果也会有所不同。对于某一次新增的点边，构成了一个新的版本的图，如果重新对全图（即当前所有点边）进行图遍历，开销较大，并且也会和历史数据有重复。由于历史的数据已经计算过一遍，理想情况下，只需要对增量所影响的部分进行计算/查询，而不需要对全图重新进行查询。</p>
<p><font style="color:rgb(51, 51, 51)">GQL（Graph Query Language）</font><font style="color:rgb(0, 0, 0)">是国际标准化组织（ISO）为标准化图查询语言所制定的一个标准，</font><font style="color:rgb(51, 51, 51)">用于在图上执行查询的语言。Geaflow 是蚂蚁图计算团队开源的流图计算引擎，专注于处理动态变化的图数据，支持大规模、高并发的实时图计算场景。</font>本文将介绍在 Geaflow 引擎中，对增量图使用 GQL 进行增量 Match 的方法，目的尽可能地只对增量的数据进行查询，避免冗余的全量计算。</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/jpeg/23857192/1741574572676-ff7e2c56-14d0-470c-b21d-604f928c6ec9.jpeg" alt="画板" class="img_ev3q"></p>
<h1>当前问题</h1>
<p><font style="color:rgb(0, 0, 0)">Geaflow 引擎基于点中心框架（vertex center），通过迭代的方式，每一轮迭代中，每个点向其他点发送消息，并在下一轮收到消息时进行处理、分析。</font>在 Geaflow 的框架中，GQL 的查询需要从前往后进行 Traversal 遍历走图，即从起始节点开始出发，进行扩散，依次进行点边匹配，直到匹配到所需要的查询 pattern。在动态图里场景，如果只使用当前批次新增的点边触发计算，增量的结果会有缺失，例如下面例子所示。</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/jpeg/23857192/1741576149930-b169b7da-0600-4fca-b6ad-5eadcfdbff5b.jpeg" alt="画板" class="img_ev3q"></p>
<p>如上问题关键在于如果只考虑增量的部分，则点 A1 无法触发计算，但是点 A1 实际包含于增量结果中。所以需要设法让点 A1 参与计算，我们考虑一种从新增点扩充子图的方法，将 a 触发。将整个查询分为 2 个阶段，Evolve 扩展阶段和 Traversal 阶段。在 Evolve 阶段中，从起始点开始，向邻居发送 EvolveMessage，后续的 iteration 中，收到 EvolveMessage 的点加入到 EvolveVertices 集合中。而后的 Traversal 阶段则会使用 EvolveVertices 里的点触发遍历，即表示当前窗口的触发点。</p>
<h1>方案步骤</h1>
<p>整体流程示例图如下：</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/23857192/1741599519420-37fd1d9f-6623-44b3-87e4-5ac5275b876f.png" alt="" class="img_ev3q"></p>
<ol>
<li>首先得到 query 的计划的迭代次数 N，需向外扩充 N-1 度(<font style="color:#000000">maxEvolveIteration=N-1)</font>，即可覆盖当前 query。框架的最大迭代数将设置为 N + maxEvolveIteration（N&gt;2）</li>
</ol>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">例如</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">match</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">迭代数为</span><span class="token number" style="color:#36acaa">1</span><span class="token plain">，此时不需要Evolve逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">match</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">迭代数为</span><span class="token number" style="color:#36acaa">2</span><span class="token plain">，此时不需要Evolve逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">match</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">e2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">迭代数为</span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> 最大迭代数</span><span class="token number" style="color:#36acaa">5</span><br></span></code></pre></div></div>
<ol start="2">
<li>由于当迭代数较大时，扩充子图可能可能扩充到全图，设置一个阈值 T, 当 N&lt;=T 才执行这个增量逻辑。</li>
<li>在每个 window 数据加入图中后，对于新增的点边，每个点会向邻居发送 EvolveVertexMessage，执行 N-1 次迭代，将 N-1 度子图扩充进来。<font style="color:#000000">即当前迭代小于 maxEvolveIteration（N-1）时，发送 EvolveVertexMessage。</font></li>
<li>每个点在向邻居点发送 EvolveMessage 时，需要将自己的 id 放在消息中，收到消息的点记录其发送点的 id, 添加到 targetIdList，在后续 traversal 阶段中使用。此步骤作用是下游节点将增量信息反向传递给上游，上游点在进行遍历时可以得知下游的增量影响部分，从而只遍历这些含有动态信息的下游点，而不需要再遍历所有邻居点。</li>
</ol>
<p>反向扩展的主要逻辑在 GeaFlowDynamicVCTraversalFunction 中，GeaFlowDynamicVCTraversalFunction 继承自 IncVertexCentricFunction，在 Geaflow 中 IncVertexCentricFunction 是一个表示增量 VC 方法（点中心）的接口，在每次迭代中，都会对当前收到消息的点进行触发，执行 compute 方法中的逻辑。</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void compute(Object vertexId, Iterator&lt;MessageBox&gt; messageIterator) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    TraversalRuntimeContext context = commonFunction.getContext();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (needIncrTraversal()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long iterationId = context.getIterationId();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // sendEvolveMessage to evolve subGraphs when iterationId is less than the plan iteration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (iterationId &lt; queryMaxIteration - 1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            evolveIds.add(vertexId);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            sendEvolveMessage(vertexId, context);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (iterationId == queryMaxIteration - 1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // the current iteration is the end of evolve phase.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            evolveIds.add(vertexId);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // traversal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        commonFunction.compute(vertexId, messageIterator);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        commonFunction.compute(vertexId, messageIterator);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>具体示例如下：</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2024/jpeg/23857192/1734590557540-5f3f4528-fa07-4208-8425-bc514ea5e06b.jpeg" alt="画板" class="img_ev3q"></p>
<p>总结进行 Evolve 扩展的条件：</p>
<ol>
<li>query 的迭代次数&gt;2：当 match 小于两跳时不需要 Evolve。</li>
<li>query 的迭代次数&lt;=Threshold：如果迭代数太多可能扩展到全图。</li>
<li>windowId&gt;1：第一次构图不需要进行 Evolve 阶段。</li>
<li>GQL 语句中没有起始点：如果有起始点，则只需使用起始点计算，不需要扩展子图，例如查询语句 Match(a:person where a.id = 1)）return a.name。</li>
</ol>
<h1>Demo 示例</h1>
<p>在 Geaflow 中，通过设置点表或边表的 windowSize 来默认实现增量逻辑，即每一批读入 windowSize 大小的点边数据，来构建增量图。</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> GRAPH modern </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Vertex person </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  id </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token plain"> ID</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  age </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Edge knows </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  srcId </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token plain"> SOURCE ID</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  targetId </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token plain"> DESTINATION ID</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  weight </span><span class="token keyword" style="color:#00009f">double</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	storeType</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'rocksdb'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shardCount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> modern_vertex </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  id </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  other </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">type</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'file'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">file</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'resource:///data/incr_modern_vertex.txt'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> modern_edge </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  srcId </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  targetId </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  weight </span><span class="token keyword" style="color:#00009f">double</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">type</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'file'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">file</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'resource:///data/incr_modern_edge.txt'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> modern</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">person</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> cast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">id </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">other </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> age</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> modern_vertex </span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'person'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> modern</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">knows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> srcId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> targetId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> weight</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> modern_edge </span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'knows'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> tbl_result </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  a_id </span><span class="token keyword" style="color:#00009f">BIGINT</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  b_id </span><span class="token keyword" style="color:#00009f">BIGINT</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  c_id </span><span class="token keyword" style="color:#00009f">BIGINT</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  d_id </span><span class="token keyword" style="color:#00009f">BIGINT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">type</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'file'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">file</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'${target}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">USE</span><span class="token plain"> GRAPH modern</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> tbl_result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  a_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> b_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> c_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">d_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">MATCH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a:person</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">e:knows</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b:person</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">e2:knows</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c:person</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">e3:knows</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">d:person</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id</span><span class="token operator" style="color:#393A34">!=</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">RETURN</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> a_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> b_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> c_id </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> d</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> d_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>在 Demo 中，设置点 windowSize 为 20，边 windowSize 为 3，即构图时每个 window 导入 20 个点，3 条边。并执行 3 跳的查询语句。<strong>示例 Demo 在 IncrMatchTest.java 中, 可直接运行执行 Demo。</strong></p>
<h1>总结和展望</h1>
<p><font style="color:rgb(0, 0, 0)">在动态图/流图的场景中，图的点边是在实时变化的，在进行图查询时，对于不同窗口数据的图，我们往往可以根据一些历史信息，只对增量的部分触发计算，来进行增量地计算，避免触发全图的遍历。Geaflow 使用了一种基于子图扩展的增量 match 方法，应用于点中心分布式图计算框架，在动态图场景下进行增量的查询，未来期望实现更多更复杂场景下的增量匹配逻辑。</font></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Graph4Stream：基于图的流计算加速]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/31</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/31"/>
        <updated>2025-07-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：坤羽；审校：东朔。]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/8237/1741852109942-9310f385-a0c2-4c32-987f-77b5c9df911a.png" alt="" class="img_ev3q"></p>
<blockquote>
<p>作者：坤羽；审校：东朔。</p>
</blockquote>
<p>之前在「姊妹篇」<a href="https://zhuanlan.zhihu.com/p/27618053733" target="_blank" rel="noopener noreferrer">《Stream4Graph：动态图上的增量计算》</a>中，向大家介绍了在图计算技术中引入增量计算能力「图+流」，GeaFlow 流图计算相比 Spark GraphX 取得了显著的性能提升。那么在流计算技术中引入图计算能力「流+图」，GeaFlow 流图计算相比 Flink 关联计算性能如何呢？</p>
<p>当今时代，<font style="color:rgb(51, 51, 51)">数据正以前所未有的速度和规模产生，对海量数据进行实时处理在异常检测、搜索推荐、金融交易等各个领域都有着广泛的应用。流计算</font><font style="color:rgb(0, 0, 0)">作为最主要的实时数据处理技术也变得越来越重要。</font></p>
<p><font style="color:rgb(0, 0, 0)"></font></p>
<p><font style="color:rgb(0, 0, 0)">与批处理需要等待数据全部到齐才进行计算不同，流计算将持续生成的数据流划分成微批，对每个微批的数据进行增量计算。这样的计算特性使得流计算具有高吞吐、低延迟的特性。常见的流计算引擎包括 Flink、Spark Streaming 等，他们都采用表的方式处理流中的数据。随着流计算应用的深入，越来越多的计算场景涉及到大数据之间关联关系的计算，此时基于表的流计算引擎性能会大幅下降。</font></p>
<p><font style="color:rgb(0, 0, 0)"></font></p>
<p><font style="color:rgb(0, 0, 0)">蚂蚁图计算团队开源的流图计算引擎</font>GeaFlow<font style="color:rgb(0, 0, 0)">，将图计算与流计算相结合，提供了高效的流图处理框架，大幅提升了计算性能。下面为大家介绍传统流计算引擎在关联关系计算的局限性，GeaFlow 流图计算高效的原理以及他们的性能对比。</font></p>
<p><font style="color:rgb(0, 0, 0)"></font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="流计算引擎flink"><font style="color:rgb(0, 0, 0)">流计算引擎：Flink</font><a href="https://kaiming-l.github.io/geaflow-website/blog/31#%E6%B5%81%E8%AE%A1%E7%AE%97%E5%BC%95%E6%93%8Eflink" class="hash-link" aria-label="Direct link to 流计算引擎flink" title="Direct link to 流计算引擎flink">​</a></h2>
<p><font style="color:rgb(0, 0, 0)">Flink 是经典的基于表的流处理引擎，他将输入的数据流切分成微批，每次计算当前批次的数据。在计算过程中，Flink 将计算任务翻译成由 map、filter、join 等基础算子组成的有向图，每个算子都有他的上游输入和下游输出。增量数据经过所有算子的计算后输出当前批次的结果。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/35234/1741541936849-f9e0ae71-d25d-4789-b9c6-ed0380140f2a.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(0, 0, 0)">Flink 增量计算</font></p>
<p><font style="color:rgb(0, 0, 0)"></font></p>
<p><font style="color:rgb(0, 0, 0)">我们以 k-Hop 算法为例，描述 Flink 的计算过程。k-Hop 是指 K 跳关系，例如在社交网络中 k-Hop 指的是可以通过 K 个中间人相互认识的关系链，在交易分析中指资金的 K 次连续转移的路径。假定以 2 跳关系为例，输入的数据格式 src dst 代表了两两关系。Flink 的计算 SQL 如下文所示</font></p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">-- create source table</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> edge </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    src </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dst </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">VIEW</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v_view</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">vid</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">distinct</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">src</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">edge</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">UNION</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">ALL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">dst</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">edge</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">VIEW</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e_view</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">src</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">dst</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">src</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">dst</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">edge</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">VIEW</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">join1_edge</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">(</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id1</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">dst</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">vid</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">dst</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v_view</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INNER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">JOIN</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e_view</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ON</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">vid</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">src</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">VIEW</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">join1</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">(</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id1</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id2</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id1</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">vid</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">join1_edge</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INNER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">JOIN</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v_view</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ON</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">dst</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">vid</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">VIEW</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">join2_edge</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">(</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id1</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id2</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">dst</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id1</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id2</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">dst</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">join1</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INNER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">JOIN</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e_view</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ON</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id2</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">src</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">VIEW</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">join2</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">(</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id1</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id2</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id3</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id1</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">id2</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">vid</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">join2_edge</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INNER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">JOIN</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v_view</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ON</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">e</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">dst</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">v</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">.</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">vid</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p><font style="color:rgb(0, 0, 0)"></font></p>
<p><font style="color:rgb(0, 0, 0)">他的执行计划如下图所示，他由 Aggregate、Calc、Join 等算子组成，数据流经每个算子最终得到增量结果。核心算子 join 实现了关联关系的查找，我们来详细分析 Join 算子的实现方式。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/35234/1740550683257-198617cb-b66b-4997-86f7-d41df94f0fb1.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(0, 0, 0)">Flink 执行计划</font></p>
<p><font style="color:rgb(0, 0, 0)"></font></p>
<p><font style="color:rgb(0, 0, 0)">如下图所示，Join 算子有两个输入流 LeftInput 和 RightInput，分别代表了 join 的左表和右表，Join 算子在接收到上游的数据后执行计算。以左输入流为例，输入的数据首先被加入到 LeftStateView 中保存起来，然后去 RightStateView 中查询是否有数据符合 join 条件，这个查询过程需要遍历 RightStateView，最后将 join 结果输入到下一个算子中。</font></p>
<p><font style="color:rgb(0, 0, 0)"></font></p>
<p><font style="color:rgb(0, 0, 0)">join 计算主要的性能瓶颈就在遍历 RightStateView。LeftStateView 和 RightStateView 实际上存储 join 的左表和右表。随着数据不断输入，StateView 中的数据量持续膨胀，最终导致遍历的耗时急剧上升，严重影响系统性能。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/35234/1741589034132-1969e973-94dd-42ca-b506-ebe4594d87a8.png" alt="" class="img_ev3q"></p>
<p>Flink Join 算子实现</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="流图计算引擎geaflow">流图计算引擎：GeaFlow<a href="https://kaiming-l.github.io/geaflow-website/blog/31#%E6%B5%81%E5%9B%BE%E8%AE%A1%E7%AE%97%E5%BC%95%E6%93%8Egeaflow" class="hash-link" aria-label="Direct link to 流图计算引擎：GeaFlow" title="Direct link to 流图计算引擎：GeaFlow">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="图计算流图">图计算&amp;流图<a href="https://kaiming-l.github.io/geaflow-website/blog/31#%E5%9B%BE%E8%AE%A1%E7%AE%97%E6%B5%81%E5%9B%BE" class="hash-link" aria-label="Direct link to 图计算&amp;流图" title="Direct link to 图计算&amp;流图">​</a></h3>
<p>图计算是一种基于图数据格式的计算范式，其中图 G(V,E)由点集合 V 和边集合 E 构成，边代表了数据之间的关联关系。以公开数据集 web-Google 为例，其中每一行数据由两个数字组成，代表了两个页面之间的跳转关系。如下图所示，左侧是原始数据，常规的数据建模方式是建立一张包含两列数据的表，而图的建模方式是将网页作为点，将页面的跳转关系作为边，构成一张跳转网络图。在表的建模方式中，关联关系的计算是通过表的 join 实现的，join 需要遍历左表或者右表。而在图计算中，关联关系被直接存储在边中，省去了遍历的过程。</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/35234/1741544451333-05f87f7e-8c8b-41fb-a27b-051b6df8e5da.png" alt="" class="img_ev3q"></p>
<p>表建模 vs. 图建模</p>
<p><font style="color:rgb(0, 0, 0)">流图是图在流场景中的应用，他依据数据流对图的更新将图分成历史图和增量图两个部分。例如在上图中，假设第一行和第二行数据已经输入并完成相应计算，当前处理第三行数据。此时历史图就是由前两行数据建模得到，而增量图是由第三行数据组成的图，两者合并起来就得到完整的图。在流图上应用增量图算法，可以高效完成计算任务，实现实时计算。</font></p>
<p><font style="color:rgb(0, 0, 0)"></font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="geaflow-架构"><font style="color:rgb(0, 0, 0)">GeaFlow 架构</font><a href="https://kaiming-l.github.io/geaflow-website/blog/31#geaflow-%E6%9E%B6%E6%9E%84" class="hash-link" aria-label="Direct link to geaflow-架构" title="Direct link to geaflow-架构">​</a></h3>
<p>GeaFlow 引擎的计算流程分为流数据输入、分布式增量图计算、增量结果输出几个部分。和传统的流计算引擎一样，输入的实时数据按照窗口被切分成微批。对于当前批次的数据，先按照建模策略解析成点边构成增量图。增量图和之前数据构成的历史图一道组成完整的流图。计算框架在流图上应用增量图算法得到增量结果输出，最后把增量图添加到历史图中。</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/35234/1740932875376-6633b307-c309-4ae7-be5e-d0b96a66409a.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(0, 0, 0)">GeaFlow 增量计算</font></p>
<p><font style="color:rgb(0, 0, 0)">GeaFlow 计算框架是以点为中心的迭代计算模型。他以增量图中的点作为第一轮迭代的起点。在每一轮迭代中，每个点都独立维护自身的状态，根据与每个点关联的历史图和增量图完成当前迭代轮次的计算，最后将计算结果通过消息传递给邻居点，开启下一轮迭代。</font></p>
<p><font style="color:rgb(0, 0, 0)">以前文中提到的 k-Hop 为例，增量算法如下：在第一轮迭代中，我们找到增量图中的所有边，将这些边作为初始的入向路径和出向路径，分别发送到他们的起点和终点。在后续的迭代中不断扩展入向路径和出向路径。当达到求取跳数时，将出向路径和入向路径发送给起点，在起点组合成最终结果。详细代码实现在开源仓库的</font><a href="https://github.com/TuGraph-family/tugraph-analytics/blob/master/geaflow/geaflow-dsl/geaflow-dsl-plan/src/main/java/com/antgroup/geaflow/dsl/udf/graph/IncKHopAlgorithm.java" target="_blank" rel="noopener noreferrer">IncKHopAlgorithm.java</a><font style="color:rgb(0, 0, 0)">文件中。</font></p>
<p><font style="color:rgb(0, 0, 0)">下图是两跳场景的描述。在第一轮迭代，增量边 B-&gt;C 分别构建入向路径和出向路径，将他们分别发送给点 B 和点 C。在第二轮迭代，B 收到入向路径，并加上当前点的入边形成 2 跳入向路径，发送给点 B。同样点 C 也收到出向路径，加上当前的出边形成 2 跳出向路径，发送给点 B。最后一轮迭代在 B 点将收到的出向和入向路径整合成新增的路径。可以看到，和 Flink 中需要查找所有的历史关系不同，GeaFlow 采用基于流图的增量图算法，计算量和图中的增量路径成正比。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/35234/1741710927215-b6be1398-7485-432b-b8f7-c4cde5366302.png" alt="" class="img_ev3q"></p>
<p>两跳增量路径计算</p>
<p><font style="color:rgb(0, 0, 0)">上述图算法已经集成到 GeaFlow 的 IncKHop 算子中，用户可以直接通过 DSL 调用。</font></p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">set</span><span class="token plain"> geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">max</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">traversal</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">set</span><span class="token plain"> geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">table</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">parallelism</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> GRAPH modern </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Vertex node </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    id </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Edge relation </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    srcId </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> SOURCE ID</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    targetId </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> DESTINATION ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  storeType</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'rocksdb'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shardCount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> web_google_20 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  src </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dst </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">type</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'file'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">table</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">parallelism</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'4'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">column</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">separator</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'\t'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">geaflow.dsl.source.file.parallel.mod</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'true'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">file</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'resource:///data/web-google-20'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> modern</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> cast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">src </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> web_google_20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> modern</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> cast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dst </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> web_google_20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> modern</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">relation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> cast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">src </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dst </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> web_google_20</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> tbl_result </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ret </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">type</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'file'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">file</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'${target}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">USE</span><span class="token plain"> GRAPH modern</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> tbl_result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CALL</span><span class="token plain"> inc_khop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> YIELD </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">RETURN</span><span class="token plain"> ret</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p><font style="color:rgb(0, 0, 0)"></font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="geaflow-性能测试">GeaFlow 性能测试<a href="https://kaiming-l.github.io/geaflow-website/blog/31#geaflow-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95" class="hash-link" aria-label="Direct link to GeaFlow 性能测试" title="Direct link to GeaFlow 性能测试">​</a></h2>
<p>为了验证 GeaFlow 的流图计算性能，我们以<font style="color:rgb(0, 0, 0)">k-Hop</font>算法为例设计了和 Flink 的对比实验。我们将指定数据作为输入源输入到计算引擎中，执行<font style="color:rgb(0, 0, 0)">k-Hop</font>算法，并统计所有数据完成计算的时间来比较系统的性能。我们采用公开数据集<a href="https://snap.stanford.edu/data/web-Google.html" target="_blank" rel="noopener noreferrer">web-Google.txt</a>作为输入，实验环境为 16 台 8 核 16G 的服务器，分别比较了一跳、两跳、三跳、四跳关系计算的场景。</p>
<p>实验结果如图所示，横坐标是分别是一跳关系、两跳关系、三跳关系、四跳关系，纵坐标是处理完所有数据的耗时，采用对数指标。可以看到在一跳、两跳场景中，Flink 的性能要好于 GeaFlow，这是因为在一跳、两跳场景中参与 join 计算的数据量比较小，join 需要遍历的左表和右表都很小，遍历本身耗时短，而且 Flink 的计算框架可以缓存 join 的历史计算结果。但是到了三跳、四跳场景时候，由于计算复杂度的上升，join 算子需要遍历的表迅速膨胀，带来计算性能的急剧下降，甚至四跳场景超过一天也无法完成计算。而 GeaFlow<font style="color:rgb(0, 0, 0)">采用基于流图增量图算法，计算耗时只和增量路径相关，和历史的关联关系计算结果无关，所以性能明显优于 Flink。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/8237/1743568484086-10eb9a1a-3dd0-42ee-b885-875ac7d81221.png" alt="" class="img_ev3q"></p>
<p>k-Hop 计算性能对比</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结和展望">总结和展望<a href="https://kaiming-l.github.io/geaflow-website/blog/31#%E6%80%BB%E7%BB%93%E5%92%8C%E5%B1%95%E6%9C%9B" class="hash-link" aria-label="Direct link to 总结和展望" title="Direct link to 总结和展望">​</a></h2>
<p>传统的 Flink 等流计算引擎在计算关联关系时需要用到 join 算子，join 算子需要遍历全量的历史数据，这使得他们在大数据关联计算场景中性能不佳。GeaFlow 引擎通过支持流图计算框架，将图计算引入到流计算中，采用增量图计算的方法大大提升了实时数据的处理系性能。</p>
<p>目前 GeaFlow 项目代码已经开源，我们希望基于 GeaFlow 构建面向图数据的统一湖仓处理引擎，以解决多样化的大数据关联性分析诉求。同时我们也在积极筹备加入 Apache 基金会，丰富大数据开源生态，因此非常欢迎对图技术有浓厚兴趣同学加入社区共建。</p>
<p>社区中有诸多有趣的工作尚待完成，你可以从如下简单的「Good First Issue」开始，期待你加入同行。</p>
<ul>
<li>支持增量 k-Core 算法。（<a href="https://github.com/TuGraph-family/tugraph-analytics/issues/466" target="_blank" rel="noopener noreferrer">Issue 466</a>）</li>
<li>支持增量最小生成树算法。（<a href="https://github.com/TuGraph-family/tugraph-analytics/issues/465" target="_blank" rel="noopener noreferrer">Issue 465</a>）</li>
<li>...</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考链接">参考链接<a href="https://kaiming-l.github.io/geaflow-website/blog/31#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5" class="hash-link" aria-label="Direct link to 参考链接" title="Direct link to 参考链接">​</a></h2>
<ol>
<li>GeaFlow 项目地址：<a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer">https://github.com/TuGraph-family/tugraph-analytics</a></li>
<li>web-Google 数据集地址：<a href="https://snap.stanford.edu/data/web-Google.html" target="_blank" rel="noopener noreferrer">https://snap.stanford.edu/data/web-Google.html</a></li>
<li>GeaFlow Issues：<a href="https://github.com/TuGraph-family/tugraph-analytics/issues" target="_blank" rel="noopener noreferrer">https://github.com/TuGraph-family/tugraph-analytics/issues</a></li>
<li>增量 k-Hop 算法实现源码：<a href="https://github.com/TuGraph-family/tugraph-analytics/blob/master/geaflow/geaflow-dsl/geaflow-dsl-plan/src/main/java/com/antgroup/geaflow/dsl/udf/graph/IncKHopAlgorithm.java" target="_blank" rel="noopener noreferrer">https://github.com/TuGraph-family/tugraph-analytics/blob/master/geaflow/geaflow-dsl/geaflow-dsl-plan/src/main/java/com/antgroup/geaflow/dsl/udf/graph/IncKHopAlgorithm.java</a></li>
</ol>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GeaFlow 时序能力探秘——让时间数据焕发新生！]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/29</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/29"/>
        <updated>2025-06-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在当今数字化时代，数据已经成为驱动决策和创新的核心资源。然而，数据不仅仅是静态的数字或关系，它会随着时间不断变化。无论是股票市场的实时波动、社交网络中的动态互动，还是物联网设备的状态更新，时间维度都是理解这些数据的关键，例如：]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/220029/1749449270999-c8399237-cf22-47d0-8bc0-2384971a5cbc.png" alt="" class="img_ev3q"></p>
<p>在当今数字化时代，数据已经成为驱动决策和创新的核心资源。然而，数据不仅仅是静态的数字或关系，它会随着时间不断变化。无论是股票市场的实时波动、社交网络中的动态互动，还是物联网设备的状态更新，时间维度都是理解这些数据的关键，例如：</p>
<ul>
<li>在金融领域，交易的时间顺序决定了资金流动的方向。</li>
<li>在社交网络中，用户的互动行为（如点赞、评论）随时间演变。</li>
<li>在物联网中，传感器采集的数据带有时间戳，反映了设备状态的变化。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="传统方法的局限性">传统方法的局限性<a href="https://kaiming-l.github.io/geaflow-website/blog/29#%E4%BC%A0%E7%BB%9F%E6%96%B9%E6%B3%95%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7" class="hash-link" aria-label="Direct link to 传统方法的局限性" title="Direct link to 传统方法的局限性">​</a></h2>
<p>尽管数据的重要性毋庸置疑，但传统的图数据分析工具往往难以应对动态数据的挑战：</p>
<ul>
<li><strong>静态分析的局限性</strong><br>
静态分析只能捕捉某一时刻的数据快照，无法反映数据的变化趋势。例如，在监控设备状态时，静态分析可能忽略设备从正常到故障的渐变过程。</li>
<li><strong>处理效率低下</strong><br>
传统工具在处理大规模时序数据时效率低下，甚至无法满足实时需求。例如，在金融风控场景中，延迟可能导致错过关键的风险信号。</li>
<li><strong>缺乏灵活性</strong><br>
很多工具只支持单一类型的数据分析，无法同时处理实时流数据和历史数据。</li>
</ul>
<p>为了解决上述问题，GeaFlow 创新性地提出了时序图计算的概念。作为一款专为动态图数据处理设计的分布式流图计算引擎，GeaFlow 能够高效应对动态数据带来的挑战。针对实时变化的图结构，用户可以轻松进行图遍历、图匹配和图计算等操作，从而满足复杂场景下的分析需求。通过结合时间维度与动态图处理能力，GeaFlow 为实时数据分析提供了全新的解决方案，帮助用户更精准地挖掘动态数据中的价值。</p>
<h1>什么是 GeaFlow？</h1>
<p>GeaFlow 是一个强大的分布式计算平台，结合了图计算和流处理的优势，能够高效处理动态图和时序数据。它不仅支持复杂的图算法，还具备实时分析能力，适用于各种动态场景。其主要特点包括：</p>
<ul>
<li>分布式架构</li>
</ul>
<p>GeaFlow 基于分布式计算框架，能够高效处理超大规模的动态图数据（例如数十亿节点和边）。通过分区和副本机制，GeaFlow 确保了系统的高可用性和可扩展性。</p>
<ul>
<li>流图与时序图的无缝集成</li>
</ul>
<p>流图提供了动态数据的实时更新能力，而时序图则引入了时间维度的精确记录能力。两者的结合使得 GeaFlow 能够同时支持实时分析和历史追溯。</p>
<ul>
<li>灵活的时间窗口机制</li>
</ul>
<p>GeaFlow 支持基于时间窗口的动态分析，用户可以根据需求设置滑动窗口或固定窗口，分析特定时间段内的数据变化趋势。</p>
<h1><font style="color:rgb(0, 0, 0)">流图与时序图的关系？</font></h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-流图stream-graph">1. 流图（Stream Graph）<a href="https://kaiming-l.github.io/geaflow-website/blog/29#1-%E6%B5%81%E5%9B%BEstream-graph" class="hash-link" aria-label="Direct link to 1. 流图（Stream Graph）" title="Direct link to 1. 流图（Stream Graph）">​</a></h2>
<p>流图是一种特殊的图结构，用于表示动态数据的演化过程。其核心特性包括：</p>
<ul>
<li><strong>动态更新机制</strong><br>
流图支持节点和边的动态增删改操作，能够实时反映数据的变化。例如，在金融交易网络中，资金流动会生成新的边，而交易完成后某些边可能会消失。</li>
<li><strong>事件驱动模型</strong><br>
流图采用事件驱动模型，每条数据（节点或边）都被视为一个事件。通过事件驱动的方式，流图能够高效捕捉数据的变化。</li>
<li><strong>增量计算</strong><br>
为了提高计算效率，流图采用了增量计算策略。即每次只计算新增或修改的部分，而不是重新计算整个图结构。例如，在社交网络中，当用户建立新的好友关系时，GeaFlow 只需更新相关部分，而无需重新计算整个网络。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-时序图temporal-graph">2. 时序图（Temporal Graph）<a href="https://kaiming-l.github.io/geaflow-website/blog/29#2-%E6%97%B6%E5%BA%8F%E5%9B%BEtemporal-graph" class="hash-link" aria-label="Direct link to 2. 时序图（Temporal Graph）" title="Direct link to 2. 时序图（Temporal Graph）">​</a></h2>
<p>时序图是一种带时间属性的图结构，每条边或节点都带有时间戳，用于记录事件发生的时间。其核心特性包括：</p>
<ul>
<li><strong>时间戳管理</strong><br>
每条数据（节点或边）都分配一个时间戳，确保所有操作都能精确记录时间信息。例如，在社交网络中，好友关系的建立时间可以用一条带时间戳的边表示。</li>
<li><strong>时间窗口分析</strong><br>
时序图支持基于时间窗口的分析功能。例如，用户可以设置一个滑动窗口（如最近 5 分钟），并分析窗口内的数据变化趋势。</li>
<li><strong>历史追溯能力</strong><br>
时序图保留了历史数据的时间戳信息，支持回溯历史数据。例如，在金融风控场景中，用户可以通过时序图分析过去一段时间内的异常交易行为。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-流图与时序图的关系">3. 流图与时序图的关系<a href="https://kaiming-l.github.io/geaflow-website/blog/29#3-%E6%B5%81%E5%9B%BE%E4%B8%8E%E6%97%B6%E5%BA%8F%E5%9B%BE%E7%9A%84%E5%85%B3%E7%B3%BB" class="hash-link" aria-label="Direct link to 3. 流图与时序图的关系" title="Direct link to 3. 流图与时序图的关系">​</a></h2>
<p>流图和时序图并不是相互独立的概念，而是相辅相成的：</p>
<ul>
<li><strong>流图是时序图的基础</strong><br>
流图提供了动态数据的实时更新能力，而时序图则在此基础上增加了时间维度的记录能力。换句话说，流图关注的是数据的实时变化，而时序图关注的是这些变化的时间属性。</li>
<li><strong>时序图增强了流图的分析能力</strong><br>
通过引入时间戳，时序图使得流图能够进行更复杂的分析，例如时间窗口分析、趋势预测等。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-geaflow-的实现细节">4. GeaFlow 的实现细节<a href="https://kaiming-l.github.io/geaflow-website/blog/29#4-geaflow-%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82" class="hash-link" aria-label="Direct link to 4. GeaFlow 的实现细节" title="Direct link to 4. GeaFlow 的实现细节">​</a></h2>
<p>GeaFlow 通过以下技术手段实现了流图与时序图的无缝结合：</p>
<ul>
<li><strong>时间戳分配机制</strong><br>
GeaFlow 为每条数据（节点或边）分配具体时间戳, 具体分为两种：处理时间和事件时间，确保所有数据都能精确记录时间信息。</li>
<li><strong>动态更新与历史保留</strong><br>
GeaFlow 支持实时更新流图结构，同时保留历史数据的时间戳信息，方便后续分析。例如，在金融交易网络中，GeaFlow 会记录每笔交易的时间戳，并将其存储在分布式存储系统中。</li>
<li><strong>时间窗口优化</strong><br>
GeaFlow 采用高效的索引机制和缓存策略，优化时间窗口分析的性能。例如，通过滑动窗口索引，GeaFlow 能够快速定位特定时间段内的数据。</li>
</ul>
<h1>举个例子</h1>
<p>随着社交媒体平台的快速发展，用户之间的互动和关系链变得越来越复杂。为了更好地理解用户行为、优化推荐系统以及识别潜在的风险（如虚假账号或恶意传播），我们需要对用户之间的动态关系进行实时分析。</p>
<p>假设某社交平台希望实现一个功能：实时追踪用户的“间接好友关系”，即分析用户 A 是否通过某个共同好友 B 认识了另一个用户 C，并确保这种认识关系的时间顺序是合理的（A 先认识 B，B 再认识 C）。这一功能可以帮助平台发现潜在的社交圈层，优化好友推荐算法，同时为风险控制提供数据支持。</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/220029/1749448299226-d23a5d01-5a5c-4cbb-bd99-f1e476f808be.png" alt="" class="img_ev3q"></p>
<p>具体需求</p>
<ol>
<li><strong>实时性要求</strong><br>
用户的行为（如添加好友）是动态变化的，需要实时捕获并更新用户关系图。</li>
<li><strong>时间敏感性</strong><br>
好友关系的建立是有时间顺序的，例如用户 A 在 10:00 添加了用户 B 为好友，而用户 B 在 10:05 添加了用户 C 为好友。只有在这种情况下，我们才能认为 A 通过 B 间接认识了 C。</li>
<li><strong>高效查询</strong><br>
平台需要快速查询出所有符合条件的三元关系（A -&gt; B -&gt; C），并将结果存储到文件系统中，供后续分析或可视化使用。</li>
<li><strong>扩展性</strong><br>
系统需要能够处理大规模用户数据，并支持未来的扩展需求，例如引入更多维度的关系权重（如亲密度、互动频率等）。</li>
</ol>
<p><font style="color:rgb(73, 80, 87)">下面是完整的 DSL 示例：</font></p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE vertex_source (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	id long,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	name varchar,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	age int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	type='kafka',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.kafka.servers = 'localhost:9092',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.kafka.topic = 'vertex_source',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.kafka.data.operation.timeout.seconds = 5,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.time.window.size=10,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.start.time='${startTime}'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE edge_source (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	src_id long,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	tar_id long,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	weight double,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	ts long --knowing time</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	type='kafka',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.kafka.servers = 'localhost:9092',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.kafka.topic = 'edge_source',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.kafka.data.operation.timeout.seconds = 5,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.time.window.size=10,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.start.time='${startTime}'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE GRAPH community (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Vertex person (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  id bigint ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  name varchar,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  age int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Edge knows (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  src_id bigint SOURCE ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  tar_id bigint DESTINATION ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  weight double,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  ts long TIMESTAMP --定义时间戳字段</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	storeType='rocksdb'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO community.person</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT id, name, age</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM vertex_source;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO community.knows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT src_id, tar_id, weight, ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM edge_source;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE tbl_result (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  a_id long,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  e1_ts long,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  b_id long,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  e2_ts long,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  c_id long</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	type='file',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.file.path='${target}'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">USE GRAPH community;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO tbl_result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  a_id,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  e1_ts,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  b_id,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  e2_ts,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  c_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  MATCH (a:person)-[e1:knows]-&gt;(b:person)-[e2:knows]-&gt; (c:person)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  where e2.ts &gt; e1.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  RETURN a.id as a_id, e1.ts as e1_ts, b.id as b_id, e2.ts as e2_ts, c.id as c_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre></div></div>
<p>上述 DSL（Domain-Specific Language）代码定义了一个基于图计算的流处理任务，主要目的是通过 Kafka 实时接收用户节点和关系边的数据流，构建一个动态社区图（<code>community</code>），并分析其中的时间敏感关系（如“谁先认识谁”。最终结果将输出到文件系统中，用于进一步分析或可视化。</p>
<p>以下是对每个部分的详细解释：</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-点源表定义">1. 点源表定义<a href="https://kaiming-l.github.io/geaflow-website/blog/29#1-%E7%82%B9%E6%BA%90%E8%A1%A8%E5%AE%9A%E4%B9%89" class="hash-link" aria-label="Direct link to 1. 点源表定义" title="Direct link to 1. 点源表定义">​</a></h2>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> vertex_source </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    id long</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    age </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">type</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'kafka'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">kafka</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">servers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'localhost:9092'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">kafka</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">topic </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'vertex_source'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">kafka</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">operation</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">timeout</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">seconds </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">size</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">start</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">time</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'${startTime}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li><strong>功能</strong>：
<ul>
<li>定义了一个名为 <code>vertex_source</code> 的表，表示点数据的来源。</li>
<li>数据通过 Kafka 消费，主题为 <code>vertex_source</code>。</li>
<li>每条记录包含三个字段：<code>id</code>（节点唯一标识符）、<code>name</code>（节点名称）、<code>age</code>（节点年龄）。</li>
</ul>
</li>
<li><strong>时间窗口</strong>：
<ul>
<li>使用了滑动窗口机制，窗口大小为 10 秒（<code>geaflow.dsl.time.window.size=10</code>）。</li>
<li>数据流按时间窗口分批处理，窗口内的数据会被用于后续的图构建和计算。</li>
</ul>
</li>
<li><strong>启动时间</strong>：
<ul>
<li><code>${startTime}</code> 是一个占位符，表示流处理任务的起始时间。</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-边源表定义">2. 边源表定义<a href="https://kaiming-l.github.io/geaflow-website/blog/29#2-%E8%BE%B9%E6%BA%90%E8%A1%A8%E5%AE%9A%E4%B9%89" class="hash-link" aria-label="Direct link to 2. 边源表定义" title="Direct link to 2. 边源表定义">​</a></h2>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> edge_source </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    src_id long</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tar_id long</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    weight </span><span class="token keyword" style="color:#00009f">double</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ts long</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">type</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'kafka'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">kafka</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">servers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'localhost:9092'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">kafka</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">topic </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'edge_source'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">kafka</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">operation</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">timeout</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">seconds </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">size</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">-- 滑动窗口大小</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">start</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">time</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'${startTime}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li><strong>功能</strong>：
<ul>
<li>定义了一个名为 <code>edge_source</code> 的表，表示边数据的来源。</li>
<li>数据通过 Kafka 消费，主题为 <code>edge_source</code>。</li>
<li>每条记录包含四个字段：
<ul>
<li><code>src_id</code> 和 <code>tar_id</code>：分别表示边的起点和终点。</li>
<li><code>weight</code>：边的权重。</li>
<li><code>ts</code>：边的时间戳，表示关系建立的时间。</li>
</ul>
</li>
</ul>
</li>
<li><strong>时间窗口</strong>：
<ul>
<li>同样使用 10 秒的滑动窗口机制。</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-图-schema-定义">3. 图 Schema 定义<a href="https://kaiming-l.github.io/geaflow-website/blog/29#3-%E5%9B%BE-schema-%E5%AE%9A%E4%B9%89" class="hash-link" aria-label="Direct link to 3. 图 Schema 定义" title="Direct link to 3. 图 Schema 定义">​</a></h2>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> GRAPH community </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Vertex person </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      id </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token plain"> ID</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      name </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      age </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Edge knows </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      src_id </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token plain"> SOURCE ID</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      tar_id </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token plain"> DESTINATION ID</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      weight </span><span class="token keyword" style="color:#00009f">double</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ts long </span><span class="token keyword" style="color:#00009f">TIMESTAMP</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">-- 定义时间戳字段</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    storeType</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'rocksdb'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li><strong>功能</strong>：
<ul>
<li>定义了一个名为 <code>community</code> 的图结构。</li>
<li>图包含两种元素：
<ol>
<li>**点类型 **<code>person</code>：
<ul>
<li>每个点有三个属性：<code>id</code>（唯一标识符）、<code>name</code>（名称）、<code>age</code>（年龄）。</li>
</ul>
</li>
<li>**边类型 **<code>knows</code>：
<ul>
<li>每条边有四个属性：
<ul>
<li><code>src_id</code> 和 <code>tar_id</code>：分别表示边的起点和终点。</li>
<li><code>weight</code>：边的权重。</li>
<li><code>ts</code>：边的时间戳，标记关系建立的时间。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><strong>存储方式</strong>：
<ul>
<li>图数据存储在 RocksDB 中（<code>storeType='rocksdb'</code>）。</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-插入点数据到图">4. 插入点数据到图<a href="https://kaiming-l.github.io/geaflow-website/blog/29#4-%E6%8F%92%E5%85%A5%E7%82%B9%E6%95%B0%E6%8D%AE%E5%88%B0%E5%9B%BE" class="hash-link" aria-label="Direct link to 4. 插入点数据到图" title="Direct link to 4. 插入点数据到图">​</a></h2>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> community</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">person</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> age</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> vertex_source</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li><strong>功能</strong>：
<ul>
<li>将 <code>vertex_source</code> 表中的点数据插入到图 <code>community</code> 的 <code>person</code> 点集合中。</li>
<li>每条记录对应一个 <code>person</code> 节点。</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-插入边数据到图">5. 插入边数据到图<a href="https://kaiming-l.github.io/geaflow-website/blog/29#5-%E6%8F%92%E5%85%A5%E8%BE%B9%E6%95%B0%E6%8D%AE%E5%88%B0%E5%9B%BE" class="hash-link" aria-label="Direct link to 5. 插入边数据到图" title="Direct link to 5. 插入边数据到图">​</a></h2>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> community</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">knows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> src_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tar_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> weight</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> edge_source</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li><strong>功能</strong>：
<ul>
<li>将 <code>edge_source</code> 表中的边数据插入到图 <code>community</code> 的 <code>knows</code> 边集合中。</li>
<li>每条记录对应一条 <code>knows</code> 边。</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-结果表定义">6. 结果表定义<a href="https://kaiming-l.github.io/geaflow-website/blog/29#6-%E7%BB%93%E6%9E%9C%E8%A1%A8%E5%AE%9A%E4%B9%89" class="hash-link" aria-label="Direct link to 6. 结果表定义" title="Direct link to 6. 结果表定义">​</a></h2>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> tbl_result </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  a_id long</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  e1_ts long</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  b_id long</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  e2_ts long</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  c_id long</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">type</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'file'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">file</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'${target}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li><strong>功能</strong>：
<ul>
<li>定义了一个名为 <code>tbl_result</code> 的结果表，用于存储最终的查询结果。</li>
<li>结果表包含五个字段：
<ul>
<li><code>a_id</code>：路径起点节点的 ID。</li>
<li><code>e1_ts</code>：第一条边的时间戳。</li>
<li><code>b_id</code>：路径中间节点的 ID。</li>
<li><code>e2_ts</code>：第二条边的时间戳。</li>
<li><code>c_id</code>：路径终点节点的 ID。</li>
</ul>
</li>
</ul>
</li>
<li><strong>存储方式</strong>：
<ul>
<li>结果会写入文件系统，路径由 <code>${target}</code> 指定。</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-图查询与结果插入">7. 图查询与结果插入<a href="https://kaiming-l.github.io/geaflow-website/blog/29#7-%E5%9B%BE%E6%9F%A5%E8%AF%A2%E4%B8%8E%E7%BB%93%E6%9E%9C%E6%8F%92%E5%85%A5" class="hash-link" aria-label="Direct link to 7. 图查询与结果插入" title="Direct link to 7. 图查询与结果插入">​</a></h2>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">USE</span><span class="token plain"> GRAPH community</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> tbl_result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  a_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  e1_ts</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  b_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  e2_ts</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  c_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">MATCH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a:person</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">e1:knows</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b:person</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">e2:knows</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c:person</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> e2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ts </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> e1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">RETURN</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> a_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ts </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> e1_ts</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> b_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ts </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> e2_ts</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> c_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li><strong>功能</strong>：
<ul>
<li>在图 <code>community</code> 上执行一个图查询。</li>
<li>查询的目标是找到所有满足以下条件的三元组 <code>(a, b, c)</code>：
<ol>
<li>存在一条路径 <code>a -&gt; b -&gt; c</code>，其中每条边的类型都是 <code>knows</code>。</li>
<li>第二条边 <code>e2</code> 的时间戳晚于第一条边 <code>e1</code> 的时间戳（<code>e2.ts &gt; e1.ts</code>）。</li>
</ol>
</li>
<li>返回的结果包括：
<ul>
<li>起点节点 <code>a</code> 的 ID。</li>
<li>第一条边 <code>e1</code> 的时间戳。</li>
<li>中间节点 <code>b</code> 的 ID。</li>
<li>第二条边 <code>e2</code> 的时间戳。</li>
<li>终点节点 <code>c</code> 的 ID。</li>
</ul>
</li>
</ul>
</li>
<li><strong>结果存储</strong>：
<ul>
<li>查询结果被插入到 <code>tbl_result</code> 表中，并最终写入文件系统。</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="8-运行示例">8. 运行示例<a href="https://kaiming-l.github.io/geaflow-website/blog/29#8-%E8%BF%90%E8%A1%8C%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="Direct link to 8. 运行示例" title="Direct link to 8. 运行示例">​</a></h2>
<p>假设社交平台中有以下用户和好友关系：</p>
<ul>
<li><strong>用户信息</strong>：</li>
</ul>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{id: 1, name: "Alice", age: 25}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{id: 2, name: "Bob", age: 30}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{id: 3, name: "Charlie", age: 28}</span><br></span></code></pre></div></div>
<ul>
<li><strong>好友关系</strong>：</li>
</ul>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{src_id: 1, tar_id: 2, weight: 0.8, ts: 1672531200}  -- Alice 在 10:00 添加 Bob 为好友</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{src_id: 2, tar_id: 3, weight: 0.9, ts: 1672531210}  -- Bob 在 10:05 添加 Charlie 为好友</span><br></span></code></pre></div></div>
<p>运行上述作业后，系统会输出以下结果：</p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">a_id | e1_ts       | b_id | e2_ts       | c_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1    | 1672531200  | 2    | 1672531210  | 3</span><br></span></code></pre></div></div>
<p>这表明 Alice 先通过 Bob 认识了 Charlie。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="10-业务价值">10. 业务价值<a href="https://kaiming-l.github.io/geaflow-website/blog/29#10-%E4%B8%9A%E5%8A%A1%E4%BB%B7%E5%80%BC" class="hash-link" aria-label="Direct link to 10. 业务价值" title="Direct link to 10. 业务价值">​</a></h2>
<ol>
<li><strong>优化好友推荐</strong><br>
通过分析间接好友关系，平台可以向用户推荐更有可能成为好友的潜在对象。例如，Alice 可能会对 Charlie 感兴趣，因为他们有一个共同好友 Bob。</li>
<li><strong>识别社交圈层</strong><br>
通过挖掘三元关系，平台可以识别出紧密联系的社交圈层，从而为广告投放、活动推广等提供精准的目标群体。</li>
<li><strong>风险控制</strong><br>
如果某些用户频繁出现在异常的三元关系中（例如短时间内大量新增好友），可能暗示存在虚假账号或恶意传播行为，平台可以及时采取措施。</li>
<li><strong>用户体验提升</strong><br>
实时分析用户关系链，帮助平台更好地理解用户行为，从而提供更加个性化的服务。</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="11-技术优势">11. 技术优势<a href="https://kaiming-l.github.io/geaflow-website/blog/29#11-%E6%8A%80%E6%9C%AF%E4%BC%98%E5%8A%BF" class="hash-link" aria-label="Direct link to 11. 技术优势" title="Direct link to 11. 技术优势">​</a></h2>
<ul>
<li><strong>实时性</strong>：GeaFlow 支持毫秒级的数据流处理，确保用户关系图始终是最新的。</li>
<li><strong>时间敏感性</strong>：通过时间戳字段，精确管理好友关系的时间顺序。</li>
<li><strong>灵活性</strong>：SQL 驱动的开发模式，降低了开发门槛，提升了开发效率。</li>
<li><strong>可扩展性</strong>：支持大规模动态图的增量计算，能够轻松应对社交平台的海量用户数据。</li>
</ul>
<h1>GeaFlow 时序能力的核心亮点</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-时间感知的数据处理">1. 时间感知的数据处理<a href="https://kaiming-l.github.io/geaflow-website/blog/29#1-%E6%97%B6%E9%97%B4%E6%84%9F%E7%9F%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86" class="hash-link" aria-label="Direct link to 1. 时间感知的数据处理" title="Direct link to 1. 时间感知的数据处理">​</a></h2>
<p>每条数据都带有时间戳，能够精确记录事件发生的时间。GeaFlow 支持基于时间窗口的分析，例如：</p>
<ul>
<li><strong>最近 5 分钟的趋势变化</strong><br>
用户可以通过设置时间窗口，分析最近 5 分钟内的数据变化趋势。例如，在社交网络中，分析用户互动的频率变化。</li>
<li><strong>过去一天的动态模式</strong><br>
GeaFlow 支持长时间跨度的分析，帮助用户发现长期趋势。例如，在电商推荐系统中，分析用户在过去一天内的购买行为。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-动态图与时序结合">2. 动态图与时序结合<a href="https://kaiming-l.github.io/geaflow-website/blog/29#2-%E5%8A%A8%E6%80%81%E5%9B%BE%E4%B8%8E%E6%97%B6%E5%BA%8F%E7%BB%93%E5%90%88" class="hash-link" aria-label="Direct link to 2. 动态图与时序结合" title="Direct link to 2. 动态图与时序结合">​</a></h2>
<p>GeaFlow 将图结构与时间维度结合，能够捕捉图中关系的演变。例如：</p>
<ul>
<li><strong>社交网络中好友关系的变化</strong><br>
在社交网络中，用户的好友关系可能会随着时间发生变化。GeaFlow 可以动态更新图结构，捕捉这些变化。</li>
<li><strong>金融交易网络中的资金流动</strong><br>
在金融交易网络中，资金流动是一个动态过程。GeaFlow 可以实时追踪资金流动路径，并识别潜在的风险点。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-实时与历史数据的无缝融合">3. 实时与历史数据的无缝融合<a href="https://kaiming-l.github.io/geaflow-website/blog/29#3-%E5%AE%9E%E6%97%B6%E4%B8%8E%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE%E7%9A%84%E6%97%A0%E7%BC%9D%E8%9E%8D%E5%90%88" class="hash-link" aria-label="Direct link to 3. 实时与历史数据的无缝融合" title="Direct link to 3. 实时与历史数据的无缝融合">​</a></h2>
<p>GeaFlow 不仅支持实时流数据的处理，还能结合历史数据进行对比分析。这种能力特别适合需要长期趋势分析和短期实时监控的场景。例如：</p>
<ul>
<li><strong>物联网设备监控</strong><br>
在物联网场景中，GeaFlow 可以实时监控设备状态，同时结合历史数据，预测设备可能出现的故障。</li>
<li><strong>金融风控</strong><br>
在金融风控场景中，GeaFlow 可以实时监控交易网络，同时结合历史数据，识别异常行为或潜在风险。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-丰富的内置算法">4. 丰富的内置算法<a href="https://kaiming-l.github.io/geaflow-website/blog/29#4-%E4%B8%B0%E5%AF%8C%E7%9A%84%E5%86%85%E7%BD%AE%E7%AE%97%E6%B3%95" class="hash-link" aria-label="Direct link to 4. 丰富的内置算法" title="Direct link to 4. 丰富的内置算法">​</a></h2>
<p>GeaFlow 提供针对时序数据优化的算法，例如：</p>
<ul>
<li>最短路径</li>
<li>弱联通分量</li>
<li>k-hop 算法</li>
</ul>
<p>用户无需从零开发，直接调用即可完成复杂分析。</p>
<h1>结语：开启你的时序数据分析之旅</h1>
<p>数据的动态变化蕴藏着无限价值，而 GeaFlow 的时序能力正是解锁这一价值的钥匙。无论您是数据分析新手，还是希望提升动态数据处理能力的专业人士，GeaFlow 都将为您提供强大的支持。</p>
<p>立即下载 GeaFlow，亲身体验其时序能力的强大之处吧！让我们一起探索时间数据的无限可能！</p>
<h1>术语</h1>
<p><strong><font style="color:rgb(73, 80, 87)">DSL</font></strong><font style="color:rgb(73, 80, 87)">: </font>Domain-Specific Language。融合 DSL 是 GeaFlow 提供的图表一体的数据分析语言，支持标准 SQL+ISO/GQL 进行图表分析.通过融合 DSL 可以对表数据做关系运算处理，也可以对图数据做图匹配和图算法计算，同时也支持同时图表数据的联合处理。</p>
<p><font style="color:rgb(73, 80, 87)"></font></p>
<h1>参考资料</h1>
<ul>
<li><a href="https://tugraph-analytics.readthedocs.io/en/latest/docs-cn/introduction/" target="_blank" rel="noopener noreferrer">TuGraph Analytics 简介</a></li>
<li><a href="https://tugraph-analytics.readthedocs.io/en/latest/docs-cn/concepts/glossary/" target="_blank" rel="noopener noreferrer">术语表</a></li>
<li><a href="https://tugraph-analytics.readthedocs.io/en/latest/docs-cn/concepts/stream_graph/" target="_blank" rel="noopener noreferrer">流图概念</a></li>
</ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Join性能变革：图数仓让SQL分析快人一步]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/30</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/30"/>
        <updated>2025-04-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：林力韬]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/8237/1741854036431-9d80b215-73fc-4838-bdda-905d59ebf08e.png" alt="" class="img_ev3q"></p>
<blockquote>
<p>作者：林力韬</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-场景化问题当数据关联成为业务之痛">1. 场景化问题：当数据关联成为业务之痛<a href="https://kaiming-l.github.io/geaflow-website/blog/30#1-%E5%9C%BA%E6%99%AF%E5%8C%96%E9%97%AE%E9%A2%98%E5%BD%93%E6%95%B0%E6%8D%AE%E5%85%B3%E8%81%94%E6%88%90%E4%B8%BA%E4%B8%9A%E5%8A%A1%E4%B9%8B%E7%97%9B" class="hash-link" aria-label="Direct link to 1. 场景化问题：当数据关联成为业务之痛" title="Direct link to 1. 场景化问题：当数据关联成为业务之痛">​</a></h3>
<ul>
<li><strong>金融反欺诈场景</strong>：在反欺诈分析中，复杂的多层资金链条挖掘往往依赖多表 JOIN 操作，进行复杂多跳的追踪。分析师团队耗费数天编写 SQL 脚本，最终查询耗时可达小时级别——而此时资金已完成洗白转移。这揭示出传统数仓的深层矛盾：<strong>关系型范式与真实世界网状业务逻辑的错位</strong>，常面临查询耗时高、查询逻辑复杂等挑战。</li>
<li><strong>营销分析场景</strong>：在分析营销业务关系时，试图通过用户社交关系链挖掘潜在 VIP 客户，往往要用到专业的数分技能。尽管当下借助诸如 DeepInsight AI Copilot 等工具，可以通过大模型快速生成至少能打 80 分的维度和度量，集成到自助分析面板。但通常这些分析都涉及深层次的用户关联，<strong>在 SQL 中直观表达性能较差</strong>。</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/jpeg/67556465/1741674750798-f519cba9-d8ae-47d4-aec0-97c2ef31a759.jpeg" alt="" class="img_ev3q"></p>
<p><strong>图 1 SQL Join 与 GQL 图 hop 查询性能差异示例</strong></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-数据枷锁">2. 数据枷锁<a href="https://kaiming-l.github.io/geaflow-website/blog/30#2-%E6%95%B0%E6%8D%AE%E6%9E%B7%E9%94%81" class="hash-link" aria-label="Direct link to 2. 数据枷锁" title="Direct link to 2. 数据枷锁">​</a></h3>
<p><strong>效率枷锁</strong>：当关联层级超过 3 跳，传统 JOIN 操作的时间复杂度呈指数级增长，以多表 JOIN 为核心的分析模式逐渐失去优势，成为效率的"枷锁"。</p>
<p><strong>表达力枷锁</strong>：传统 SQL 不仅需要编写复杂的表达式，更面临关系模型难以直观表达的图拓扑结构。</p>
<p><strong>创新枷锁</strong>：业务分析师因需要学习 GQL（图查询语言）而放弃采用图技术栈。工具链的割裂导致图分析能力始终停留在技术部门，难以赋能业务前线。</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/67556465/1741674805947-d91bf10a-02eb-427c-acea-3cb96094f164.png?x-oss-process=image/format,png" alt="" class="img_ev3q"></p>
<p><strong>图 2 Join 与 GQL 表达示例</strong></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-破局之道图数据仓库的核心价值">3. 破局之道：图数据仓库的核心价值<a href="https://kaiming-l.github.io/geaflow-website/blog/30#3-%E7%A0%B4%E5%B1%80%E4%B9%8B%E9%81%93%E5%9B%BE%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC" class="hash-link" aria-label="Direct link to 3. 破局之道：图数据仓库的核心价值" title="Direct link to 3. 破局之道：图数据仓库的核心价值">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-降低认知成本">(1) 降低认知成本<a href="https://kaiming-l.github.io/geaflow-website/blog/30#1-%E9%99%8D%E4%BD%8E%E8%AE%A4%E7%9F%A5%E6%88%90%E6%9C%AC" class="hash-link" aria-label="Direct link to (1) 降低认知成本" title="Direct link to (1) 降低认知成本">​</a></h4>
<p>用户无需感知图数据库的专业知识，通过 SQL 操作就能实现复杂的图关联分析，底层嫁接到图引擎底座。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-加速数据价值升维释放">(2) 加速数据价值升维释放<a href="https://kaiming-l.github.io/geaflow-website/blog/30#2-%E5%8A%A0%E9%80%9F%E6%95%B0%E6%8D%AE%E4%BB%B7%E5%80%BC%E5%8D%87%E7%BB%B4%E9%87%8A%E6%94%BE" class="hash-link" aria-label="Direct link to (2) 加速数据价值升维释放" title="Direct link to (2) 加速数据价值升维释放">​</a></h4>
<p>在支持传统 SQL 分析基础上，图数据仓库通过内置的算法仓库，将 PageRank、Louvain 等图算法封装为可解释的业务指标，支持分析隐藏的复杂模式（例如资金流的闭环路径识别）。同时，关联关系能够即时以图结构可视化呈现，摆脱传统数仓中基于表关联的抽象性，扩大了系统分析能力边界。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-突破性能瓶颈">(3) 突破性能瓶颈<a href="https://kaiming-l.github.io/geaflow-website/blog/30#3-%E7%AA%81%E7%A0%B4%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88" class="hash-link" aria-label="Direct link to (3) 突破性能瓶颈" title="Direct link to (3) 突破性能瓶颈">​</a></h4>
<p>多表 JOIN 查询转为图路径检索，利用图引擎关联性分析优势，性能可从分钟级跃升至秒级，单点分析进入毫秒级。 支持动态图数据的实时更新，与传统批量处理模式（T+1）的滞后性形成鲜明对比。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="二技术解析图数仓的核心技术革命">二、技术解析：图数仓的核心技术革命<a href="https://kaiming-l.github.io/geaflow-website/blog/30#%E4%BA%8C%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E5%9B%BE%E6%95%B0%E4%BB%93%E7%9A%84%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E9%9D%A9%E5%91%BD" class="hash-link" aria-label="Direct link to 二、技术解析：图数仓的核心技术革命" title="Direct link to 二、技术解析：图数仓的核心技术革命">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-schema-转换器er--graph">1. Schema 转换器（ER → Graph）<a href="https://kaiming-l.github.io/geaflow-website/blog/30#1-schema-%E8%BD%AC%E6%8D%A2%E5%99%A8er--graph" class="hash-link" aria-label="Direct link to 1. Schema 转换器（ER → Graph）" title="Direct link to 1. Schema 转换器（ER → Graph）">​</a></h3>
<p>对于大多数非专业用户而言，由于图领域知识缺乏、不熟悉图建模的思维方式等原因，导致利用图计算系统解决业务问题、分析需求存在较大挑战。在业务推广中，我们发现利用将表的 ER 模型描述自动转化为图模型建模，提供给用户一个初始的图，有助于用户快速上手。</p>
<p>图数仓 Schema 转换器自动将传统数据仓库中的 ER 模型（实体-关系模型）转换为图数据库的节点与边结构，<font style="color:rgba(0, 0, 0, 0.88)">支持对物理表、视图表、维度表进行统一建模。在原理上，图的实体可以理解为关系表选定一组列序列作为 ID 生成的 KV 表。在 ER 图解析时，具有等值关系的列可以视为同一个等价列，并将等值关系传递到不同表的等价列上。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.88)">从而，可以将模型转换算法总结为三阶段：</font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.88)">第一阶段，语义分析。</font></strong><font style="color:rgba(0, 0, 0, 0.88)">重点在于选取实体多列序列作为 ID 组成，识别表的实体/关系语义，发现跨表等价列（具有等值关系的列），融合支持表达式列处理。需要在所有可能的解法中，综合考虑存储性能、计算性能、可解释性评分最好的解法，作为构图的基础。</font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.88)">第二阶段，结构化转换。</font></strong><font style="color:rgba(0, 0, 0, 0.88)">重点在于生成点/边实体，合并点实体，必要时通过冗余边生成平衡数据冗余与查询性能。自动创建虚拟点完成关系绑定，配置边的起始端点。</font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.88)">第三阶段，组装成图。</font></strong><font style="color:rgba(0, 0, 0, 0.88)">即将所有点合并在一起，绑定在起始点上的边自然合并，对端点可选地进行绑定。对两个有差异的转图方案方案，可以计算差异向量，即所有表映射到实体的变化情况。 </font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/67556465/1741683049495-d75ae87b-9510-40ee-b22f-c6140570b1f1.png" alt="" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/67556465/1741683063811-75a42c49-8b17-482b-9dd2-98be89ec63b0.png" alt="" class="img_ev3q"></p>
<p><strong>图 3 ER 图转图 Schema 示例组图</strong></p>
<p><font style="color:rgba(0, 0, 0, 0.88)">通过算法自动分析多表之间的关联关系并自动构建图的点边，可以为数据从原始存储位置迁移至图数仓提供依据，同时显著消除人工数据建模、人工编写数据导入 DSL 的工作量，无人工介入即可使传统数仓数据快速迁移到图数据仓库中，立即开始分析。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-数据通道物化数据交互能力">2. 数据通道：物化数据交互能力<a href="https://kaiming-l.github.io/geaflow-website/blog/30#2-%E6%95%B0%E6%8D%AE%E9%80%9A%E9%81%93%E7%89%A9%E5%8C%96%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E8%83%BD%E5%8A%9B" class="hash-link" aria-label="Direct link to 2. 数据通道：物化数据交互能力" title="Direct link to 2. 数据通道：物化数据交互能力">​</a></h3>
<p>类似于传统数据仓库，图数仓基于 GeaFlow 引擎能力与 TuMaker 成熟的业务平台提供数据<font style="color:rgb(0, 0, 0)">任务编排能力，即将多个数据处理任务（如数据抽取、转换、加载等）按照一定的逻辑顺序组织起来，自动执行的过程。提供可视化界面、任务调度机制、监听事件触发、错误处理、监控与日志、版本控制与回滚、智能调度集群资源等关键能力。</font></p>
<p><font style="color:rgb(0, 0, 0)">在 Schema 转换器的加持下，可以得到从表存储到图存储的物化方案，它</font><font style="color:rgba(0, 0, 0, 0.88)">构建了连接传统数仓与图数仓的数据通道。基于表转图的物化方案，可以根据业务实际配置的加速表、加速关系、字段、权限等信息，全自动生成数据同步的任务编排，再通过图数仓平台调度，实现数据迁移全程无感，后续实时更新与增量同步，同步效率可达延迟十分钟级别。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.88)">数据通道能力面向主流大数据生态系统，可深度集成 ODPS/Hive/Paimon 等基础设施，通过三层架构实现全生命周期数据管理：在数据接入层，自动捕获表的变化，产出物化方案，同步表-图实体映射的增量部分，当前可管理 10TB 级别图数据；在转换引擎层，全自动化生成导数的 DSL 任务编排，调度到集群执行；在存储优化层，支持 CStore/GraphDB/RocksDB 等自研或开源图存储解决方案，实践中已经过万亿级超大业务图的检验。此外，查询热数据预加载可根据图的实际使用情况，在 TB 级数据规模下仍能维持秒级查询相应，真正实现从表数仓到图数仓的全栈切换，SQL 之下全为图。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/67556465/1741684625347-a229239e-fd58-4d42-adc9-f272e3f13fdf.png" alt="" class="img_ev3q"></p>
<p><strong>图 4 开源技术架构一张大图</strong></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-sql-gql-翻译引擎">3. SQL-GQL 翻译引擎<a href="https://kaiming-l.github.io/geaflow-website/blog/30#3-sql-gql-%E7%BF%BB%E8%AF%91%E5%BC%95%E6%93%8E" class="hash-link" aria-label="Direct link to 3. SQL-GQL 翻译引擎" title="Direct link to 3. SQL-GQL 翻译引擎">​</a></h3>
<p><font style="color:rgba(0, 0, 0, 0.88)">在传统关系型数据库中，多层表关联查询往往需要编写复杂的 JOIN 语句，不仅开发效率低下，性能也难以满足海量关联数据的即席分析需求。针对这一痛点，我们通过创新的 SQL-GQL 翻译引擎，让用户无需学习图查询语言（GQL）即可将 SQL 中复杂的 JOIN 语句自动转换为图路径查询，消除用户对图领域复杂性感知，同时利用图引擎优化执行性能。</font></p>
<p><font style="color:rgb(64, 64, 64)">与 SQL 基于关系模型的二维表操作不同，GQL 的查询结构和语义贴合图数据的特性，尤其在查询逻辑的线性化和嵌套处理上存在显著差异。将 SQL 查询转换为 GQL（图查询语言）是一项涉及</font>语法结构映射<font style="color:rgb(64, 64, 64)">、</font>数据模型映射<font style="color:rgb(64, 64, 64)">和</font>执行逻辑重构<font style="color:rgb(64, 64, 64)">的复杂任务。其核心挑战在于如何将基于关系模型的</font>集合操作<font style="color:rgb(64, 64, 64)">转化为基于图模型的</font>线性路径遍历<font style="color:rgb(64, 64, 64)">，同时规避嵌套查询、不合理图计算顺序的代价。</font></p>
<p>对比传统 SQL 查询<font style="color:rgb(64, 64, 64)">，可能需通过 3 层表关联分析用户关联关系，响应时间在分钟级别。而</font>图路径查询直接通过图的遍历语句实现，响应时间缩短至秒级。<font style="color:rgba(0, 0, 0, 0.88)">目前该引擎已在短视频分析、会员用增、客权服务等典型业务场景得到验证，未来将持续扩展对复杂子查询、复杂表达式运算的支持，让更多开发者无需跨越技术鸿沟即可解锁图计算的强大能力。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/67556465/1741683921355-149d0fea-7a3f-4fb8-ad36-f4b4c8541113.png" alt="" class="img_ev3q"></p>
<p><strong>图 5 SQL 抽象语法树 AST 翻译为 GQL 结构的差异示例</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="三技术优势与应用场景">三、技术优势与应用场景<a href="https://kaiming-l.github.io/geaflow-website/blog/30#%E4%B8%89%E6%8A%80%E6%9C%AF%E4%BC%98%E5%8A%BF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="Direct link to 三、技术优势与应用场景" title="Direct link to 三、技术优势与应用场景">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="31-效率提升的底层逻辑">3.1 效率提升的底层逻辑<a href="https://kaiming-l.github.io/geaflow-website/blog/30#31-%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87%E7%9A%84%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91" class="hash-link" aria-label="Direct link to 3.1 效率提升的底层逻辑" title="Direct link to 3.1 效率提升的底层逻辑">​</a></h3>
<p><font style="color:rgba(0, 0, 0, 0.88)">在关联分析场景中，图数据仓库的突破性性能源于两大核心技术革新。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.88)">首先，图存储模型通过物理结构的优化彻底改变了数据组织方式。传统关系型数据库将关联信息分散存储在外键表中，执行多表 JOIN 时需频繁进行基于索引的寻址和数据重组。而图模型采用连接键原生聚合存储机制，将实体属性与其关联关系作为"节点-边"结构进行物理邻接存储，配合缓存预加载技术，使得关联关系的遍历检索复杂度从 O(n²)降低至 O(n)，特定键的处理复杂度从 O(n)降低至 O(1)。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.88)">其次，图遍历算法构建了全新的查询范式。相较于关系型数据库基于集合的批处理模式，图引擎采用深度优先、广度优先等路径遍历算法，结合查询条件动态剪枝规避无效分支遍历。这种机制使得多层以上的链路追踪响应时间稳定在秒级，而传统 SQL 方案在大表的 3 层关联时往往已出现分钟级延迟。更关键的是，图遍历支持实时增量计算，当表新增记录时，展现出卓越的扩展能力。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="32-用户价值主张">3.2 用户价值主张<a href="https://kaiming-l.github.io/geaflow-website/blog/30#32-%E7%94%A8%E6%88%B7%E4%BB%B7%E5%80%BC%E4%B8%BB%E5%BC%A0" class="hash-link" aria-label="Direct link to 3.2 用户价值主张" title="Direct link to 3.2 用户价值主张">​</a></h3>
<p><font style="color:rgba(0, 0, 0, 0.88)">作为新一代数据基础设施，图数据仓库开创了"一图多用"的全新范式。用户既可通过熟悉的 SQL 接口进行常规分析，通过底层引擎嫁接的形式融入现有的基础设施。也可在需要深度挖掘时切换至 GQL、Gremlin 等专业图查询语言。这种双模兼容特性在同一套数据资产支撑不同类型的分析需求时尤为突出。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.88)">在算法支持层面，系统预置的图计算引擎突破传统数仓的局限，同时面向开源生态开放自定义图算法开发接口。例如传统 PageRank 算法可识别社交网络影响力节点，应用于精准营销场景；弱连接分析（WCC）帮助在亿级交易数据中发现异常社群；通过标准化 API 开放，用户既无需关注分布式计算细节，也无需关注数据构图流程，即可完成万亿边规模的数据挖掘。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.88)">相较于传统数仓，图数仓在三个维度实现代际跨越：性能层面，关联查询效率提升 1-2 个数量级；易用性层面，通过 SQL-GQL 自动转换消除图领域学习成本；分析深度层面，支持算法分析和隐性关系挖掘。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="四未来展望">四、未来展望<a href="https://kaiming-l.github.io/geaflow-website/blog/30#%E5%9B%9B%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B" class="hash-link" aria-label="Direct link to 四、未来展望" title="Direct link to 四、未来展望">​</a></h2>
<p><font style="color:rgba(0, 0, 0, 0.88)">作为下一代数据基础设施的核心载体，我们计划逐步将图存储引擎、图计算框架引擎、SQL-GQL 翻译模块等核心能力开源，构建开发者共创的技术生态。2023 年已率先开源流图计算引擎 GeaFlow，2025 年 Q3 将继续开放图模型数据分析标准化平台，高性能的图计算引擎，支持社区开发者开发异构数据源连接器。这种开放协作模式不仅加速技术迭代，更推动产品成为 ISO/IEC 39075 GQL 国际标准的最佳实践平台，助力 SQL-GQL 混合查询渐成行业规范。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.88)">技术演进层面，下一代引擎将突破动态流图计算瓶颈，实现万亿边规模数据的增量更新。通过融合向量化计算引擎，可同时处理属性图与向量图的联合查询，满足 AIGC 时代的多模态分析需求，并支持自然语言直接生成图查询语句的颠覆性体验。行业应用前景正呈现爆发态势，未来图数据仓库将承载多数企业关联数据分析负载，成为智能决策的核心引擎。</font></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stream4Graph：动态图上的增量计算]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/27</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/27"/>
        <updated>2025-03-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：张奇]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/8237/1740982328260-3a0ff09e-920b-4f55-af14-326b5d0a358c.png" alt="" class="img_ev3q"></p>
<blockquote>
<p>作者：张奇</p>
</blockquote>
<p>众所周知，当我们需要对数据做关联性分析的时候，一般会采用表连接（SQL join）的方式完成。但是 SQL join 时的笛卡尔积计算需要维护大量的中间结果，从而对整体的数据分析性能带来巨大影响。相比而言，基于图的方式维护数据的关联性，原本的关联性分析可以转换为图上的遍历操作，从而大幅降低数据分析的成本。</p>
<p>然而，随着数据规模的不断增长，以及对数据处理更强的实时性需求，如何高效地解决大规模图数据上的实时计算问题，就变得越来越紧迫。传统的计算引擎，如 Spark、Flink 对于图数据的处理已经逐渐不能满足业务日益增长的诉求，因此设计一套面向大规模图数据的实时处理引擎，将会对大数据处理技术革新带来巨大的帮助。</p>
<p>蚂蚁图计算团队开源的流图计算引擎<a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer">GeaFlow</a>，结合了图处理和流处理的技术优势，实现了动态图上的增量计算能力，在高性能关联性分析的基础上，进一步提升了图计算的实时性。接下来向大家介绍图计算技术的特点，业内如何解决大规模实时图计算问题，以及 GeaFlow 在动态图上的计算性能表现。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-图计算">1. 图计算<a href="https://kaiming-l.github.io/geaflow-website/blog/27#1-%E5%9B%BE%E8%AE%A1%E7%AE%97" class="hash-link" aria-label="Direct link to 1. 图计算" title="Direct link to 1. 图计算">​</a></h2>
<p><font style="color:rgb(51, 51, 51)">图是一种数学结构，由节点和边组成。节点代表各种实体，比如人、地点、事物或概念，而边则表示这些节点之间的关系。例如：</font></p>
<ul>
<li><font style="color:rgb(51, 51, 51)">社交媒体</font><font style="color:rgb(51, 51, 51)">：节点可以代表用户，边可以表示朋友关系。</font></li>
<li><font style="color:rgb(51, 51, 51)">网页</font><font style="color:rgb(51, 51, 51)">：节点代表网页，边代表超链接。</font></li>
<li><font style="color:rgb(51, 51, 51)">交通网络：节点代表城市，边代表道路或航线。</font></li>
</ul>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/314644/1740386529457-b43e2d49-6000-4acf-862c-314ae4f23dbc.png" alt="" class="img_ev3q"></p>
<p>图本身代表了节点与节点之间的链接关系，而针对这些关系，我们可以<font style="color:rgb(51, 51, 51)">利用图中的节点和边来进行信息处理、分析和挖掘，帮助我们理解复杂系统中的关系和模式。在图上开展的计算活动就是图计算。图计算有很多应用场景，比如通过社交网络分析可以识别用户之间的联系，发现社群结构；通过分析网页间的链接关系来计算网页排名；通过用户的行为和偏好构建关系图，推荐相关内容和产品。</font></p>
<p><font style="color:rgb(51, 51, 51)"></font></p>
<p><font style="color:rgb(51, 51, 51)">我们就以简单的社交网络分析算法，弱联通分量（</font><font style="color:rgb(51, 51, 51)">Weakly Connected Components， WCC</font><font style="color:rgb(51, 51, 51)">）为例。弱联通分量可以帮助我们识别用户之间的“朋友圈”或“社区”，比如某个社交平台上，一群用户通过点赞、评论或关注形成一个大的弱联通分量，而某些用户可能没有连接到这个大分量，形成更小的弱联通分量。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/314644/1740386998582-16f67c8e-ee45-48d2-bb5f-f45ec3956273.png" alt="" class="img_ev3q"></p>
<p>如果仅仅针对上面这张小图来构建弱联通分量算法，那么非常简单，我们只需要在个人 PC 上构建简单的点边结构然后走图遍历即可。但如果图的规模扩展的千亿甚至万亿，这时就需要用到大规模分布式图计算引擎来处理了。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-分布式图计算spark-graphx">2. 分布式图计算：Spark GraphX<a href="https://kaiming-l.github.io/geaflow-website/blog/27#2-%E5%88%86%E5%B8%83%E5%BC%8F%E5%9B%BE%E8%AE%A1%E7%AE%97spark-graphx" class="hash-link" aria-label="Direct link to 2. 分布式图计算：Spark GraphX" title="Direct link to 2. 分布式图计算：Spark GraphX">​</a></h2>
<p>针对图的处理一般有图计算引擎和图数据库两大类，图数据库有<font style="color:rgb(51, 51, 51)">Neo4j‌、TigerGraph‌ 等，</font>图计算引擎有 Spark GraphX、Pregel 等。在本文我们主要讨论图计算引擎，以 Spark GraphX 为例，<font style="color:rgb(51, 51, 51)">Spark GraphX 是 Apache Spark 的一个组件，专门用于图计算和图分析。GraphX 结合了 Spark 的强大数据处理能力与图计算的灵活性，扩展了 Spark 的核心功能，为用户提供了一个统一的 API，便于处理图数据。</font></p>
<p><font style="color:rgb(51, 51, 51)"></font></p>
<p><font style="color:rgb(51, 51, 51)">那么在 Spark GraphX 上是如何处理图算法的呢？GraphX 通过引入一种点和边都附带属性的有向多图扩展了 Spark RDD 这种抽象数据结构，为用户提供了一个类似于 Pregel 计算模型的以点为中心的并行抽象。用户需要为 GraphX 提供原始图 graph、初始消息 initialMsg、核心计算逻辑 vprog、发送消息控制组件 sendMsg、合并消息组件 mergeMsg，计算开始时，GraphX 初始阶段会激活所有点进行初始化，然后按照用户提供的发送消息组件确定接下来向那些点发送消息。在之后的迭代里，只有收到消息的点才会被激活，进行接下来的计算，如此循环往复直到链路中没有被新激活的点或者到达最大迭代次数，最后输出计算结果。</font></p>
<p><font style="color:rgb(51, 51, 51)"></font></p>
<div class="language-scala codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-scala codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  def apply[VD: ClassTag, ED: ClassTag, A: ClassTag]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     (graph: Graph[VD, ED],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      initialMsg: A,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      maxIterations: Int = Int.MaxValue,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      activeDirection: EdgeDirection = EdgeDirection.Either)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     (vprog: (VertexId, VD, A) =&gt; VD,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sendMsg: EdgeTriplet[VD, ED] =&gt; Iterator[(VertexId, A)],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      mergeMsg: (A, A) =&gt; A)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    : Graph[VD, ED]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  var g = graph.mapVertices((vid, vdata) =&gt; vprog(vid, vdata, initialMsg))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // compute the messages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  var messages = GraphXUtils.mapReduceTriplets(g, sendMsg, mergeMsg)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Loop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  var prevG: Graph[VD, ED] = null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var i = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    while (isActiveMessagesNonEmpty &amp;&amp; i &lt; maxIterations) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // Receive the messages and update the vertices.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      prevG = g</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      g = g.joinVertices(messages)(vprog)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      graphCheckpointer.update(g)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // Send new messages, skipping edges where neither side received</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // a message.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      messages = GraphXUtils.mapReduceTriplets(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        g, sendMsg, mergeMsg, Some((oldMessages, activeDirection)))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>总的来说，用户首先需要将存储介质中原始的表结构数据转换为 GraphX 中的点边数据类型，然后交给 Spark 进行处理，这是针对静态图进行离线处理。但是我们知道，现实世界中，图数据的规模和数据内节点之间的关系都不是一成不变的，并且在大数据时代其变化非常快。如何实时高效的处理不断变化的图数据（动态图），是一个值得深思的问题。</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/314644/1740454568183-6d42716b-fc84-41a8-945c-c97b81d61135.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-动态图计算spark-streaming">3. 动态图计算：Spark Streaming<a href="https://kaiming-l.github.io/geaflow-website/blog/27#3-%E5%8A%A8%E6%80%81%E5%9B%BE%E8%AE%A1%E7%AE%97spark-streaming" class="hash-link" aria-label="Direct link to 3. 动态图计算：Spark Streaming" title="Direct link to 3. 动态图计算：Spark Streaming">​</a></h2>
<p>针对动态图的处理，常见的解决方案是 Spark Streaming 框架，它可以从很多数据源消费数据并对数据进行处理。它是是 Spark 核心 API 的一个扩展，可以实现高吞吐量的、具备容错机制的实时流数据的处理。</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/314644/1740470405961-05389aa3-1b67-4cdf-9c65-ea28641ef89c.png" alt="" class="img_ev3q"></p>
<p>如上图所示是 Spark Streaming 对实时数据进行处理的流程。首先 Spark 中的每个 Receiver 接收到实时消息流后，对实时消息进行解析和切分，之后将生成的图数据存储在每个 Executor 中。每当数据累积到一定的批次，就会触发一次全量计算，最后将计算出的结果输出给用户，这也称之为基于快照的图计算方案。</p>
<p><font style="color:rgb(64, 64, 64)"></font></p>
<p><font style="color:rgb(64, 64, 64)">但这种方案有一个比较大的缺点，就是它存在着重复计算的问题，假如我们需要以 1 小时一个窗口做一次计算，那么在使用 Spark 进行计算时，不仅要将当前窗口的数据计算进去，历史所有数据也需要进行回溯，存在大量重复计算，这样做效率不高，因此我们需要一套能够进行增量计算的图计算方案。</font></p>
<p><font style="color:rgb(64, 64, 64)"></font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-动态图增量计算geaflow">4. 动态图增量计算：GeaFlow<a href="https://kaiming-l.github.io/geaflow-website/blog/27#4-%E5%8A%A8%E6%80%81%E5%9B%BE%E5%A2%9E%E9%87%8F%E8%AE%A1%E7%AE%97geaflow" class="hash-link" aria-label="Direct link to 4. 动态图增量计算：GeaFlow" title="Direct link to 4. 动态图增量计算：GeaFlow">​</a></h2>
<p><font style="color:rgb(64, 64, 64)">我们知道在传统的流计算引擎中，如 Flink，</font><font style="color:rgb(51, 51, 51)">其处理模型允许系统能够处理不断流入的数据事件。处理每个事件时，Flink 可以评估变化并仅针对变化的部分执行计算。这意味着在增量计算过程中，Flink 会关注最新到达的数据，而不是整个数据集。于是受到 Flink 增量计算的启发，</font><font style="color:rgb(64, 64, 64)">我们自研了增量图计算系统 GeaFlow（也叫流图计算引擎），能够很好的支持增量图迭代计算。</font></p>
<p><font style="color:rgb(64, 64, 64)"></font></p>
<p>那么 GeaFlow 是如何实现增量图计算的呢？首先，实时数据通过 connector 消息源输入的 GeaFlow 中，GeaFlow 依据实时数据，生成内部的点边结构数据，并且将点边数据插入进底图中。当前窗口的实时数据涉及到的点会被激活，触发图迭代计算。</p>
<p>这里以 WCC 算法为例，对联通分量算法而言，在一个时间窗口内每条边对应的 src id 和 tar id 对应的顶点会被激活，第一次迭代需要将其 id 信息通知其邻居节点。如果邻居节点收到消息后，发现需要更新自己的信息，那么它需要继续将更新消息通知给它的邻居节点；如果说邻居节点不需要更新自己的信息，那么它就不需要通知其邻居节点，它对应的迭代终止。</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/314644/1740471552771-36ee8f06-d58e-4cb7-914d-c44e151575a0.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-geaflow-架构简析">5. GeaFlow 架构简析<a href="https://kaiming-l.github.io/geaflow-website/blog/27#5-geaflow-%E6%9E%B6%E6%9E%84%E7%AE%80%E6%9E%90" class="hash-link" aria-label="Direct link to 5. GeaFlow 架构简析" title="Direct link to 5. GeaFlow 架构简析">​</a></h2>
<p>GeaFlow 引擎主要由三大主要部分组成，DSL、Framework 和 State，同时向上为用户提供了 Stream API、静态图 API 和动态图 API。DSL 主要负责图查询语言 SQL+ISO/GQL 的解析和执行计划的优化，同时负责 schema 的推导，也向外部承接了多种 Connector，比如 hive、hudi、kafka、odps 等。Framework 层负责运行时的调度和容灾，shuffle 以及框架内各个组件的管理协调。State 层负责存储底层图数据和数据的持久化，同时也负责索引、下推等众多性能优化工作。</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/314644/1739276186744-96d40e95-4e29-48ef-8892-1b7dfa60c726.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-geaflow-性能测试">6. GeaFlow 性能测试<a href="https://kaiming-l.github.io/geaflow-website/blog/27#6-geaflow-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95" class="hash-link" aria-label="Direct link to 6. GeaFlow 性能测试" title="Direct link to 6. GeaFlow 性能测试">​</a></h2>
<p>为了验证 GeaFlow 的增量图计算性能，我们设计了这样的实验。一批数据按照固定时间窗口实时输入到计算引擎中，我们分别用 Spark 和 GeaFlow 对全图做联通分量算法计算，比较两者计算耗时。实验在 3 台 24 核内存 128G 的机器上开展，使用的数据集是公开数据集<a href="https://snap.stanford.edu/data/soc-LiveJournal1.html" target="_blank" rel="noopener noreferrer">soc-Livejournal</a>，测试的图算法是弱联通分量算法。我们以 50w 条数据作为一个计算窗口，每输入到引擎中 50w 条数据，就触发一次图计算。</p>
<p>Spark 作为批处理引擎，对于每一批窗口来的数据，不管窗口规模是大是小，都需要对增量图数据连同历史图数据进行全量计算。在 Spark 上，可以直接调用 Spark GraphX 内部内置的 WCC 算法进行计算。</p>
<div class="language-scala codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-scala codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">object SparkTest {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  def main(args: Array[String]): Unit = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    val iter_num: Int = args(0).toInt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    val parallel: Int = args(1).toInt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    val spark = SparkSession.builder.appName("HDFS Data Load").config("spark.default.parallelism", args(1)).getOrCreate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    val sc = new JavaSparkContext(spark.sparkContext)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    val graph = GraphLoader.edgeListFile(sc, "hdfs://rayagsecurity-42-033147014062:9000/" + args(2), numEdgePartitions = parallel)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    val result = graph.connectedComponents(10)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    handleResult(result)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    print("finish")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  def handleResult[VD, ED](graph: Graph[VD, ED]): Unit = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    graph.vertices.foreachPartition(_.foreach(tuple =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>GeaFlow 上支持 SQL+ISO/GQL 的图查询语言，我们使用图查询语言调用 GeaFlow 内置的增量联通分量图算法进行测试，图查询语言代码如下：</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">IF</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">EXISTS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">tables</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  f1 </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  f2 </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">type</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'file'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">size</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'16000'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">column</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">separator</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'\t'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  test</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">source</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">parallel </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'32'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dsl</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">file</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'hdfs://xxxx:9000/com-friendster.ungraph.txt'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> GRAPH modern </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Vertex v1 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    id </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Edge e1 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    srcId </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> SOURCE ID</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    targetId </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> DESTINATION ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  storeType</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'memory'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shardCount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">256</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> modern</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">srcId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">targetId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> f1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> f1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> f2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">tables</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> modern</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> f2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">tables</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">IF</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">EXISTS</span><span class="token plain"> tbl_result </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  vid </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  	component </span><span class="token keyword" style="color:#00009f">bigint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">ignore</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'true'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'file'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> GRAPH modern</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> tbl_result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CALL</span><span class="token plain"> inc_wcc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> YIELD </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> component</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">RETURN</span><span class="token plain"> vid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> component</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>下图是对两者进行联通分量算法实验时得到的实验结果。以 50w 条数据为一个窗口进行迭代计算，Spark 中存在大量的重复计算，因为其还要回溯全量的历史数据进行计算。而 GeaFlow 只会激活当前窗口中涉及到的点边进行增量计算，计算可在秒级别完成，每个窗口的计算时间基本稳定。随着数据量的不断增大，Spark 进行计算时所需要回溯的历史数据就越多，在其机器容量没有达到上限的情况下，其计算时延和数据量呈正相关分布。相同情况下 GeaFlow 的计算时间也会略微增大，但基本可以在秒级别完成。</p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/314644/1740537488877-eb89b886-7c4c-4c5a-8e27-06356b15afa0.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-总结">7. 总结<a href="https://kaiming-l.github.io/geaflow-website/blog/27#7-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="Direct link to 7. 总结" title="Direct link to 7. 总结">​</a></h2>
<p><font style="color:rgb(6, 6, 7)">传统的图计算方案（如 Spark GraphX）在近实时场景中存在重复计算问题，受 Flink 流处理模型和传统图计算的启发，我们给出了一套能够支持增量图计算的方案。总的来说 GeaFlow 主要有以下几个方面的优势：</font></p>
<ol>
<li><font style="color:rgb(6, 6, 7)">GeaFlow 在处理增量实时计算时，性能优于 Spark Streaming + GraphX 方案，尤其是在大规模数据集上。</font></li>
<li><font style="color:rgb(6, 6, 7)">GeaFlow 通过增量计算避免了全量数据的重复处理，计算效率更高，计算时间更短性能不明显下降。</font></li>
<li><font style="color:rgb(6, 6, 7)">GeaFlow 支持 SQL+GQL 混合处理语言，更适合开发复杂的图数据处理任务。</font></li>
</ol>
<p>GeaFlow 项目代码已全部开源，我们完成了部分流图引擎基础能力的构建，未来希望基于 GeaFlow 构建面向图数据的统一湖仓处理引擎，以解决多样化的大数据关联性分析诉求。同时我们也在积极筹备加入 Apache 基金会，丰富大数据开源生态，因此非常欢迎对图技术有浓厚兴趣同学加入社区共建。</p>
<p>社区中有诸多有趣的工作尚待完成，你可以从如下简单的「Good First Issue」开始，期待你加入同行。</p>
<ul>
<li>支持 Paimon Connector 插件，连接数据湖生态。（<a href="https://github.com/TuGraph-family/tugraph-analytics/issues/361" target="_blank" rel="noopener noreferrer">Issue 361</a>）</li>
<li>优化 GQL match 语句性能。（<a href="https://github.com/TuGraph-family/tugraph-analytics/issues/363" target="_blank" rel="noopener noreferrer">Issue 363</a>）</li>
<li>新增 ISO/GQL 语法，支持 same 谓词。（<a href="https://github.com/TuGraph-family/tugraph-analytics/issues/368" target="_blank" rel="noopener noreferrer">Issue 368</a>）</li>
<li>...</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考链接">参考链接<a href="https://kaiming-l.github.io/geaflow-website/blog/27#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5" class="hash-link" aria-label="Direct link to 参考链接" title="Direct link to 参考链接">​</a></h2>
<ol>
<li>GeaFlow 项目地址：<a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer">https://github.com/TuGraph-family/tugraph-analytics</a></li>
<li>soc-Livejournal 数据集地址：<a href="https://snap.stanford.edu/data/soc-LiveJournal1.html" target="_blank" rel="noopener noreferrer">https://snap.stanford.edu/data/soc-LiveJournal1.html</a></li>
<li>GeaFlow Issues：<a href="https://github.com/TuGraph-family/tugraph-analytics/issues" target="_blank" rel="noopener noreferrer">https://github.com/TuGraph-family/tugraph-analytics/issues</a></li>
</ol>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重磅发布！！！蚂蚁图团队开源高性能原生图存储系统CStore]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/24</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/24"/>
        <updated>2023-12-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：唐浩栋]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：唐浩栋</font></p>
<p><font style="color:rgb(69, 69, 69)">CStore 是一款专门为图分析场景而设计的原生图存储引擎，它采用了 Rust 语言编写，使用基于图的存储结构，针对图分析场景进行特定优化。CStore 可以存储包含千亿级点和万亿级边的图数据，在蚂蚁集团内部的多场景使用中，已经积累了多年的经验，存储容量达到了 PB 级别。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="图存储系统"><font style="color:rgb(69, 69, 69)">图存储系统</font><a href="https://kaiming-l.github.io/geaflow-website/blog/24#%E5%9B%BE%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F" class="hash-link" aria-label="Direct link to 图存储系统" title="Direct link to 图存储系统">​</a></h2>
<p><em><font style="color:rgb(130, 130, 130)">百艺通，不如一艺精</font></em></p>
<p><font style="color:rgb(69, 69, 69)">在设计数据存储引擎时，需要考虑众多因素。例如，所应用的具体场景，是联机分析处理(OLAP)还是联机事务处理(OLTP)；再如，数据存储方式的选择，内存、本地硬盘或分布式存储；还有就是存储数据的格式，像是文档、JSON，宽表，对象，键值对等。图存储引擎是诸多数据存储引擎中的一种，它专门用于图数据的存储。从 DB-Engines 网站的统计来看，Graph DBMS 的热度从 2014 后一直领先其他类型数据库。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590462583-8c4300c0-fd3d-48fc-891d-2e6995c4d2ac.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">根据图数据存储方式的不同，现有的图存储引擎主要分为下面几大类：</font></p>
<ol>
<li><font style="color:rgb(69, 69, 69)">基于链表，例如 Neo4j。</font></li>
<li><font style="color:rgb(69, 69, 69)">基于 Hash+链表，例如 ArangoDB。</font></li>
<li><font style="color:rgb(69, 69, 69)">基于 Key-Value 键值，例如 Titan/JanusGraph/HugeGraph。</font></li>
<li><font style="color:rgb(69, 69, 69)">基于传统关系型数据库，例如 AgensGraph。</font></li>
</ol>
<p><font style="color:rgb(69, 69, 69)">CStore 基于 Array+链表的方式存储数据，支持实时读写能力。为了提供更好的图分析能力，CStore 把图元数据和属性分离存储，单独对元数据构建多级索引。CStore 在存储方式和索引设计上都充分考虑到图语义，有效地结合图数据访问的特点，充分利用计算机硬件的优势，在蚂蚁内部多个场景中得到验证，取得很好的业务效果。 接下来从建模、存储、索引三个方面来介绍 CStore 作为原生图存储引擎的特点。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="原生图建模"><font style="color:rgb(69, 69, 69)">原生图建模</font><a href="https://kaiming-l.github.io/geaflow-website/blog/24#%E5%8E%9F%E7%94%9F%E5%9B%BE%E5%BB%BA%E6%A8%A1" class="hash-link" aria-label="Direct link to 原生图建模" title="Direct link to 原生图建模">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">图形数据非常适用于描述复杂的网络关系。与其他存储格式相比较，图形数据具有自身的独特之处。举例来说，在 NoSQL 数据库中，Key-Value 数据库只包含 Key 和 Value 这两种元素，用户更容易理解和操作，并且存储引擎的设计也可以遵循一定的规则。另外，对于 DBMS（数据库管理系统）来说，实体关系模型必须按照一定的规范来进行设计，通常情况下，要求业务表的设计至少要符合第三范式，以此来消除数据冗余现象。CStore 基于属性图来建模，属性图是由点，边，以及点和边上的属性组成的图，点数据中记录了起始点 ID 和图元数据（标签，时间戳），边数据记录了起始点 ID 和图元数据（终点 ID，方向，标签，时间戳），每个起始点 ID 唯一确定一组点边数据。</font></p>
<p><font style="color:rgb(69, 69, 69)">点边数据进入到 CStore 之后，把点边起始点 ID 转化为从 0 开始的 ID，这个过程称之为 ID 化。由于用户定义的起始点 ID 格式不固定，蚂蚁内部使用的起始点通常大于 20bytes，转化为 4 个 bytes ID 后，可以极大减少索引内存消耗；另外规范化 ID 之后，CStore 使用 array 来做主键索引，array 的 index 为 ID，查询效率为 O(1)。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590462430-ff982d97-68dc-46ec-afac-aafefdd188f2.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">ID 化之后，点边数据被序列化为 PrimaryKey 和 GraphData，GraphData 由 SecondKey 和 Property 组成。PrimaryKey 记录点边 ID，SecondKey 记录图元数据，Property 记录点边属性数据。</font></p>
<p><font style="color:rgb(69, 69, 69)">SecondKey 编码格式如下，target id 大小不固定，其他部分消耗 20 bytes。write ts 字段记录数据写入时间，被用于数据淘汰，sequence id 记录了数据写入顺序，transaction 和 compaction 都会用到。graph info 记录是否是点，是否是入边，是否包含属性，标签，其他 meta, 点边时间属性等信息。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590462559-8d88a0bf-c3f1-4d0c-ae20-9f304bc40d5e.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">这样编码有两点好处：</font></p>
<ol>
<li><font style="color:rgb(69, 69, 69)">点边数据变成 CStore 内部具有固定格式的二进制数据，有效减少内存消耗，方便后续数据写入磁盘；</font></li>
<li><font style="color:rgb(69, 69, 69)">图元数据被压缩到 8 字节，这样可以把更多的图信息放到索引侧，能够提前在索引侧过滤掉用户不需要的数据。</font></li>
</ol>
<p><font style="color:rgb(69, 69, 69)">许多图形数据库会选择将点边数据编码为键值对的形式存储。相比之下，CStore 是一款针对图分析场景而设计的存储引擎，目的是提供更快的分析能力。为了实现这一点，CStore 会对经过编码后的图形信息建立多级索引。在下面的内容里，我们将讨论如何存储数据以及构建多级索引。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="友好图存储"><font style="color:rgb(69, 69, 69)">友好图存储</font><a href="https://kaiming-l.github.io/geaflow-website/blog/24#%E5%8F%8B%E5%A5%BD%E5%9B%BE%E5%AD%98%E5%82%A8" class="hash-link" aria-label="Direct link to 友好图存储" title="Direct link to 友好图存储">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">蚂蚁内部图数据的访问有以下几个特点。</font></p>
<ol>
<li><font style="color:rgb(69, 69, 69)">通常相同起始点 ID 的点边数据大概率一起被访问；</font></li>
<li><font style="color:rgb(69, 69, 69)">相同类型, 时间的数据通常被一起访问；</font></li>
<li><font style="color:rgb(69, 69, 69)">用户点边数据的属性非常大，而点边元数据信息为固定结构且数据量不大；</font></li>
<li><font style="color:rgb(69, 69, 69)">点数据查询频率大于边数据。</font></li>
</ol>
<p><font style="color:rgb(69, 69, 69)">CStore 在设计存储结构的时候，结合上述特点，对特定场景进行优化。针对第一个特点，CStore 尽可能的把具有相同的起始点 ID 的点边数据存储到物理上连续的存储空间。点边数据被序列化之后，数据首先被写入 GraphData Segment，它为内存数据结构，使用跳表来组成数据，维护了起始点 ID 到 GraphData List 的结构。 GraphData Segment 主要有两个功能：</font></p>
<ol>
<li><font style="color:rgb(69, 69, 69)">数据聚合。把相同的 src_id 的点边数据聚合到一起存储。</font></li>
<li><font style="color:rgb(69, 69, 69)">排序。按照用户指定顺序把相同 src_id 的点边数据排序，用于构建二级索引。</font></li>
</ol>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590462522-40c72425-44f1-4da4-983f-3a1ac57c3777.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">GraphData Segment 到达阈值之后被刷入到磁盘，数据被刷入到磁盘之前，把具有相同类型，写入时间（通常以天为单位）的数据作为一个分区写入到连续的物理存储空间，每个分区之间数据互相独立。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590462620-e414a7fb-cbce-4a81-aa96-f0e0819e7bb9.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">再者根据点边数据属性大而元数据固定的特点，CStore 采用了属性分离的架构，把图属性和图元数据分离存储到不同的物理存储空间。一方面对于图元数据单独加索引能够加速图查询性能，另外一方面属性分离也能够减少数据 compaction 的读写放大开销。</font></p>
<p><font style="color:rgb(69, 69, 69)">另外 CStore 还支持用户配置点边数据存储到不同的存储介质，点边数据在物理上隔离。点边数据的访问频率在不同的场景有所不同，分离存储能够进一步优化数据访问性能，提前过滤掉不需要的数据，减少数据读放大。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="高效图索引"><font style="color:rgb(69, 69, 69)">高效图索引</font><a href="https://kaiming-l.github.io/geaflow-website/blog/24#%E9%AB%98%E6%95%88%E5%9B%BE%E7%B4%A2%E5%BC%95" class="hash-link" aria-label="Direct link to 高效图索引" title="Direct link to 高效图索引">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">CStore 具有高效的图数据检索能力，支持多维度索引，不仅提供针对图元数据的分区索引，主键索引和二级索引，还支持针对点边属性的全文索引，可以根据指定的条件快速定位和返回数据。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590463631-cf49d325-848b-41fa-8dcf-cf8e657ba89a.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">GraphData Segment 写入到磁盘之前，把相同起始点 ID 的 GraphData 根据用户指定的顺序排序，然后把排序好的 SecondKey 构建索引，把排序好的 Property 直接写入到属性文件（记为 vs 文件）。</font></p>
<p><font style="color:rgb(69, 69, 69)">CStore 的分区索引对应到磁盘中某个目录，不同的分区数据落在不同的目录。主键索引是稀疏索引，默认索引间隔为 2048，目前仅支持以起始点 ID 构建主键，主键索引常驻内存。通过主键索引，可以快速定位到属性存储的文件 id 和 offset。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590463694-59d535f5-2adb-4619-8afb-5a8a85ce2057.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">二级索引包括 min max 索引，bloom filter 索引等，用于快速判断某个稀疏索引块是否包含某个主键。min max 索引记录某个索引块的上界和下界，bloom filter 记录索引块的主键。</font></p>
<p><font style="color:rgb(69, 69, 69)">对于热点数据，二级索引做了特殊支持，比如一个起始点 ID 对应了 10 亿条边，如果没有索引，需要把满足 min max 和 bloom filter 索引的所有边读到内存过滤一次，返回用户指定的数据。为了加速这种场景，CStore 对点边类型，指向，写入时间加了二级索引。比如用户只想要读取 label 为 student，dt 为 2023-10-1 数据，通过二级索引，首先过滤掉所有 label 非 student 的数据，然后过滤掉 dt 非 2023-10-1 的数据，可以极大减少数据读开销，提升用户查询性能。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590463877-fc897345-ebcf-4775-8387-42119271af34.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">构建完索引，数据写入到索引文件（记为 is 文件），is 文件按照 LSM-Tree 结构组织，key 为主键索引中的 index，value 为索引 block 压缩后的数据。is 文件内部对于 key 有序，第 0 层单个文件内部对于 key 有序，其他层文件间对于 key 有序。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590463939-e98e78fd-d8b7-49f2-b24b-090fdde11f56.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">为了加快 LSM-Tree compact 的性能，CStore 支持单层的多线程 compact。在示意图中，每一个单独的 compactor 都代表一个 compact 工作线程。不同的 compactor 线程和 compact 清理线程（负责清理被 compact 的文件)将会并行执行。</font></p>
<p><font style="color:rgb(69, 69, 69)">以下是单个 compactor 内部运作过程的示意图，其中包括四个关键步骤：</font></p>
<ol>
<li><font style="color:rgb(69, 69, 69)">计算各层次得分并选择其中最高的；</font></li>
<li><font style="color:rgb(69, 69, 69)">收集需要 compact 的文件；</font></li>
<li><font style="color:rgb(69, 69, 69)">将上述收集到的文件进行 compact 并生成新的文件；</font></li>
<li><font style="color:rgb(69, 69, 69)">最后一步是将新的文件更新至 LSM-Tree 及内存索引中。</font></li>
</ol>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590464758-a048d93b-ac51-47b6-b0f2-17fd924ff708.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="编译构建"><font style="color:rgb(69, 69, 69)">编译构建</font><a href="https://kaiming-l.github.io/geaflow-website/blog/24#%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA" class="hash-link" aria-label="Direct link to 编译构建" title="Direct link to 编译构建">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">单独编译 CStore 代码需要提前准备 Rust 和 C++工具链。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># install rust.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># install nightly toolchain.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rustup update &amp;&amp; rustup toolchain install nightly &amp;&amp; rustc --version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># install other dependencies.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">yum install make gcc gcc-c++ protobuf-devel protobuf clang</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">下载 TuGraph Analytics 代码后，执行以下命令编译 CStore 源代码：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone https://github.com/TuGraph-family/tugraph-analytics.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd tugraph-analytics/geaflow-cstore &amp;&amp; make build</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">执行 make help 可以查看 makefile 提供的功能，当前版本的功能和对应描述如下：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">geaflow-cstore 0.1.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Usage: make &lt;target&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Targets:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  build-dev                       Build the geaflow-cstore with dev version. Both &lt;make build&gt; and &lt;make build-dev&gt; work.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  build-release                   Build the geaflow-cstore with release version.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  fmt                             Format the code by rustfmt.toml.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  clippy                          Check statically code with clippy.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  test-all                        Run all integration tests and unit tests, include ignored tests.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  test                            Execute all the unit tests.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  test-fn                         Use "make test-fn mod=&lt;func_name&gt;" to specify which function of test to run.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  test-in                         Use "make test-in mod=&lt;func_name&gt;" to specify which target of integration tests to run.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  bench-all                       Run all benches.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  bench                           Use "make bench mod=&lt;mod_name&gt;" to specify which bench of mod to run.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  doc                             Generate the document of geaflow-cstore and open it in html.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  all                             Execute code style and static checks, release version compilation and tests in sequence.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  update                          Update all the dependences to the newest version, include rust analyzer.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  gen                             Generate the code described by proto.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  features                        Use "make features mod=&lt;id&gt;" {0-&gt;[default] 1-&gt;[hdfs]} to set the env in ~/.cstore_buildrc.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  clean                           Clean up the cargo cache.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  version                         Show the version of geaflow-cstore.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  help                            List optional commands.</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="未来规划"><font style="color:rgb(69, 69, 69)">未来规划</font><a href="https://kaiming-l.github.io/geaflow-website/blog/24#%E6%9C%AA%E6%9D%A5%E8%A7%84%E5%88%92" class="hash-link" aria-label="Direct link to 未来规划" title="Direct link to 未来规划">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">CStore 已在蚂蚁集团内部具备多年大规模生产化经验，未来我们将不断迭代升级，提升系统性能。然而，在一些特定的情况下，我们认识到 CStore 还有进步的空间。在未来一至两年内，我们计划更加深入地探索优化图分析场景，支持图数据列式存储，图融合以及物化视图能力。同时，为了提高用户的体验度，我们也将引入 remote compactor 功能，以解决因 compact 而导致的资源竞争问题。</font></p>
<p><font style="color:rgb(69, 69, 69)">目前，CStore 系统已全部开源到 TuGraph Analytics 仓库（geaflow-cstore 模块），当前推送的代码涵盖了 CStore 的核心功能特性，仍有大量的增强功能还在整合中。TuGraph 团队将持续投入图存储系统 CStore 的建设工作，也非常欢迎图计算和图存储的开发者一起参与进来，共同推进 CStore 的开源和演进。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结"><font style="color:rgb(69, 69, 69)">总结</font><a href="https://kaiming-l.github.io/geaflow-website/blog/24#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="Direct link to 总结" title="Direct link to 总结">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">当下 TuGraph Analytics 项目已经内置了 CStore JNI 的依赖，你可以在高阶 API 任务中使用并体验 CStore 静态图存储系统，CStore 动态图能力正在建设中，敬请期待。同时我们也非常欢迎图存储系统/Rust 爱好者加入到 CStore 开源项目的建设中来。</font></p>
<p><font style="color:rgb(69, 69, 69)">相关资料：</font></p>
<ul>
<li><font style="color:rgb(69, 69, 69)">TuGraph Analytics：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></li>
<li><font style="color:rgb(69, 69, 69)">CStore JNI：</font><a href="https://mvnrepository.com/artifact/com.antgroup.tugraph/cstore-jni" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://mvnrepository.com/artifact/com.antgroup.tugraph/cstore-jni</font></a></li>
</ul>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/24#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590464897-e875229c-6975-4202-a17c-911139e17175.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TuGraph Analytics交互式图查询：让图所见即所得]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/25</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/25"/>
        <updated>2023-12-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：廖梵抒]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：廖梵抒</font></p>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics 提供了 OLAP 图分析能力，实现图上的交互式查询，用户在构图并导入数据之后，可以通过输入 GQL 语句对图查询分析，并以可视化的方式直观地展示点边结果。</font></p>
<p><strong><font style="color:rgb(69, 69, 69)">OLAP 架构</font></strong></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590314672-217ac41f-0cc4-4a84-be62-3cb7f7bd69f9.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">在 TuGraph Analytics OLAP 架构中，主要以下组件:</font></p>
<ol>
<li><strong><font style="color:rgb(69, 69, 69)">Client</font></strong><font style="color:rgb(69, 69, 69)">: 用户通过 Client 提交查询语句, Client 负责和 Coordinator 交互，发送查询请求。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">Coordinator</font></strong><font style="color:rgb(69, 69, 69)">: 接收来自 Client 查询请求，将查询中的 GQL 语句进行解析、优化，构建查询的执行计划（执行计划的生成逻辑可参考</font><a href="https://zhuanlan.zhihu.com/p/647441899" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">《分布式图计算如何实现？带你一窥图计算执行计划》</font></a><font style="color:rgb(69, 69, 69)">），并将任务调度给 Woker 执行。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">Worker</font></strong><font style="color:rgb(69, 69, 69)">：具体分布式地执行任务的单元，接收到 Coordinator 发送的 Pipeline，执行具体的计算和查询逻辑。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">Meta Service</font></strong><font style="color:rgb(69, 69, 69)">: 服务注册管理，Coordinator 启动后，会将服务的地址和端口向 MetaService 进行注册，Client 提交查询时从 MetaService 获取 Coordinator 的服务地址，进行连接。目前支持 http 和 rpc 两种方式。</font></li>
</ol>
<p><font style="color:rgb(69, 69, 69)">组件间执行流程如下：</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590315445-c918816a-31a2-4911-9fab-5b23318cb5cc.png" alt="" class="img_ev3q"></p>
<p><strong><font style="color:rgb(69, 69, 69)">操作指南</font></strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-定义图模型"><font style="color:rgb(69, 69, 69)">1. 定义图模型</font><a href="https://kaiming-l.github.io/geaflow-website/blog/25#1-%E5%AE%9A%E4%B9%89%E5%9B%BE%E6%A8%A1%E5%9E%8B" class="hash-link" aria-label="Direct link to 1-定义图模型" title="Direct link to 1-定义图模型">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">以下图为例，图中有 2 种点 person 和 software，以及 2 种边 knows 和 creates。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590314484-02ee4e80-b7f1-462a-9609-adc7cea799cf.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">图模型定义可参考</font><a href="https://zhuanlan.zhihu.com/p/663270153" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">《TuGraph Analytics 图建模研发：为图计算业务提速增效》</font></a><font style="color:rgb(69, 69, 69)">，图定义语法为：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE GRAPH dy_modern (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Vertex person (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  id bigint ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  name varchar,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  age int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Vertex software (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  id bigint ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  name varchar,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  lang varchar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Edge knows (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  srcId bigint SOURCE ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  targetId bigint DESTINATION ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  weight int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Edge creates (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  srcId bigint SOURCE ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  	targetId bigint DESTINATION ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  	weight int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	storeType='rocksdb',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	shardCount = 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-准备图数据"><font style="color:rgb(69, 69, 69)">2. 准备图数据</font><a href="https://kaiming-l.github.io/geaflow-website/blog/25#2-%E5%87%86%E5%A4%87%E5%9B%BE%E6%95%B0%E6%8D%AE" class="hash-link" aria-label="Direct link to 2-准备图数据" title="Direct link to 2-准备图数据">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">创建“加工”类型图任务，发布生成图作业。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">USE GRAPH dy_modern;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO dy_modern.person(id, name, age)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 1, 'jim', 20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 2, 'kate', 22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 3, 'tom', 24;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO dy_modern.software(id, name, lang)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 4, 'software1', 'java'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 5, 'software2', 'java';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO dy_modern.knows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 1,2,2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 1,3,3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 3,2,3;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO dy_modern.creates</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 2,4,6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 3,5,8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 3,4,8;</span><br></span></code></pre></div></div>
<p><strong><font style="color:rgb(69, 69, 69)">图作业需要的 worker 数为 23</font></strong><font style="color:rgb(69, 69, 69)">，在作业界面将参数进行修改，之后提交作业运行。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590315011-1d8d3015-87fb-441f-b561-c1d181b6a7d7.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-创建查询服务"><font style="color:rgb(69, 69, 69)">3. 创建查询服务</font><a href="https://kaiming-l.github.io/geaflow-website/blog/25#3-%E5%88%9B%E5%BB%BA%E6%9F%A5%E8%AF%A2%E6%9C%8D%E5%8A%A1" class="hash-link" aria-label="Direct link to 3-创建查询服务" title="Direct link to 3-创建查询服务">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">创建图查询服务, 任务类型选择“图查询”，目标图选择刚才创建的图。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590314435-4a49ece4-df3f-4087-8159-ca06228a42ae.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">发布任务后，使用默认参数即可，提交作业。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-执行查询"><font style="color:rgb(69, 69, 69)">4. 执行查询</font><a href="https://kaiming-l.github.io/geaflow-website/blog/25#4-%E6%89%A7%E8%A1%8C%E6%9F%A5%E8%AF%A2" class="hash-link" aria-label="Direct link to 4-执行查询" title="Direct link to 4-执行查询">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">图查询服务的作业变成 RUNNING 状态后，可在任务界面点击“查询”进入图查询界面</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590315411-f1d6bd46-dd30-4669-8fd4-369134e8f8ab.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">输入相应的 gql 查询语句，点击“执行”，即可得到查询结果。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590315531-0a5f5365-c490-403e-9355-8cdd2487f8ac.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-图可视化"><font style="color:rgb(69, 69, 69)">5. 图可视化</font><a href="https://kaiming-l.github.io/geaflow-website/blog/25#5-%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96" class="hash-link" aria-label="Direct link to 5-图可视化" title="Direct link to 5-图可视化">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">点击某个点，可以查看点关联的具体信息和属性，以及关联的其他点边。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590316056-02b1be65-6fdc-4e0d-a05e-a3d0bc886c52.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">除了可视化的方式，也可以 json 形式看到返回的结果。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590316461-4f593cb8-f608-4d69-aa76-de08c087d4c2.png" alt="" class="img_ev3q"></p>
<p><strong><font style="color:rgb(69, 69, 69)">至此，我们就成功使用 TuGraph Analytics 实现了图上的交互式查询！是不是超简单！快来试一试吧！</font></strong></p>
<p><strong><font style="color:rgb(69, 69, 69)">欢迎关注我们的 GitHub 仓库：</font></strong><font style="color:rgb(69, 69, 69)"> </font><font style="color:rgb(69, 69, 69)">👉</font><font style="color:rgb(69, 69, 69)"> </font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<p><strong><font style="color:rgb(69, 69, 69)">微信群</font></strong></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590316761-27cf4d87-fbf6-4e20-abbf-d497f571f007.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TuGraph Analytics作业监控面板：运行时组件上的高效分析工具]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/26</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/26"/>
        <updated>2023-12-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：丁一]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：丁一</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="背景"><font style="color:rgb(69, 69, 69)">背景</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E8%83%8C%E6%99%AF" class="hash-link" aria-label="Direct link to 背景" title="Direct link to 背景">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics 作业部署到 K8S 集群之后，通常会启动多个 pod（一个 master、一/多个 driver、多个 container）。用户很难判断作业当前运行的进度如何，也不能通过 pod 的状态来判断内部进程的状态。无论是查看进度、查看日志、性能分析，都需要到每一个 pod 中进行对应的操作，运维成本很大，需要一个白屏化的监控页面来监控所有进程的实时状态信息。</font></p>
<p><font style="color:rgb(69, 69, 69)">因此，我们在作业进程中内置了一个 Dashboard（本地启动/容器启动时自动生效），包括前端页面和后端 server，用户可以不需要感知到它们的存在。通过访问 Dashboard，用户可以更方便地通过白屏化的方式查看作业的执行进度、组件列表和详情、任意组件内部的指标、日志等。还可以通过 Profiler 工具对进程状态进行分析，快速定位问题。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dashboard-介绍"><font style="color:rgb(69, 69, 69)">Dashboard 介绍</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#dashboard-%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="Direct link to dashboard-介绍" title="Direct link to dashboard-介绍">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics 的 Dashboard 模块提供了作业级别的监控页面，可以轻松地查看作业的以下信息：</font></p>
<ul>
<li><font style="color:rgb(69, 69, 69)">作业的健康度（Container 和 Worker 活跃度）</font></li>
<li><font style="color:rgb(69, 69, 69)">作业的进度（Pipeline 和 Cycle 信息）</font></li>
<li><font style="color:rgb(69, 69, 69)">作业各个组件的实时日志</font></li>
<li><font style="color:rgb(69, 69, 69)">作业各个组件的进程指标</font></li>
<li><font style="color:rgb(69, 69, 69)">作业各个组件的火焰图</font></li>
<li><font style="color:rgb(69, 69, 69)">作业各个组件的 Thread Dump</font></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="如何访问页面"><font style="color:rgb(69, 69, 69)">如何访问页面</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E9%A1%B5%E9%9D%A2" class="hash-link" aria-label="Direct link to 如何访问页面" title="Direct link to 如何访问页面">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">页面的服务部署在 master 组件上，因此直接访问 master 组件的地址即可（默认端口 8090）。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590212959-055d8172-a5f3-4c68-a646-1a4a88c375f3.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="功能介绍"><font style="color:rgb(69, 69, 69)">功能介绍</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="Direct link to 功能介绍" title="Direct link to 功能介绍">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics Dashboard 包含以下几个主要的功能：</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="overview"><font style="color:rgb(69, 69, 69)">Overview</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#overview" class="hash-link" aria-label="Direct link to overview" title="Direct link to overview">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">Overview 页面会展示整个作业的健康状态。你可以在这里查看 container 和 driver 是否都在正常运行。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590213043-2b903fe4-0a9d-4bbe-9d00-04856581b9fd.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">除此之外，Overview 页面也会展示作业的 Pipeline 列表。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="作业执行计划进度"><font style="color:rgb(69, 69, 69)">作业执行计划进度</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E4%BD%9C%E4%B8%9A%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%BF%9B%E5%BA%A6" class="hash-link" aria-label="Direct link to 作业执行计划进度" title="Direct link to 作业执行计划进度">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">作业的执行计划可以由多个 Pipeline 表示，每个 Pipeline 内部又有多个 Cycle。 可以通过侧边栏的 Pipeline 菜单进入页面。页面包括作业的每一项 Pipeline 的名称、开始时间和耗时。 耗时为 0 表示该 Pipeline 已开始执行，但尚未完成。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590212810-8739ac14-b799-410b-b1ce-ec6506a075be.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">点击 Pipeline 名称可以进入二级菜单，查看当前 Pipeline 下所有的 Cycle 列表的各项信息。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590212946-51db16ff-935f-4612-a811-dffee48e1bbc.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="作业组件详情"><font style="color:rgb(69, 69, 69)">作业组件详情</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E4%BD%9C%E4%B8%9A%E7%BB%84%E4%BB%B6%E8%AF%A6%E6%83%85" class="hash-link" aria-label="Direct link to 作业组件详情" title="Direct link to 作业组件详情">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">可以查看作业的各个组件（包括 master、driver、container）的各项信息。可以通过侧边栏的菜单进行访问。 其中 Driver 详情展示所有 driver 的基础信息。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590213368-3be08b8f-69ac-4a92-a21c-b61224a0b20c.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">Container 详情展示所有 Container 的基础信息。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590214303-13a716fc-f5ea-4542-98e5-718cce551183.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="组件运行时详情"><font style="color:rgb(69, 69, 69)">组件运行时详情</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E7%BB%84%E4%BB%B6%E8%BF%90%E8%A1%8C%E6%97%B6%E8%AF%A6%E6%83%85" class="hash-link" aria-label="Direct link to 组件运行时详情" title="Direct link to 组件运行时详情">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">通过点击左边栏的 Master 详情，或者通过点击 Driver/Container 详情中的组件名称，可以跳转到组件的运行时页面。在运行时页面中，可以查看和操作以下内容。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="进程指标"><font style="color:rgb(69, 69, 69)">进程指标</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E8%BF%9B%E7%A8%8B%E6%8C%87%E6%A0%87" class="hash-link" aria-label="Direct link to 进程指标" title="Direct link to 进程指标">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">展示完整的容器进程指标。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590214470-6744e30f-f556-4242-bed0-816a3e6ad7a5.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="容器日志"><font style="color:rgb(69, 69, 69)">容器日志</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97" class="hash-link" aria-label="Direct link to 容器日志" title="Direct link to 容器日志">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">展示容器进程内的主要可见日志。 根据日志的 log4j 配置，默认日志文件大小最大为 128G（此处测试简单起见设置为了 50KB），超过后会进行文件备份。例如 master.log.1 和 master.log.2 就是 master.log 的备份之一。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590214471-77eb802b-3269-44cd-8e00-0a0fc00a5d23.png" alt="" class="img_ev3q"></p>
<ul>
<li><font style="color:rgb(69, 69, 69)">master.log：Master 的 java 主进程日志。</font></li>
<li><font style="color:rgb(69, 69, 69)">master.log.1 / master.log.2：Master 的 java 主进程日志备份。</font></li>
<li><font style="color:rgb(69, 69, 69)">agent.log：Master 的 agent 服务日志。</font></li>
<li><font style="color:rgb(69, 69, 69)">geaflow.log：进入容器后的 shell 启动脚本日志。</font></li>
</ul>
<p><font style="color:rgb(69, 69, 69)">点击任意一个日志可以进入日志详情页面。日志的获取进行了后端分页，可以在右下角选择每页的 KB 大小，并可以跳转到指定页数。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590214974-95846ed3-e373-413b-85d4-1371f432a642.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="火焰图"><font style="color:rgb(69, 69, 69)">火焰图</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E7%81%AB%E7%84%B0%E5%9B%BE" class="hash-link" aria-label="Direct link to 火焰图" title="Direct link to 火焰图">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">展示火焰图的历史执行结果，并可重新生成新的火焰图。火焰图分析类型可选择 CPU 或 ALLOC，单次最多分析 60 秒，最多保留 10 份历史记录。 点击“新建”，即可生成新的火焰图。</font></p>
<ul>
<li><font style="color:rgb(69, 69, 69)">火焰图类型：可选 CPU 或者 ALLOC（Memory）。</font></li>
<li><font style="color:rgb(69, 69, 69)">执行时间：分析时间，需介于 1~60 秒之间。</font></li>
</ul>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590215395-c4ce2c5e-88a5-4dd3-82bc-8d6412029ee8.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">火焰图的执行时间根据用户的选择可能较久，因此会在后台静默执行。需要等待执行结束后，手动点击“新建”按钮旁边的“刷新”标识，获取最新的火焰图历史。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590215967-a21f6481-5c7c-4d89-a508-8e4d38c679fe.png" alt="" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590216098-1f0c4ace-4220-4b75-8a00-67b115928348.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="thread-dump"><font style="color:rgb(69, 69, 69)">Thread Dump</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#thread-dump" class="hash-link" aria-label="Direct link to thread-dump" title="Direct link to thread-dump">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">展示主进程的 Thread Dump 结果，并可重新进行 Dump。保留最新一次 dump 的结果。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590215996-b4c56320-41bc-4d9d-b397-cdd508981504.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">点击“重新执行”，等待执行结束后，结果会自动刷新。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590216542-9f487cf0-46ba-4fb4-85e5-3570c403f78c.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="进程配置"><font style="color:rgb(69, 69, 69)">进程配置</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E8%BF%9B%E7%A8%8B%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="Direct link to 进程配置" title="Direct link to 进程配置">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">展示 master 的 java 主进程内的各项配置（仅 master 拥有此页面）。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590217049-a40d0ad9-d2ba-4847-b48d-753cfa7ed2b3.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="其他用法"><font style="color:rgb(69, 69, 69)">其他用法</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E5%85%B6%E4%BB%96%E7%94%A8%E6%B3%95" class="hash-link" aria-label="Direct link to 其他用法" title="Direct link to 其他用法">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="列表排序与查询"><font style="color:rgb(69, 69, 69)">列表排序与查询</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E8%AF%A2" class="hash-link" aria-label="Direct link to 列表排序与查询" title="Direct link to 列表排序与查询">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">部分列表的列可以进行排序和查询。 查询时，点击“搜索”标识，输入关键字，点击“搜索”按钮即可。 重置时，点击“重置”按钮，列表会重新刷新。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590217797-1a4c6134-6404-4d30-96eb-be6a602f255e.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="国际化"><font style="color:rgb(69, 69, 69)">国际化</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E5%9B%BD%E9%99%85%E5%8C%96" class="hash-link" aria-label="Direct link to 国际化" title="Direct link to 国际化">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">页面支持中英文切换，点击右上角的“文 A”图标，即可选择语言。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590218271-66ff908d-375c-4b46-ad5d-4c4af20591ca.png" alt="" class="img_ev3q"></p>
<p><strong><font style="color:rgb(69, 69, 69)">欢迎关注我们的 GitHub 仓库：</font></strong><font style="color:rgb(69, 69, 69)"> </font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/26#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590218601-186a3032-f408-4645-925a-53a0307beb8f.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[世界第一！蚂蚁图计算TuGraph打破LDBC SNB-BI世界纪录]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/23</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/23"/>
        <updated>2023-12-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[近日，国际关联数据基准委员会（Linked Data Benchmark Council，以下简称 LDBC）发布了图数据基准测评“LDBC SNB-BI”最新结果。由蚂蚁集团自研的流式图计算引擎 TuGraph Analytics 在 30TB 规模的数据集上成功完成了基准测试，数据规模和性能打破了此前的公开纪录，关键指标中的并发吞吐量提升至 2.84 倍，查询能力提升至 1.86 倍。]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">近日，国际关联数据基准委员会（Linked Data Benchmark Council，以下简称 LDBC）发布了图数据基准测评“LDBC SNB-BI”最新结果。由蚂蚁集团自研的流式图计算引擎 TuGraph Analytics 在 30TB 规模的数据集上成功完成了基准测试，数据规模和性能打破了此前的公开纪录，关键指标中的并发吞吐量提升至 2.84 倍，查询能力提升至 1.86 倍。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590524194-4235a7d1-16e8-4d3b-8d4b-97d2410faaff.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">LDBC 官方公布蚂蚁 LDBC SNB-BI 测评新纪录</font></p>
<p><font style="color:rgb(69, 69, 69)">在本次测评中，测试产品需要快速导入和分析 30TB 规模的数据，处理多达 720 亿点、5400 亿边规模的数据，并在 60 秒内返回读取大部分查询结果。TuGraph Analytics 顺利通过了严苛测试，很好地处理 SNB-SF30000 数据集的两个挑战：在大规模图上进行批量的插入和删除操作；涉及大量数据的复杂分析操作，包括深度图关联，复杂路径查找等，验证了国产图数据库产品世界领先的数据处理能力。</font></p>
<p><em><font style="color:rgb(130, 130, 130)">本次测试由 LDBC 官方审计完成，整个测试环境和测试过程均完整披露于</font></em><a href="https://ldbcouncil.org/" target="_blank" rel="noopener noreferrer"><em><font style="color:rgb(255, 81, 0)">LDBC 官网</font></em></a><em><font style="color:rgb(130, 130, 130)">。</font></em></p>
<p><font style="color:rgb(69, 69, 69)">蚂蚁从 2015 年开始布局图技术，打造了业界领先的图智能技术体系，包含图数据库、图计算、图学习、知识图谱等，四次打破 LDBC 图数据库测评世界纪录，曾获吴文俊人工智能科技进步一等奖、中国电子学会科技进步一等奖、世界互联网大会“领先科技成果”等权威认可。TuGraph Analytic 是蚂蚁大规模图计算系统中的重要组成，在千亿数据规模的“图”上秒级延迟计算，成功解决了金融场景风险分析难、识别率低、时效性差等业界难题。TuGraph-Analytics 已于 2023 年 6 月正式开源。 国际关联数据基准委员会（LDBC）是国际公认的图数据基准指南制定者与测试标准发布机构，SNB（Social Network Benchmark）是由其组织的基于社交网络数据的权威基准测评，主要包含 SNB-BI、SNB-Interactive 两个子测评。其中，SNB-BI 主要评估图数据库处理复杂分析型任务的能力，SNB-Interactive 侧重高并发事务型任务的能力。</font></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/23#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590524023-48a59804-e15a-41cc-9fd4-fcefb2bc2ac0.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TuGraph Analytics云原生部署：基于K8S Operator的轻量级作业启动方案]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/22</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/22"/>
        <updated>2023-11-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：丁一]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：丁一</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="背景"><font style="color:rgb(69, 69, 69)">背景</font><a href="https://kaiming-l.github.io/geaflow-website/blog/22#%E8%83%8C%E6%99%AF" class="hash-link" aria-label="Direct link to 背景" title="Direct link to 背景">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics 作业可以通过 Console 提交部署到 K8S 集群，但 Console 是一个独立的 Web 系统，部署形态上相对较重。在平台工具系统接入或大数据生态集成场景中，需要更轻量级的快速接入 TuGraph Analytics 的方案。 我们新增了模块 geaflow-kubernetes-operator，可以通过更轻量级的 YAML 文件配置方式，对 TuGraph Analytics 作业进行描述配置。同时更方便地监控和管理集群下的所有 TuGraph Analytics 作业，并通过 CR(Custom Resource)的创建/修改/删除来管理作业的生命周期和元信息，可以实现只通过 kubectl 命令实现任务操纵。我们也提供了一个实时 dashboard 页面，可以方便地白屏化查看所有作业状态和信息。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="部署-k8s-operator"><font style="color:rgb(69, 69, 69)">部署 K8S Operator</font><a href="https://kaiming-l.github.io/geaflow-website/blog/22#%E9%83%A8%E7%BD%B2-k8s-operator" class="hash-link" aria-label="Direct link to 部署-k8s-operator" title="Direct link to 部署-k8s-operator">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics 提供了 geaflow-kubernetes-operator 模块，可通过 Helm 命令一键部署到 K8S。部署完成中，会向 K8S 集群注册一个名为 geaflowjob 的自定义资源。（相对于 K8S 内置 pod、service、deployment 等系统资源而言） 安装完成后，我们只需要编写一个 CR 的 YAML 配置文件提交给 K8S，就可以自动拉起作业了。</font></p>
<ul>
<li><font style="color:rgb(69, 69, 69)">执行以下命令构建 Operator 镜像，项目代码构建要求 JDK11 版本，因此需要单独切换 JDK 版本编译构建。</font></li>
</ul>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ ./build-operator.sh</span><br></span></code></pre></div></div>
<ul>
<li><font style="color:rgb(69, 69, 69)">进入项目目录 geaflow-kubernetes-operator 下，通过 Helm 一键安装 operator。</font></li>
</ul>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ helm install geaflow-kubernetes-operator helm/geaflow-kubernetes-operator</span><br></span></code></pre></div></div>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590583286-58dbe4bc-c84e-4ced-a1e0-f30dff7baade.png" alt="" class="img_ev3q"></p>
<ul>
<li><font style="color:rgb(69, 69, 69)">在 K8S Dashboard 中查看 pod 是否正常运行。</font></li>
</ul>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590583430-d8d3e5a4-332b-4ed2-9183-adc92ba394d4.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="提交作业"><font style="color:rgb(69, 69, 69)">提交作业</font><a href="https://kaiming-l.github.io/geaflow-website/blog/22#%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A" class="hash-link" aria-label="Direct link to 提交作业" title="Direct link to 提交作业">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">K8S Operator 成功部署并运行后，就可以编写 CR 的 YAML 文件进行作业提交了。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply geaflow-example.yml</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">这里使用项目内置示例作业举例，其 YAML 文件格式如下：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">apiVersion: geaflow.antgroup.com/v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kind: GeaflowJob</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">metadata:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	# 作业名称</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name: geaflow-example</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spec:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	# 作业使用的GeaFlow镜像</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  image: geaflow:0.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # 作业拉取镜像的策略</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  imagePullPolicy: IfNotPresent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # 作业使用的k8s service account</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  serviceAccount: geaflow</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # 作业java进程的主类</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  entryClass: com.antgroup.geaflow.example.graph.statical.compute.sssp.SSSP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  clientSpec:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # client pod相关的资源设置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    resource:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      cpuCores: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      memoryMb: 1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      jvmOptions: -Xmx800m,-Xms800m,-Xmn300m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  masterSpec:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # master pod相关的资源设置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    resource:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      cpuCores: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      memoryMb: 1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      jvmOptions: -Xmx800m,-Xms800m,-Xmn300m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  driverSpec:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # driver pod相关的资源设置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    resource:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      cpuCores: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      memoryMb: 1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      jvmOptions: -Xmx800m,-Xms800m,-Xmn300m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # driver个数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    driverNum: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  containerSpec:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # container pod相关的资源设置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    resource:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      cpuCores: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      memoryMb: 1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      jvmOptions: -Xmx800m,-Xms800m,-Xmn300m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # container个数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    containerNum: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 每个container内部的worker个数(线程数)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    workerNumPerContainer: 4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  userSpec:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 作业指标相关配置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    metricConfig:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      geaflow.metric.reporters: slf4j</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      geaflow.metric.stats.type: memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 作业存储相关配置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stateConfig:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      geaflow.file.persistent.type: LOCAL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		  geaflow.store.redis.host: host.minikube.internal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      geaflow.store.redis.port: 6379</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 用户自定义参数配置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    additionalArgs:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      geaflow.system.state.backend.type: MEMORY</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">K8S 环境上的作业强依赖于 Redis 组件，若你已经部署了 Redis，则可以在 geaflow-example.yaml 中提供 Redis 主机和端口号。你也可以通过 Docker 快速启动一个本地 Redis 服务，默认地址 host.minikube.internal 可直接访问。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker pull redis:latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker run -p 6379:6379 --name geaflow_redis redis:latest</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="提交-api-任务"><font style="color:rgb(69, 69, 69)">提交 API 任务</font><a href="https://kaiming-l.github.io/geaflow-website/blog/22#%E6%8F%90%E4%BA%A4-api-%E4%BB%BB%E5%8A%A1" class="hash-link" aria-label="Direct link to 提交-api-任务" title="Direct link to 提交-api-任务">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">对于提交 HLA 任务的情况，需要额外注意以下几个参数：</font></p>
<ul>
<li><font style="color:rgb(69, 69, 69)">spec.entryClass：必填。</font></li>
<li><font style="color:rgb(69, 69, 69)">spec.udfJars：选填，一般填写 API 任务的 JAR 文件的 url 地址。</font></li>
</ul>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spec:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	# 必填</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	entryClass: com.example.MyEntryClass</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	# 可选</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	udfJars:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  	- name: myJob.jar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    	url: http://url-path-to-myJob.jar</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="提交-dsl-任务"><font style="color:rgb(69, 69, 69)">提交 DSL 任务</font><a href="https://kaiming-l.github.io/geaflow-website/blog/22#%E6%8F%90%E4%BA%A4-dsl-%E4%BB%BB%E5%8A%A1" class="hash-link" aria-label="Direct link to 提交-dsl-任务" title="Direct link to 提交-dsl-任务">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">对于提交 DSL 任务的情况，需要额外注意以下几个参数：</font></p>
<ul>
<li><font style="color:rgb(69, 69, 69)">spec.entryClass：不填，留空（用于区分是 API 作业还是 DSL 作业）。</font></li>
<li><font style="color:rgb(69, 69, 69)">spec.gqlFile：必填，请填写自己文件的名称和 url 地址。</font></li>
<li><font style="color:rgb(69, 69, 69)">spec.udfJars：选填，如需 UDF 的话，请填写 UDF JAR 文件的 url 地址。</font></li>
</ul>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spec:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	# 不填</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	# entryClass: com.example.MyEntryClass</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	# 必填</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  gqlFile:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # name必须填写正确，否则无法找到对应文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name: myGql.gql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    url: http://url-path-to-myGql.gql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	# 可选</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	udfJars:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  	- name: myUdf.jar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    	url: http://url-path-to-myUdf.jar</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">关于 DSL 任务和 HLA 任务的更多参数，我们在项目目录 geaflow-kubernetes-operator/example 目录中准备了两个 demo 作业供大家参考，请分别参考项目中的示例文件：</font></p>
<ul>
<li><font style="color:rgb(69, 69, 69)">example/example-dsl.yml</font></li>
<li><font style="color:rgb(69, 69, 69)">example/example-hla.yml。</font></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="查看作业状态"><font style="color:rgb(69, 69, 69)">查看作业状态</font><a href="https://kaiming-l.github.io/geaflow-website/blog/22#%E6%9F%A5%E7%9C%8B%E4%BD%9C%E4%B8%9A%E7%8A%B6%E6%80%81" class="hash-link" aria-label="Direct link to 查看作业状态" title="Direct link to 查看作业状态">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">可以访问 K8S Dashboard 查看 pod 是否被拉起，执行以下命令可以查看 CR 的状态是否已经正常运行。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get geaflowjob geaflow-example</span><br></span></code></pre></div></div>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590583238-367e66b9-a41d-4535-ac05-08be6fcbb1f0.png" alt="" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590583491-40041e22-3a2f-44b3-b484-66d504ec3721.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">若在提交过程中失败，则状态会变为 FAILED。若需定位原因，可通过以下命令查看。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get geaflowjobs geaflow-example -o yaml</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="查看集群状态"><font style="color:rgb(69, 69, 69)">查看集群状态</font><a href="https://kaiming-l.github.io/geaflow-website/blog/22#%E6%9F%A5%E7%9C%8B%E9%9B%86%E7%BE%A4%E7%8A%B6%E6%80%81" class="hash-link" aria-label="Direct link to 查看集群状态" title="Direct link to 查看集群状态">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">Operator 自带一个前端页面，可以展示集群的基本信息、所有作业的状态、错误信息、以及完整的配置，并做了分类统计。可以通过访问 Operator 的 service 或者 pod 的 8089 端口来打开页面。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590583442-473045cc-500a-45d2-86fb-01b32f5e40ec.png" alt="" class="img_ev3q"></p>
<p><strong><font style="color:rgb(69, 69, 69)">备注</font></strong><font style="color:rgb(69, 69, 69)">：</font></p>
<p><em><font style="color:rgb(130, 130, 130)">在 minikube 环境中，需要通过 portforward 将 Operator 的 pod 代理到本地端口（默认为 8089 端口），请将 operator-pod-name 替换为实际的 operator pod 名称，然后通过浏览器访问 localhost:8089 即可打开页面。</font></em></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$kubectl port-forward ${operator-pod-name} 8089:8089</span><br></span></code></pre></div></div>
<p><strong><font style="color:rgb(69, 69, 69)">至此，我们完成了 TuGraph Analytics 作业的轻量级提交和运行！是不是超简单！快来试一试吧！</font></strong></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/22#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590585021-69acf3f9-1bf6-42ff-b94b-62ce8d3b6f9c.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TuGraph Analytics动态插件：快速集成大数据生态系统]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/21</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/21"/>
        <updated>2023-11-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：廖梵抒]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：廖梵抒</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="介绍"><font style="color:rgb(69, 69, 69)">介绍</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="Direct link to 介绍" title="Direct link to 介绍">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="插件机制介绍"><font style="color:rgb(69, 69, 69)">插件机制介绍</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="Direct link to 插件机制介绍" title="Direct link to 插件机制介绍">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">插件机制为 GeaFlow 任务提供了外部数据源的集成能力扩展，GeaFlow 支持从各类 Connector 中读写数据，GeaFlow 将它们都识别为外部表，并将元数据存储在 Catalog 中。GeaFlow 已有一些内置的插件，例如 FileConnector，KafkaConnector，JDBCConnector，HiveConnector 等。</font></p>
<p><font style="color:rgb(69, 69, 69)">GeaFlow 也提供了动态插件的功能，用户可以通过 Java SPI 的方式自定义 Connector，连接外部数据源，例如 Kafka，Hive 等，也可自定义实现不同的 sink、source 连接方式和逻辑，更多关于自定义插件的介绍，可参考开发手册中</font><a href="https://tugraph-analytics.readthedocs.io/en/latest/docs-cn/application-development/dsl/connector/udc/" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">自定义 Connector</font></a><font style="color:rgb(69, 69, 69)">章节。同时，GeaFlow Conosole 平台为用户提供了插件管理的功能。在 Console 中，插件属于一种资源类型，用户可以通过白屏化的方式在 Console 上注册自定义的 Connector 插件，并在 DSL 任务或创建表时使用自定义的插件。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="插件模型设计"><font style="color:rgb(69, 69, 69)">插件模型设计</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1" class="hash-link" aria-label="Direct link to 插件模型设计" title="Direct link to 插件模型设计">​</a></h3>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590634183-5df5b632-5a9f-405a-8f2d-7a9648cf5c88.png" alt="" class="img_ev3q"></p>
<ul>
<li><font style="color:rgb(69, 69, 69)">GeaflowPlugin: 插件模型。</font></li>
<li><font style="color:rgb(69, 69, 69)">GeaflowPluginType: 插件（数据源）类型（KAFKA、HIVE、JDBC、FILE 等)。</font></li>
<li><font style="color:rgb(69, 69, 69)">GeaflowPluginCategory: 插件种类（图、表、文件等）。</font></li>
<li><font style="color:rgb(69, 69, 69)">GealfowPluginConfig: 插件配置。</font></li>
<li><font style="color:rgb(69, 69, 69)">GealfowJarPackage: jar 包。</font></li>
</ul>
<p><font style="color:rgb(69, 69, 69)">上文所述中，目前支持用户自定义 Connector 插件种类为 TABLE，即可在表配置中使用，作为表的输入或输出源，其插件类型为用户自定义。</font></p>
<p><font style="color:rgb(69, 69, 69)">除此之外，在 GeaFlow Console 中，插件的概念更为广泛，还包含了一些系统级的插件，是 GeaFlow 作业运行所依赖的外部系统，例如运行时元信息插件(RUNTIME_META)、指标系统插件(METRIC)、外部文件系统插件(REMOTE_FILE)、外部图存储系统插件(DATA)，如下列表所示。由插件类型和插件种类可唯一确定一个插件，而插件类型和插件种类是多对多的关系，一个种类可能有多种类型，例如 REMOTE_FILE 种类的插件，其类型可以是 LOCAL、DFS、OSS，对应了不同的外部存储系统。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590634343-2086da61-d056-4260-bbe8-7782dc151b71.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="插件引用解析"><font style="color:rgb(69, 69, 69)">插件引用解析</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E6%8F%92%E4%BB%B6%E5%BC%95%E7%94%A8%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="Direct link to 插件引用解析" title="Direct link to 插件引用解析">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">解析 dsl 任务中使用的插件是使用代理的方式调用引擎的解析接口，通过 Calcite 解析得到 dsl 文本中的信息，其主要分为 4 步：</font></p>
<ol>
<li><font style="color:rgb(69, 69, 69)">解析 DSL 中表 with 参数中定义的插件。</font></li>
<li><font style="color:rgb(69, 69, 69)">解析 DSL 中使用的表绑定的插件。</font></li>
<li><font style="color:rgb(69, 69, 69)">获取引擎自带的插件列表。</font></li>
<li><font style="color:rgb(69, 69, 69)">将 1 和 2 中的结果进行合并，过滤引擎自带的插件，得到最终 dsl 任务中用户使用的插件列表。</font></li>
</ol>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590634449-3c2b9b60-b17b-403c-9435-92ca753f04dd.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="demo-演示"><font style="color:rgb(69, 69, 69)">Demo 演示</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#demo-%E6%BC%94%E7%A4%BA" class="hash-link" aria-label="Direct link to demo-演示" title="Direct link to demo-演示">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="插件开发"><font style="color:rgb(69, 69, 69)">插件开发</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91" class="hash-link" aria-label="Direct link to 插件开发" title="Direct link to 插件开发">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="自定义-collector"><font style="color:rgb(69, 69, 69)">自定义 Collector</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E8%87%AA%E5%AE%9A%E4%B9%89-collector" class="hash-link" aria-label="Direct link to 自定义-collector" title="Direct link to 自定义-collector">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">自定义 Collector 需要实现</font><strong><font style="color:rgb(69, 69, 69)">TableReadableConnector</font></strong><font style="color:rgb(69, 69, 69)">或</font><strong><font style="color:rgb(69, 69, 69)">TableWritableConnector</font></strong><font style="color:rgb(69, 69, 69)">接口，分别是获取数据输入和输出源。 本例子中，在原来的 FileTableConnector 基础上，扩展了为每条数据增加前缀或后缀的功能。其中 MyFileSource 可在读取数据时，在每条数据前加一个自定义前缀，而 MyFileSink 可在写入每条数据时，在其之后加一个自定义后缀。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class MyFileConnector implements TableWritableConnector, TableReadableConnector {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public TableSource createSource(Configuration configuration) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return new MyFileSource();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public TableSink createSink(Configuration configuration) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return new MyFileSink();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public String getType() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return "myFileType";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class MyFileSource extends FileTableSource {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  private static final Logger LOGGER = LoggerFactory.getLogger(MyFileSource.class);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  private String suffix;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public void init(Configuration tableConf, TableSchema tableSchema) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    super.init(tableConf, tableSchema);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.suffix = tableConf.getString("geaflow.dsl.mysource.suffix");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (suffix == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      suffix = "mySourceSuffix";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    LOGGER.info("init table source with tableConf: {}", tableConf);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  @SuppressWarnings("unchecked")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public &lt;T&gt; FetchData&lt;T&gt; fetch(Partition partition, Optional&lt;Offset&gt; startOffset,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                long windowSize) throws IOException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    FileTableSource.FileOffset offset = startOffset.map(value -&gt; (FileTableSource.FileOffset) value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      .orElseGet(() -&gt; new FileTableSource.FileOffset(0L));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    FetchData&lt;T&gt; tFetchData = fileReadHandler.readPartition((FileSplit) partition, offset, (int) windowSize);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Iterator&lt;T&gt; dataIterator = tFetchData.getDataIterator();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Iterator&lt;T&gt; newIterator = (Iterator&lt;T&gt;) Iterators.transform(dataIterator, e -&gt; suffix + "_" + e);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return FetchData.createBatchFetch(newIterator, tFetchData.getNextOffset());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class MyFileSink extends FileTableSink {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  private String suffix;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  private static final Logger LOGGER = LoggerFactory.getLogger(MyFileSink.class);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  private String separator;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  private StructType schema;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public void init(Configuration tableConf, StructType structType) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    super.init(tableConf, structType);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.separator = tableConf.getString(ConnectorConfigKeys.GEAFLOW_DSL_COLUMN_SEPARATOR);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.schema = Objects.requireNonNull(structType);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.suffix = tableConf.getString("geaflow.dsl.mysink.suffix");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (suffix == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      suffix = "mySinkSuffix";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public void write(Row row) throws IOException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Object[] values = new Object[schema.size()];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (int i = 0; i &lt; schema.size(); i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      values[i] = row.getField(i, schema.getType(i));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    StringBuilder line = new StringBuilder();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (Object value : values) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      if (line.length() &gt; 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        line.append(separator);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      line.append(value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    line.append("_").append(suffix);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    LOGGER.info("sinkLine {}", line);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    writer.write(line + "\n");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="注册插件"><font style="color:rgb(69, 69, 69)">注册插件</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E6%B3%A8%E5%86%8C%E6%8F%92%E4%BB%B6" class="hash-link" aria-label="Direct link to 注册插件" title="Direct link to 注册插件">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">GeaFlow 使用 ServiceLoader 的方式读取所有的 Connectors，</font><strong><font style="color:rgb(69, 69, 69)">需要在项目/resources/META-INF/services 目录下，增加配置文件，文件名为 com.antgroup.geaflow.dsl.connector.api.TableConnector。</font></strong></p>
<p><font style="color:rgb(69, 69, 69)">文件内容为定义的 Connector 的全类名，如:</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">com.connector.myconnector.MyFileConnector</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="准备测试数据"><font style="color:rgb(69, 69, 69)">准备测试数据</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E5%87%86%E5%A4%87%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE" class="hash-link" aria-label="Direct link to 准备测试数据" title="Direct link to 准备测试数据">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">在项目</font><font style="color:rgb(69, 69, 69)"> </font><strong><font style="color:rgb(69, 69, 69)">/resources/data</font></strong><font style="color:rgb(69, 69, 69)"> </font><font style="color:rgb(69, 69, 69)">目录中创建数据文件 data1，便于后续测试</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">1,"tom",15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2,"cat",20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3,"anny",23</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4,"alice",21</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="打包项目"><font style="color:rgb(69, 69, 69)">打包项目</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE" class="hash-link" aria-label="Direct link to 打包项目" title="Direct link to 打包项目">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">最后，将 maven 项目进行打包，得到插件的 jar 包。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="插件使用与管理"><font style="color:rgb(69, 69, 69)">插件使用与管理</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%AE%A1%E7%90%86" class="hash-link" aria-label="Direct link to 插件使用与管理" title="Direct link to 插件使用与管理">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="新增插件"><font style="color:rgb(69, 69, 69)">新增插件</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E6%96%B0%E5%A2%9E%E6%8F%92%E4%BB%B6" class="hash-link" aria-label="Direct link to 新增插件" title="Direct link to 新增插件">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">在 GeaFlow Console 页面，“插件管理”模块中新增插件，填写插件名称方便管理，上传 JAR 包。其中</font><strong><font style="color:rgb(69, 69, 69)">“插件类型”字段需要和 JAR 包中自定义 Connector#getType 方法返回的值一致，并不能和已有插件重名。</font></strong></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590634103-cc5f09f4-39f6-44be-b66d-79a5668ac307.png" alt="" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="创建表"><font style="color:rgb(69, 69, 69)">创建表</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E5%88%9B%E5%BB%BA%E8%A1%A8" class="hash-link" aria-label="Direct link to 创建表" title="Direct link to 创建表">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">创建 source 表，</font><strong><font style="color:rgb(69, 69, 69)">在参数配置中，选择类型为自定义的插件类型，并填写相应的参数（如输入表数据路径，自定义的 suffix）</font></strong><font style="color:rgb(69, 69, 69)">。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590634216-6dc1bef0-d173-4f47-918a-327034b6d445.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">创建 sink 表：</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590635405-eede39f8-4a05-4b21-af13-a309b6eb3f7c.png" alt="" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="提交任务"><font style="color:rgb(69, 69, 69)">提交任务</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1" class="hash-link" aria-label="Direct link to 提交任务" title="Direct link to 提交任务">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">创建 dsl 任务，直接在 dsl 中使用之前创建的 source 表和 sink 表。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590635456-8581b620-9778-4e3b-8968-27203d2cca59.png" alt="" class="img_ev3q"></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">insert into sinkTable select * from sourceTable;</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">发布，提交作业后，在容器的/tmp/geaflow/result 目录下，找到结果输出文件, 可看到输出数据中有插件中添加的 suffix，表示自定义插件运行成功。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">test-source_1,"tom",15_test-sink</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test-source_2,"cat",20_test-sink</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test-source_3,"anny",23_test-sink</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test-source_4,"alice",21_test-sink</span><br></span></code></pre></div></div>
<p><strong><font style="color:rgb(69, 69, 69)">至此，我们就成功使用 GeaFlow 实现了自定义 Connector 插件！是不是超简单！快来试一试吧！</font></strong></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/21#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590635988-bdefc357-4a30-4505-9c5a-8594e9d88346.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[开源TuGraph Analytics——是时候开始使用图计算了]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/20</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/20"/>
        <updated>2023-10-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：TuGraph]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：TuGraph</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="项目地址-font-stylecolorrgb255-81-0httpsgithubcomtugraph-familytugraph-analyticsfont"><font style="color:rgb(69, 69, 69)">项目地址：</font><font style="color:rgb(69, 69, 69)"> </font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80-font-stylecolorrgb255-81-0httpsgithubcomtugraph-familytugraph-analyticsfont" class="hash-link" aria-label="Direct link to 项目地址-font-stylecolorrgb255-81-0httpsgithubcomtugraph-familytugraph-analyticsfont" title="Direct link to 项目地址-font-stylecolorrgb255-81-0httpsgithubcomtugraph-familytugraph-analyticsfont">​</a></h2>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="项目文档地址-font-stylecolorrgb255-81-0httpstugraph-analyticsreadthedocsioenlatestindex_cnfont"><font style="color:rgb(69, 69, 69)">项目文档地址:</font><font style="color:rgb(69, 69, 69)"> </font><a href="https://tugraph-analytics.readthedocs.io/en/latest/index_cn/" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://tugraph-analytics.readthedocs.io/en/latest/index_cn/</font></a><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3%E5%9C%B0%E5%9D%80-font-stylecolorrgb255-81-0httpstugraph-analyticsreadthedocsioenlatestindex_cnfont" class="hash-link" aria-label="Direct link to 项目文档地址-font-stylecolorrgb255-81-0httpstugraph-analyticsreadthedocsioenlatestindex_cnfont" title="Direct link to 项目文档地址-font-stylecolorrgb255-81-0httpstugraph-analyticsreadthedocsioenlatestindex_cnfont">​</a></h2>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="博客地址-font-stylecolorrgb255-81-0httpstugraph-analyticsgithubiofont"><font style="color:rgb(69, 69, 69)">博客地址：</font><font style="color:rgb(69, 69, 69)"> </font><a href="https://tugraph-analytics.github.io/" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://tugraph-analytics.github.io/</font></a><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80-font-stylecolorrgb255-81-0httpstugraph-analyticsgithubiofont" class="hash-link" aria-label="Direct link to 博客地址-font-stylecolorrgb255-81-0httpstugraph-analyticsgithubiofont" title="Direct link to 博客地址-font-stylecolorrgb255-81-0httpstugraph-analyticsgithubiofont">​</a></h2>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="类别java"><font style="color:rgb(69, 69, 69)">类别：Java</font><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E7%B1%BB%E5%88%ABjava" class="hash-link" aria-label="Direct link to 类别java" title="Direct link to 类别java">​</a></h2>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="项目描述"><font style="color:rgb(69, 69, 69)">项目描述：</font><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E9%A1%B9%E7%9B%AE%E6%8F%8F%E8%BF%B0" class="hash-link" aria-label="Direct link to 项目描述" title="Direct link to 项目描述">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics)是蚂蚁集团开源的分布式流式图计算引擎，已广泛应用于数仓加速、金融风控、知识图谱以及社交网络等场景。</font></p>
<p><font style="color:rgb(69, 69, 69)">TuGraph-Analytics 的核心能力是以自研图存储为数据底座，支持用户书写 SQL+GQL 的融合语言，驱动流批一体的流式图计算。 使用 TuGraph-Analytics，用户可以继续沿用 SQL 进行查询，利用引擎的自动转图查询，同时享受图计算极大的性能优势红利。</font></p>
<p><font style="color:rgb(69, 69, 69)">在任何时候，用户可以无缝切换到 GQL 等图查询语言，以高效处理复杂多度的关系运算，如 3 度以上的 Join、各类图算法、图特征分析等。 基于图表一体、流批一体的计算引擎，用户可以自然忽略流和批的区隔，只需关注业务需求，计算将在实时计算和离线分析之间无缝切换。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用-tugraph-analytics-的好处"><font style="color:rgb(69, 69, 69)">使用 TuGraph-Analytics 的好处：</font><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E4%BD%BF%E7%94%A8-tugraph-analytics-%E7%9A%84%E5%A5%BD%E5%A4%84" class="hash-link" aria-label="Direct link to 使用-tugraph-analytics-的好处" title="Direct link to 使用-tugraph-analytics-的好处">​</a></h2>
<ul>
<li><font style="color:rgb(69, 69, 69)">支撑万亿级别超大规模图服务的稳定性</font></li>
<li><font style="color:rgb(69, 69, 69)">内建图研发管理平台，一站式图计算</font></li>
<li><font style="color:rgb(69, 69, 69)">业界独创的 SQL+GQL 融合语言，无需学习，以 SQL 驱动图计算</font></li>
<li><font style="color:rgb(69, 69, 69)">流批一体的 API 描述，支持自定义图计算任务</font></li>
<li><font style="color:rgb(69, 69, 69)">图和表集成处理</font></li>
<li><font style="color:rgb(69, 69, 69)">基于 K8S 的云原生部署支持</font></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用案例一-无需学习零基础开始-sql-图计算"><font style="color:rgb(69, 69, 69)">使用案例一 无需学习，零基础开始 SQL 图计算</font><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B%E4%B8%80-%E6%97%A0%E9%9C%80%E5%AD%A6%E4%B9%A0%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BC%80%E5%A7%8B-sql-%E5%9B%BE%E8%AE%A1%E7%AE%97" class="hash-link" aria-label="Direct link to 使用案例一-无需学习零基础开始-sql-图计算" title="Direct link to 使用案例一-无需学习零基础开始-sql-图计算">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">TuGraph-Analytics 提供融合 GQL 和 SQL 样式的查询语言，使得图计算的结果与表查询等价。</font></p>
<p><font style="color:rgb(69, 69, 69)">这意味着下图中 GQL 和 SQL 两种描述都可以达到类似的效果，用户无需预先学习专业图查询语言，即可使用 SQL 驱动图计算。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755608950376-1033c9a5-76d4-443f-a2b6-fbffb6191d56.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">GeaFlow DSL 引擎层支持了 SQL 中的 Join 自动转化为 GQL 执行，同时支持常用的 Project、Filter、Aggregate 等一系列 SQL 操作转为图计算执行。 用户可以自由混用 SQL 和 GQL 样式查询，同时做图匹配和表查询。</font></p>
<p><font style="color:rgb(69, 69, 69)">使用表建模的分析系统只支持 SQL join 一种方式进行关系分析，这在复杂场景中能力十分局限。 图建模的 TuGraph-Analytics 支持用户在任何时候，无缝切换到专业性强的图查询语言，以高效处理 SQL 难以表达的复杂关系运算。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用案例二-进行复杂流图匹配洞察商业价值"><font style="color:rgb(69, 69, 69)">使用案例二 进行复杂流图匹配，洞察商业价值</font><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B%E4%BA%8C-%E8%BF%9B%E8%A1%8C%E5%A4%8D%E6%9D%82%E6%B5%81%E5%9B%BE%E5%8C%B9%E9%85%8D%E6%B4%9E%E5%AF%9F%E5%95%86%E4%B8%9A%E4%BB%B7%E5%80%BC" class="hash-link" aria-label="Direct link to 使用案例二-进行复杂流图匹配洞察商业价值" title="Direct link to 使用案例二-进行复杂流图匹配洞察商业价值">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">使用专业图计算系统 TuGraph-Analytics，只需 40 行代码，即可搭建一个端到端的循环交易实时检测系统。</font></p>
<p><font style="color:rgb(69, 69, 69)">首先我们使用历史数据创建交易大图，命名为 ethereum_transaction_network。 接着把来自 Kafka 的实时交易流 table_new_trade 不断添加到命名为 ethereum_transaction_network 的图中。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755608970990-ee92b2a7-cce4-4468-b691-d302937205ec.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">每当有新的交易到达的时刻，系统都将触发一次 3 跳循环交易模式的检查， 把更新的结果存入位于 Kafka 的外部表 tbl_circular_trade，可以很方便地分发给下游组件。</font></p>
<p><font style="color:rgb(69, 69, 69)">打开一个 Kafka Producer，产生消息流，将交易不断发送给 Kafka，如左侧终端窗口所示。 最新的循环交易检出结果打印在右侧的 Kafka Consumer 窗口中。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755608983849-35ac9d0d-55cb-48b8-a01e-1e99aceaf11d.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">当添加一些新的交易日志时，右侧的 Kafka Consumer 窗口中也实时更新了新的循环交易检出结果，响应十分迅速。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755609001322-7f019699-9e69-4b85-a557-5d4ec75b1d41.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">此案例中，GeaFlow 结合 Kafka 轻松搭建起交易听单-&gt;交易网络生成-&gt;实时循环交易检出-&gt;给下游发送消息完整的金融级实时解决方案。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用案例三-利用内建-console-进行研发管理"><font style="color:rgb(69, 69, 69)">使用案例三 利用内建 Console 进行研发管理</font><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B%E4%B8%89-%E5%88%A9%E7%94%A8%E5%86%85%E5%BB%BA-console-%E8%BF%9B%E8%A1%8C%E7%A0%94%E5%8F%91%E7%AE%A1%E7%90%86" class="hash-link" aria-label="Direct link to 使用案例三-利用内建-console-进行研发管理" title="Direct link to 使用案例三-利用内建-console-进行研发管理">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">通过管控平台 Console，分析人员可以提交一系列研究作业。 这些图查询作业会通过 GeaFlow 引擎自动提交到 K8S 集群中分布式地运行，大大提高了数据分析的能力和效率。</font></p>
<p><font style="color:rgb(69, 69, 69)">在 GeaFlow Console 中新增图任务，任务类型选择“HLA”， 并上传 jar 包，其中 entryClass 为算法主函数所在的类。 点击“提交”，创建任务。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755609016219-5bd192fb-f3ea-4357-bc27-0ab3f8fd55f8.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">点击”发布”，可进入作业详情界面，点击“提交”即可提交作业。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755609028453-4a77fefb-1e77-4b11-9b70-1bdbb077826c.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">运行的图查询均可在 Console 界面查看，方便回溯和管理，并且可在作业详情中查看运行详情，</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755609039536-d72dae2f-54f7-479c-9721-f44dc664016e.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用案例四-自研图算法嵌入-gql-语言执行"><font style="color:rgb(69, 69, 69)">使用案例四 自研图算法，嵌入 GQL 语言执行</font><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B%E5%9B%9B-%E8%87%AA%E7%A0%94%E5%9B%BE%E7%AE%97%E6%B3%95%E5%B5%8C%E5%85%A5-gql-%E8%AF%AD%E8%A8%80%E6%89%A7%E8%A1%8C" class="hash-link" aria-label="Direct link to 使用案例四-自研图算法嵌入-gql-语言执行" title="Direct link to 使用案例四-自研图算法嵌入-gql-语言执行">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">用户可以基于 UDGA(User Defined Graph Algorithm)接口实现自定义图算法。 通过将 UDGA 上传至 console 平台，可以类似 SQL Function 的方式在 GQL 查询中调用。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755609052563-e9b6e50c-852d-48fb-b334-7e7586287a03.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">用户可以在 GQL 图查询语句中嵌入图算法，使用方式如下所示：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO tbl_result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CALL wcc() YIELD (vid, component)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RETURN vid, component</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">内置算法或者 UDF 在 BuildInSqlFunctionTable 中进行注册。对于非内置算法，可以通过 create function 语句来创建。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Create funciton wcc as 'com.antgroup.geaflow.dsl.udf.graph.WeakConnectedComponents';</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="系统设计图"><font style="color:rgb(69, 69, 69)">系统设计图</font><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%9B%BE" class="hash-link" aria-label="Direct link to 系统设计图" title="Direct link to 系统设计图">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics 开源技术架构一共分为五个部分：</font></p>
<ul>
<li><strong><font style="color:rgb(69, 69, 69)">DSL 层</font></strong><font style="color:rgb(69, 69, 69)">：即语言层。TuGraph Analytics 设计了 SQL+GQL 的融合分析语言，支持对表模型和图模型统一处理。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">Framework 层</font></strong><font style="color:rgb(69, 69, 69)">：即框架层。TuGraph Analytics 设计了面向 Graph 和 Stream 的两套 API 支持流、批、图融合计算，并实现了基于 Cycle 的统一分布式调度模型。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">State 层</font></strong><font style="color:rgb(69, 69, 69)">：即存储层。TuGraph Analytics 设计了面向 Graph 和 KV 的两套 API 支持表数据和图数据的混合存储，整体采用了 Sharing Nothing 的设计，并支持将数据持久化到远程存储。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">Console 平台</font></strong><font style="color:rgb(69, 69, 69)">：TuGraph Analytics 提供了一站式图研发平台，实现了图数据的建模、加工、分析能力，并提供了图作业的运维管控支持。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">执行环境</font></strong><font style="color:rgb(69, 69, 69)">：TuGraph Analytics 可以运行在多种异构执行环境，如 K8S、Ray 以及本地模式。</font></li>
</ul>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755609067341-d777e122-207f-4c18-8d7b-a0ef8151b861.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="benchmark"><font style="color:rgb(69, 69, 69)">Benchmark</font><a href="https://kaiming-l.github.io/geaflow-website/blog/20#benchmark" class="hash-link" aria-label="Direct link to benchmark" title="Direct link to benchmark">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">我们模拟依次执行一跳、两跳和三跳关系运算的场景。足以见得，越是复杂的多跳关系计算，关系模型中 Join 的性能表现越差。在总时间对比中，利用图的 Match 计算能够节约超过 90%的耗时。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755609080630-9132bd40-3ffb-4f98-ab93-fb083c1fbfe0.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">图 1</font></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/20#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755609098935-d268d785-ff3c-4a2d-85c6-2db615589c9c.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TuGraph Analytics图计算快速上手之弱联通分量算法]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/18</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/18"/>
        <updated>2023-10-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：张奇]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：张奇</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tugraph-analytics-简介"><font style="color:rgb(69, 69, 69)">TuGraph Analytics 简介</font><a href="https://kaiming-l.github.io/geaflow-website/blog/18#tugraph-analytics-%E7%AE%80%E4%BB%8B" class="hash-link" aria-label="Direct link to tugraph-analytics-简介" title="Direct link to tugraph-analytics-简介">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics 是蚂蚁集团近期开源的分布式流式图计算，目前广泛应用在蚂蚁集团的金融、社交、风控等诸多领域。更多详细内容可参考 TuGraph Analytics 的 github 首页（</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a><font style="color:rgb(69, 69, 69)">），欢迎国内外开发者们与我们共建 TuGraph Analytics 社区，壮大流图产业生态。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="弱联通分量算法介绍"><font style="color:rgb(69, 69, 69)">弱联通分量算法介绍</font><a href="https://kaiming-l.github.io/geaflow-website/blog/18#%E5%BC%B1%E8%81%94%E9%80%9A%E5%88%86%E9%87%8F%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="Direct link to 弱联通分量算法介绍" title="Direct link to 弱联通分量算法介绍">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">弱联通分量图算法（Weakly Connected Components Algorithm）是一种用于找到图中所有弱联通分量的算法。弱联通分量是指在有向图中，如果忽略所有边的方向，相互之间是连通的节点集合。</font></p>
<p><font style="color:rgb(69, 69, 69)">算法的基本思想是通过深度优先搜索（DFS）或广度优先搜索（BFS）遍历图的所有节点，对于每个未访问过的节点，都会生成一个新的联通分量。在遍历过程中，如果当前节点的邻居节点已经被访问过，那么将其加入当前联通分量中，并继续遍历邻居节点。</font></p>
<p><font style="color:rgb(69, 69, 69)">通过这种方式，算法能够找到图中所有弱联通分量，并将每个分量的节点集合进行标记或存储起来。最终，算法返回所有弱联通分量的集合。</font></p>
<p><font style="color:rgb(69, 69, 69)">弱联通分量图算法可以应用于许多实际问题，例如社交网络分析中的用户群体划分、网页链接分析中的网页群组划分等。它能够帮助我们理解图中不同分量之间的关系，从而更好地分析图的结构和特性。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590865396-ffe17ed9-cdca-4b4b-8abc-15b9c1fc0772.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="在-tugraph-analytics-上实现弱联通分量算法"><font style="color:rgb(69, 69, 69)">在 TuGraph Analytics 上实现弱联通分量算法</font><a href="https://kaiming-l.github.io/geaflow-website/blog/18#%E5%9C%A8-tugraph-analytics-%E4%B8%8A%E5%AE%9E%E7%8E%B0%E5%BC%B1%E8%81%94%E9%80%9A%E5%88%86%E9%87%8F%E7%AE%97%E6%B3%95" class="hash-link" aria-label="Direct link to 在-tugraph-analytics-上实现弱联通分量算法" title="Direct link to 在-tugraph-analytics-上实现弱联通分量算法">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用方式"><font style="color:rgb(69, 69, 69)">使用方式</font><a href="https://kaiming-l.github.io/geaflow-website/blog/18#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F" class="hash-link" aria-label="Direct link to 使用方式" title="Direct link to 使用方式">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">用户可以在 GQL 图查询语句中嵌入图算法，如下所示：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO tbl_result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CALL wcc() YIELD (vid, component)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RETURN vid, component</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">通过 CALL 语句调用具体的算法，通过 YIELD 定义算法的返回字段。需要注意的是，这么做的前提是算法 udf 需要注册或者创建后才能使用。DSL 内置算法或者 UDF 在 BuildInSqlFunctionTable 中进行注册。对于非内置算法，可以通过 create function 语句来创建。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Create funciton wcc as 'com.antgroup.geaflow.dsl.udf.graph.WeakConnectedComponents';</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="算法实现"><font style="color:rgb(69, 69, 69)">算法实现</font><a href="https://kaiming-l.github.io/geaflow-website/blog/18#%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0" class="hash-link" aria-label="Direct link to 算法实现" title="Direct link to 算法实现">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics 上实现图算法需要实现 AlgorithmUserFunction 接口，该接口定义如下：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public interface AlgorithmUserFunction&lt;K, M&gt; extends Serializable {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * Init method for the function.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param context The runtime context.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param params  The parameters for the function.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void init(AlgorithmRuntimeContext&lt;K, M&gt; context, Object[] params);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * Processing method for each vertex and the messages it received.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void process(RowVertex vertex, Iterator&lt;M&gt; messages);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * Finish method called by each vertex upon algorithm convergence.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void finish(RowVertex vertex);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * Returns the output type for the function.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    StructType getOutputType();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="init"><font style="color:rgb(69, 69, 69)">init</font><a href="https://kaiming-l.github.io/geaflow-website/blog/18#init" class="hash-link" aria-label="Direct link to init" title="Direct link to init">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">首先，init 方法在 worker 初始化时调用，用户往算法 udf 中传入的参数，会放在 params 数组变量里。比如 wcc(10)，这里的 params[0] = 10。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public void init(AlgorithmRuntimeContext&lt;Object, String&gt; context, Object[] parameters) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.context = context;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (parameters.length &gt; 2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        throw new IllegalArgumentException(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Only support zero or more arguments, false arguments "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                + "usage: func([alpha, [convergence, [max_iteration]]])");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	// 设置最大迭代次数，如果没有设置该参数，最大迭代次数默认为20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (parameters.length &gt; 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        iteration = Integer.parseInt(String.valueOf(parameters[0]));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	// 设置输出结果联通分量的key，默认为"component"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (parameters.length &gt; 1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        keyFieldName =String.valueOf(parameters[1]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="process"><font style="color:rgb(69, 69, 69)">process</font><a href="https://kaiming-l.github.io/geaflow-website/blog/18#process" class="hash-link" aria-label="Direct link to process" title="Direct link to process">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">process 方法是每轮迭代执行的核心方法，弱联通分量算法的核心逻辑就实现在该方法里。在这里，第一轮迭代时我们设置每个点的 value 初始值为该点的 id，然后将该 id 通过出边和入边向其邻居节点传递出去。在此后的每轮迭代里，每个收到邻居节点消息的节点会取出消息里的最小值，作为该节点的新值，然后再将该最小值传递给其他邻居节点。到最后，所有联通分量的节点的值都会被染色成这个联通网络里的节点最小值。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public void process(RowVertex vertex, Iterator&lt;String&gt; messages) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    List&lt;RowEdge&gt; edges = new ArrayList&lt;&gt;(context.loadEdges(EdgeDirection.BOTH));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (context.getCurrentIterationId() == 1L) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String initValue = String.valueOf(vertex.getId());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sendMessageToNeighbors(edges, initValue);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        context.sendMessage(vertex.getId(), String.valueOf(vertex.getId()));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        context.updateVertexValue(ObjectRow.create(initValue));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } else if (context.getCurrentIterationId() &lt; iteration) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String minComponent = messages.next();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        while (messages.hasNext()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            String next = messages.next();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (next.compareTo(minComponent) &lt; 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                minComponent = next;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sendMessageToNeighbors(edges, minComponent);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        context.sendMessage(vertex.getId(), minComponent);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        context.updateVertexValue(ObjectRow.create(minComponent));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">private void sendMessageToNeighbors(List&lt;RowEdge&gt; edges, String message) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (RowEdge rowEdge : edges) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        context.sendMessage(rowEdge.getTargetId(), message);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="finish"><font style="color:rgb(69, 69, 69)">finish</font><a href="https://kaiming-l.github.io/geaflow-website/blog/18#finish" class="hash-link" aria-label="Direct link to finish" title="Direct link to finish">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">finish 方法在迭代最终收敛时会被调用，此时每个节点都会被染色成了它所在联通网络里的节点最小值，我们可以将结果输出。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public void finish(RowVertex vertex) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    String component = (String) vertex.getValue().getField(0, StringType.INSTANCE);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context.take(ObjectRow.create(vertex.getId(), component));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="getoutputtype"><font style="color:rgb(69, 69, 69)">getOutputType</font><a href="https://kaiming-l.github.io/geaflow-website/blog/18#getoutputtype" class="hash-link" aria-label="Direct link to getoutputtype" title="Direct link to getoutputtype">​</a></h4>
<p><font style="color:rgb(69, 69, 69)">getOutputType 方法中返回 udf 输出结果的 schema，在这里我们的输出结果是点，点有 meta 字段 id 和属性字段 component。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public StructType getOutputType() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return new StructType(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new TableField("id", LongType.INSTANCE, false),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new TableField(keyFieldName, StringType.INSTANCE, false)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结"><font style="color:rgb(69, 69, 69)">总结</font><a href="https://kaiming-l.github.io/geaflow-website/blog/18#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="Direct link to 总结" title="Direct link to 总结">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">在本篇文章中我们介绍了如何在 TuGraph Analytics 上实现弱联通分量算法，如果你觉得比较有趣，欢迎关注我们的社区</font><font style="color:rgb(69, 69, 69)"> </font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a><font style="color:rgb(69, 69, 69)"> </font><font style="color:rgb(69, 69, 69)">。开源不易，如果你觉得还不错，可以给我们 star 支持一下</font></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/18#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590820839-32a0da91-82f2-43d8-af0e-1046f171431e.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TuGraph Analytics图建模研发：为图计算业务提速增效]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/19</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/19"/>
        <updated>2023-10-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：TuGraph]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：TuGraph</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="概述"><font style="color:rgb(69, 69, 69)">概述</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E6%A6%82%E8%BF%B0" class="hash-link" aria-label="Direct link to 概述" title="Direct link to 概述">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">GeaFlow Console 平台提供了图数据研发能力，包括了对点、边、图、表、函数、任务的管理功能， 为了让用户更好的管理元数据信息，同时也便于用户对图计算进一步地了解。通过对这些研发资源的管理，用户可以方便地、白屏化地创建、修改、删除这些元数据，也可以很方便地查看当前租户下所拥有的数据资产概览及详情，从而更多关注于业务逻辑的实现。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="图数据研发介绍"><font style="color:rgb(69, 69, 69)">图数据研发介绍</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E5%9B%BE%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="Direct link to 图数据研发介绍" title="Direct link to 图数据研发介绍">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="基本概念"><font style="color:rgb(69, 69, 69)">基本概念</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" class="hash-link" aria-label="Direct link to 基本概念" title="Direct link to 基本概念">​</a></h3>
<ol>
<li><font style="color:rgb(69, 69, 69)">点（GeaflowVertex）：表示一个对象或实体、包含了点 id，标签和属性。</font></li>
<li><font style="color:rgb(69, 69, 69)">边（GeaflowEdge）：表示对象之间的关系，连接点和点，包含源点 id，目标点 id，标签，时间戳和属性。</font></li>
<li><font style="color:rgb(69, 69, 69)">图（GeaflowGraph）：表示对象之间关联关系的一种抽象数据结构，由若干个点和若干边组成。</font></li>
<li><font style="color:rgb(69, 69, 69)">表（GeaflowTable）: 是有结构的数据的集，由行和列组成，每列为字段，有相应的类型和约束条件，每行为一条具体数据。</font></li>
<li><font style="color:rgb(69, 69, 69)">函数（GeaflowFunction）: 用户自定义的方法，可在 dsl 作业中使用。</font></li>
<li><font style="color:rgb(69, 69, 69)">图拓扑（GeaflowEndpoint）: 逻辑概念，为一个三元组&lt;edgeId, srcId, targetId&gt;, 表示在一个图中，一个边的起点和目标点的约束关系。</font></li>
<li><font style="color:rgb(69, 69, 69)">任务（GeaflowJob）: 研发时对计算逻辑的描述，用户通过编辑任务实现业务逻辑，目前支持 dsl 和高阶两种方式进行任务研发:</font></li>
<li><font style="color:rgb(69, 69, 69)">dsl 任务（GeaflowCodeJob）: 通过编写 dsl 代码运行。</font></li>
<li><font style="color:rgb(69, 69, 69)">高阶任务（GeaflowApiJob）: 通过 api 的方式，使用 jar 包运行。</font></li>
<li><font style="color:rgb(69, 69, 69)">作业（GeaflowTask）: 由任务经过发布流程生成，最终提交运行。一旦构建，不可修改作业元信息(例如作业的 dsl 代码或 jar 包)。</font></li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="模型结构"><font style="color:rgb(69, 69, 69)">模型结构</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E6%A8%A1%E5%9E%8B%E7%BB%93%E6%9E%84" class="hash-link" aria-label="Direct link to 模型结构" title="Direct link to 模型结构">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="点边图表函数"><font style="color:rgb(69, 69, 69)">点&amp;边&amp;图&amp;表&amp;函数</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E7%82%B9%E8%BE%B9%E5%9B%BE%E8%A1%A8%E5%87%BD%E6%95%B0" class="hash-link" aria-label="Direct link to 点边图表函数" title="Direct link to 点边图表函数">​</a></h4>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755608876791-a0f8c2a1-2a1f-470f-8360-20e11256b7da.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">Geaflow 将所有研发资源进行了结构化的模型设计，从模型图中，可以看到 vertex，edge，table 都继承自 GeaflowStruct，GeaflowStruct 中包含一个 GeaflowField 列表，其中 GeaflowField 代表了字段，包含类型(Long，String，Boolean 等)和约束条件(点 id，属性，边源点 id，边目标点 id 等)。在图中，包含了点、边以及 Endpoint 的列表，描述了实体之间的关联信息。 图和表关联了 GeaflowPluginConfig，这是插件配置，表示图表的来源或输出配置，例如 odps，sls，oss 等。 函数中主要包含一个 jar 包对象和主类，以标识函数的入口。</font></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="任务作业"><font style="color:rgb(69, 69, 69)">任务&amp;作业</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E4%BB%BB%E5%8A%A1%E4%BD%9C%E4%B8%9A" class="hash-link" aria-label="Direct link to 任务作业" title="Direct link to 任务作业">​</a></h4>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755608897897-c9f26965-97b0-4c05-8bc1-3b8441cce90a.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">GeaflowJob 为所有任务类型的父类，其中的 structs、graphs、functions 字段记录了这个任务所使用的图、表、函数，方便用户了解作业关联的一些元信息。任务根据使用途径还可分为以下几种类型:</font></p>
<ol>
<li><font style="color:rgb(69, 69, 69)">GeaflowProcessJob: 加工任务，用户编写 dsl 代码实现构图或图计算逻辑, 例如环形计数。</font></li>
<li><font style="color:rgb(69, 69, 69)">GeaflowIntegrationJob: 集成任务，可以根据数据源表自动生成代码，导入到图中。</font></li>
<li><font style="color:rgb(69, 69, 69)">GeaflowCustomJob: 自定义任务， 用户通过编写高阶 api 代码，实现图计算逻辑，例如实现 PageRank, SSSP 等算法。</font></li>
<li><font style="color:rgb(69, 69, 69)">GeaflowStatisticJob: 统计任务，用于统计图的信息，例如点边个数。</font></li>
<li><font style="color:rgb(69, 69, 69)">GeaflowServerJob: 查询任务，用于 olap 服务，执行图查询。</font></li>
</ol>
<p><font style="color:rgb(69, 69, 69)">任务（GeaflowJob）和作业（GeaflowTask）通过发布包（GeaflowRelease）进行关联，任务为研发时的描述，作业为运行时的描述，用户可以对任务进行发布，通过 BuildPipeline 执行流水线构建生成相应的发布包，进而得到相应的作业。Release 中包含了作业运行的执行计划、引擎版本、作业参数、集群和集群参数等，是作业在运行时所需要的信息。用户通过创建和修改任务进行业务逻辑的研发，通过发布的作业进行提交运行。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="demo-演示"><font style="color:rgb(69, 69, 69)">Demo 演示</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#demo-%E6%BC%94%E7%A4%BA" class="hash-link" aria-label="Direct link to demo-演示" title="Direct link to demo-演示">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="创建点"><font style="color:rgb(69, 69, 69)">创建点</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E5%88%9B%E5%BB%BA%E7%82%B9" class="hash-link" aria-label="Direct link to 创建点" title="Direct link to 创建点">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">在研发管理中新增点定义, 每个点有对应的字段列表，且必须有点 id 字段，如下例子中新增了 2 个点：person 和 software。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590689987-54d89c91-6cd4-4bf3-8846-523737a73014.png" alt="" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590689300-d17f09d3-59ff-4381-ada4-062012d22360.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="创建边"><font style="color:rgb(69, 69, 69)">创建边</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E5%88%9B%E5%BB%BA%E8%BE%B9" class="hash-link" aria-label="Direct link to 创建边" title="Direct link to 创建边">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">在研发管理中新增边定义, 每条边需要有源点 id 和目标点 id 字段，如下例子中新增了 2 条边：knows 和 creates。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590689096-911b5143-f4db-4af2-adb2-63f0c86549ba.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="创建图"><font style="color:rgb(69, 69, 69)">创建图</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E5%88%9B%E5%BB%BA%E5%9B%BE" class="hash-link" aria-label="Direct link to 创建图" title="Direct link to 创建图">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">在研发管理中新增图定义, 图可以关联之前定义的点和边，console 中通过选择框的方式进行关联。如下例子中，创建了名为 dy_modern 的图，其包含了 person 和 software 点、created 和 knows 边。同时，可以为图配置拓扑约束，限制此图上边的源点目标点的绑定关系，例如 create 边只能是 person-&gt;software, know 边只能是 person-&gt;person（Endpoint 具体作用将在后续文章中介绍）。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590705203-20764e69-1b54-4228-9ffc-2fab6e5953f5.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="创建表"><font style="color:rgb(69, 69, 69)">创建表</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E5%88%9B%E5%BB%BA%E8%A1%A8" class="hash-link" aria-label="Direct link to 创建表" title="Direct link to 创建表">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">在研发管理中新增表定义， 此例子中创建了一个输出表，为最终结果输出的载体，有 2 个字段 person 名字和 software 名字。其参数配置中的类型为 file，表示输出到本地文件目录(也可以选择其他类型，例如 kafka，hive)。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590694918-e791f116-2dd7-46f5-9c9f-af24d84fd6e4.png" alt="" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590693535-4cbf63d5-142f-4765-9013-90463619dd84.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="创建任务"><font style="color:rgb(69, 69, 69)">创建任务</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1" class="hash-link" aria-label="Direct link to 创建任务" title="Direct link to 创建任务">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">本示例中，构造如下关系图:</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590690653-deec4e97-416c-46fc-a3ab-48bf493871fc.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">任务 dsl 如下，先向图 dy_modern 中插入点边数据，然后执行 MATCH 遍历图，找到 id=1 的人（jim）认识的人（kate、tom）所创建的软件（software1、software2），最后将结果插入到 tbl_result 表（文件）中。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">USE GRAPH dy_modern;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO dy_modern.person(id, name, age)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 1, 'jim', 20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 2, 'kate', 22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 3, 'tom', 24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO dy_modern.software(id, name, lang)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 4, 'software1', 'java'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 5, 'software2', 'java'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO dy_modern.knows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 1,2 ,0.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 1,3 ,0.3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO dy_modern.creates</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 2, 4, 0.6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNION ALL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT 3, 5, 0.8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO tbl_result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	b_name,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  MATCH (a:person where id = 1) -[e:knows]-&gt;(b:person)-[e2:creates]-&gt; (c:software)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  RETURN b.name as b_name, c.name as c_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">)</span><br></span></code></pre></div></div>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590705180-a40b9136-faa4-4fce-bf14-f6b65f8586c2.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">任务发布之后即可生成对应 task，进入作业详情界面，提交作业之后开始执行，最终运行完成。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590699812-900597f3-6842-4178-af43-cbf010126803.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">作业的参数配置如下,</font><font style="color:rgb(69, 69, 69)"> </font><strong><font style="color:rgb(69, 69, 69)">注意 worker 数需要设置</font></strong><font style="color:rgb(69, 69, 69)">:</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590701971-086e1566-2487-4247-8846-e9847358ccc1.png" alt="" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590699528-f0b62043-38e7-4ff1-9402-a5e813b33715.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">在容器的/tmp/result 目录中找到结果文件。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[root@09db8348371a tmp]# cd /tmp/result/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.partiton_0.crc  .partiton_1.crc  partiton_0  partiton_1</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">由于 graph 中的 shradCount 设置的为 2，所以结果文件有 2 个分片：partition_0, partition_1 查看文件，有 2 条数据，符合结果。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kate,software1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tom, software2</span><br></span></code></pre></div></div>
<p><strong><font style="color:rgb(69, 69, 69)">至此，我们就成功使用平台的图研发功能完成了图表的创建和计算作业的运行！是不是超简单！快来试一试吧！</font></strong></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/19#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590700970-7d65afb7-8e6b-4f65-a3b6-d4e3d6a6a86d.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[容器内mysql无法启动解决方案]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/17</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/17"/>
        <updated>2023-09-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[容器内无法启动 mysql，导致 console 无法启动。可以通过访问宿主机的 mysql 绕过容器内启动 mysql 的问题。]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">容器内无法启动 mysql，导致 console 无法启动。可以通过访问宿主机的 mysql 绕过容器内启动 mysql 的问题。</font></p>
<p><font style="color:rgb(69, 69, 69)">操作步骤如下:</font></p>
<p><font style="color:rgb(69, 69, 69)">清空 geaflow-console 的容器，关闭宿主机 MySQL 以恢复到初始状态。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 查看容器id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker ps -a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 删除容器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker rm [container-id]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 查找mysql相关进程号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ps -ef | grep mysql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 结束MySQL进程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kill [pid]</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">第一步：启动 geaflow-console 容器</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker run -d --net=host --name geaflow-console -p 8080:8080 -p 8888:8888 -p 6379:6379 -p 8086:8086 -e geaflow.host=${your.host.name} -e geaflow.web.gateway.url=http://${your.public.ip}:8080 geaflow-console:0.1</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">注：加上–net=host 参数使得容器和宿主机互通，去掉-p 3306:3306 映射以便访问宿主机 MySQL</font></p>
<p><font style="color:rgb(69, 69, 69)">第二步：如有，关闭 geaflow-console 容器内的 MySQL</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 查看容器id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker ps -a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 从宿主机进入容器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker exec -it [container-id] bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 查找mysql相关进程号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ps -ef | grep mysql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 结束MySQL进程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kill [pid]</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">第三步：在宿主机启动 MySQL</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 从容器退出到宿主机</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">exit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 如果没有安装mysql，则安装mysql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-7.noarch.rpm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">yum -y install mysql-community-server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysqld --initialize-insecure --user=mysql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 启动mysql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nohup mysqld --user=mysql &amp;&gt;&gt; /var/lib/mysql/mysqld.log &amp;</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">第四步：在宿主机 MySQL 建立 geaflow 数据库，授权</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 打开mysql shell</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 建立geaflow数据库</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">create database geaflow;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 授权</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE USER IF NOT EXISTS geaflow IDENTIFIED BY 'geaflow';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GRANT ALL ON *.* TO 'geaflow'@'%';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FLUSH PRIVILEGES;</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">第五步：回到 console 容器内，重启 geaflow-console java 进程</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 查看容器id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker ps -a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 从宿主机进入容器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker exec -it [container-id] bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 检查容器内连接宿主机MySQL是否成功</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">curl http://${your.host.name}:3306</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">连接宿主机 MySQL 成功如图：</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590931230-a8c6d558-cae0-4a8d-8fe8-079e4826468a.png" alt="" class="img_ev3q"></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 查找geaflow-console java进程号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ps -ef |grep java</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 结束geaflow-console java进程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kill [pid]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 重启geaflow-console java进程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">java -Xmx4096m -cp /opt/geaflow/boot/geaflow-console-bootstrap.jar:/opt/geaflow/config org.springframework.boot.loader.JarLauncher</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">结果：访问 console 端口，查看 console 界面是否启动 进入容器等待 geaflow-web 进程启动完成后，访问 ${your.public.ip}:8888 进入 GeaFlow Console 平台页面。</font></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/17#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590930068-dd98bfe8-1ac0-4c0c-ab21-742389a69b83.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TuGgraph-Analytics图计算快速上手之紧密中心度算法]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/16</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/16"/>
        <updated>2023-09-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：张武科]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：张武科</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="概述"><font style="color:rgb(69, 69, 69)">概述</font><a href="https://kaiming-l.github.io/geaflow-website/blog/16#%E6%A6%82%E8%BF%B0" class="hash-link" aria-label="Direct link to 概述" title="Direct link to 概述">​</a></h2>
<p><strong><font style="color:rgb(69, 69, 69)">紧密中心度（Closeness Centrality）</font></strong><font style="color:rgb(69, 69, 69)">计量了一个节点到其他所有节点的紧密性，即该节点到其他节点的距离的倒数；节点对应的值越高表示紧密性越好，能够在图中传播信息的能力越强，可用以衡量信息流入或流出该节点的能力，多用与社交网络中关键节点发掘等场景。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="算法介绍"><font style="color:rgb(69, 69, 69)">算法介绍</font><a href="https://kaiming-l.github.io/geaflow-website/blog/16#%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="Direct link to 算法介绍" title="Direct link to 算法介绍">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">对于图中一个给定节点，紧密性中心性是该节点到其他所有节点的最小距离和的倒数：</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590978534-43f77402-6915-402d-b006-8e0ded89d446.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">其中，u 表示待计算紧密中心度的节点，d(u, v)表示节点 u 到节点 v 的最短路径距离；实际场景中，更多地使用归一化后的紧密中心度，即计算目标节点到其他节点的平均距离的倒数：</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590977672-e3a5154a-a7a8-4d37-b701-184526bc6f75.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">其中，n 表示图中节点数。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="算法实现"><font style="color:rgb(69, 69, 69)">算法实现</font><a href="https://kaiming-l.github.io/geaflow-website/blog/16#%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0" class="hash-link" aria-label="Direct link to 算法实现" title="Direct link to 算法实现">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">首先，基于</font><code>&lt;font style="color:rgb(69, 69, 69);background-color:rgb(238, 238, 238);"&gt;AlgorithmUserFunction&lt;/font&gt;</code><font style="color:rgb(69, 69, 69)">接口实现</font><code>&lt;font style="color:rgb(69, 69, 69);background-color:rgb(238, 238, 238);"&gt;ClosenessCentrality&lt;/font&gt;</code><font style="color:rgb(69, 69, 69)">，如下：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Description(name = "closeness_centrality", description = "built-in udga for ClosenessCentrality")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class ClosenessCentrality implements AlgorithmUserFunction&lt;Long, Long&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private AlgorithmRuntimeContext context;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private long sourceId;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void init(AlgorithmRuntimeContext context, Object[] params) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.context = context;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (params.length != 1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new IllegalArgumentException("Only support one arguments, usage: func(sourceId)");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.sourceId = ((Number) params[0]).longValue();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void process(RowVertex vertex, Iterator&lt;Long&gt; messages) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;RowEdge&gt; edges = context.loadEdges(EdgeDirection.OUT);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (context.getCurrentIterationId() == 1L) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            context.sendMessage(vertex.getId(), 1L);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            context.sendMessage(sourceId, 1L);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else if (context.getCurrentIterationId() == 2L) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            context.updateVertexValue(ObjectRow.create(0L, 0L));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (vertex.getId().equals(sourceId)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                long vertexNum = -2L;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                while (messages.hasNext()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    messages.next();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    vertexNum++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                // 统计节点数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                context.updateVertexValue(ObjectRow.create(0L, vertexNum));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                // 向邻接点发送与目标点距离</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                sendMessageToNeighbors(edges, 1L);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (vertex.getId().equals(sourceId)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                long sum = (long) vertex.getValue().getField(0, LongType.INSTANCE);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                while (messages.hasNext()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    sum += messages.next();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                long vertexNum = (long) vertex.getValue().getField(1, LongType.INSTANCE);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                // 记录最短距离和</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                context.updateVertexValue(ObjectRow.create(sum, vertexNum));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (((long) vertex.getValue().getField(1, LongType.INSTANCE)) &lt; 1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    Long meg = messages.next();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    context.sendMessage(sourceId, meg);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // 向邻接点发送与目标点距离</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    sendMessageToNeighbors(edges, meg + 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // 标记该点已向目标点发送过消息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    context.updateVertexValue(ObjectRow.create(0L, 1L));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void sendMessageToNeighbors(List&lt;RowEdge&gt; outEdges, Object message) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (RowEdge rowEdge : outEdges) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            context.sendMessage(rowEdge.getTargetId(), message);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void finish(RowVertex vertex) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (vertex.getId().equals(sourceId)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            long len = (long) vertex.getValue().getField(0, LongType.INSTANCE);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            long num = (long) vertex.getValue().getField(1, LongType.INSTANCE);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            context.take(ObjectRow.create(vertex.getId(), (double) num / len));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public StructType getOutputType() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new StructType(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            new TableField("id", LongType.INSTANCE, false),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            new TableField("cc", DoubleType.INSTANCE, false)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">然后，可在 DSL 中引入自定义算法，直接调用使用，语法形式如下：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE Function closeness_centrality AS 'com.antgroup.geaflow.dsl.udf.ClosenessCentrality';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO tbl_result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CALL closeness_centrality(1) YIELD (vid, ccValue)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RETURN vid, ROUND(ccValue, 3)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">示例表示，计算图中</font><font style="color:rgb(69, 69, 69)"> </font><code>&lt;font style="color:rgb(69, 69, 69);background-color:rgb(238, 238, 238);"&gt;id = 1&lt;/font&gt;</code><font style="color:rgb(69, 69, 69)">节点的紧密中心度。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="算法运行"><font style="color:rgb(69, 69, 69)">算法运行</font><a href="https://kaiming-l.github.io/geaflow-website/blog/16#%E7%AE%97%E6%B3%95%E8%BF%90%E8%A1%8C" class="hash-link" aria-label="Direct link to 算法运行" title="Direct link to 算法运行">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">在运行算法之前，要构造算法运行的底图数据。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="图定义"><font style="color:rgb(69, 69, 69)">图定义</font><a href="https://kaiming-l.github.io/geaflow-website/blog/16#%E5%9B%BE%E5%AE%9A%E4%B9%89" class="hash-link" aria-label="Direct link to 图定义" title="Direct link to 图定义">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">首先，进行图定义：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE GRAPH modern (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Vertex person (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  id bigint ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  name varchar,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  age int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Vertex software (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  id bigint ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  name varchar,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  lang varchar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Edge knows (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  srcId bigint SOURCE ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  targetId bigint DESTINATION ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  weight double</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Edge created (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	  srcId bigint SOURCE ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  	targetId bigint DESTINATION ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  	weight double</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	storeType='rocksdb',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	shardNum = 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="图构建"><font style="color:rgb(69, 69, 69)">图构建</font><a href="https://kaiming-l.github.io/geaflow-website/blog/16#%E5%9B%BE%E6%9E%84%E5%BB%BA" class="hash-link" aria-label="Direct link to 图构建" title="Direct link to 图构建">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">完成图定义之后，导入点边数据，构造数据底图：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE modern_vertex (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  id varchar,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type varchar,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name varchar,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  other varchar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type='file',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow.dsl.file.path = 'resource:///data/modern_vertex.txt'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE modern_edge (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  srcId bigint,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  targetId bigint,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type varchar,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  weight double</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type='file',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow.dsl.file.path = 'resource:///data/modern_edge.txt'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO modern.person</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT cast(id as bigint), name, cast(other as int) as age</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM modern_vertex WHERE type = 'person'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO modern.software</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT cast(id as bigint), name, cast(other as varchar) as lang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM modern_vertex WHERE type = 'software'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO modern.knows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT srcId, targetId, weight</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM modern_edge WHERE type = 'knows'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO modern.created</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT srcId, targetId, weight</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM modern_edge WHERE type = 'created'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="计算输出"><font style="color:rgb(69, 69, 69)">计算输出</font><a href="https://kaiming-l.github.io/geaflow-website/blog/16#%E8%AE%A1%E7%AE%97%E8%BE%93%E5%87%BA" class="hash-link" aria-label="Direct link to 计算输出" title="Direct link to 计算输出">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">最后，在底图数据上完成算法计算和结果输出；</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE tbl_result (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  vid int,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	ccValue double</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	type='file',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	geaflow.dsl.file.path='/tmp/result'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE Function closeness_centrality AS 'com.antgroup.geaflow.dsl.udf.ClosenessCentrality';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">USE GRAPH modern;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO tbl_result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CALL closeness_centrality(1) YIELD (vid, ccValue)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RETURN vid, ROUND(ccValue, 3)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="运行示例"><font style="color:rgb(69, 69, 69)">运行示例</font><a href="https://kaiming-l.github.io/geaflow-website/blog/16#%E8%BF%90%E8%A1%8C%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="Direct link to 运行示例" title="Direct link to 运行示例">​</a></h3>
<ul>
<li><font style="color:rgb(69, 69, 69)">input ```sql // vertex 1,person,marko,29 2,person,vadas,27 3,software,lop,java 4,person,josh,32 5,software,ripple,java 6,person,peter,35</font></li>
</ul>
<p><font style="color:rgb(69, 69, 69)">// edge 1,3,created,0.4 1,2,knows,0.5 1,4,knows,1.0 4,3,created,0.4 4,5,created,1.0 3,6,created,0.2</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">- output</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```sql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1,0.714</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="结语"><font style="color:rgb(69, 69, 69)">结语</font><a href="https://kaiming-l.github.io/geaflow-website/blog/16#%E7%BB%93%E8%AF%AD" class="hash-link" aria-label="Direct link to 结语" title="Direct link to 结语">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">在本篇文章中我们介绍了如何在 TuGraph Analytics 上实现紧密中心度算法，如果你觉得比较有趣，欢迎关注我们的社区（</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a><font style="color:rgb(69, 69, 69)">）。开源不易，如果你觉得还不错，可以给我们 star 支持一下～</font></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/16#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755590976984-5fee7369-5c67-4557-bf20-04344aab49b0.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TuGraph Analytics流图计算之行为路径归因]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/15</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/15"/>
        <updated>2023-09-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：李洁峰]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：李洁峰</font></p>
<p><strong><font style="color:rgb(69, 69, 69)">TuGraph Analytics</font></strong><font style="color:rgb(69, 69, 69)">（内部项目名 GeaFlow）是蚂蚁集团开源的分布式实时图计算引擎，即流式图计算。通过 SQL + GQL 融合分析语言对表模型和图模型进行统一处理，实现了流、批、图一体化计算，并支持了 Exactly Once 语义、高可用以及一站式图研发平台等生产化能力。 目前 TuGraph Analystics 已经在多类应用场景以及万亿级别的数据规模下提供了生产可用的计算服务，本文主要介绍在路径归因的场景下的实践。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="业务背景"><font style="color:rgb(69, 69, 69)">业务背景</font><a href="https://kaiming-l.github.io/geaflow-website/blog/15#%E4%B8%9A%E5%8A%A1%E8%83%8C%E6%99%AF" class="hash-link" aria-label="Direct link to 业务背景" title="Direct link to 业务背景">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">在数字化、信息化的大潮流中，互联网给消费者和商家都带来了极大的便利，对用户行为进行渠道归因和路径分析是流量分析领域中的不可缺少的一部分。通过计算用户的有效行为路径，构建出完整的转化路径，能够快速帮助业务看清楚产品的价值，帮助运营及时调整运营思路。 在成本可控的前提下，保证用户行为路径分析计算结果的准确性，是归因分析的前提条件；同时计算结果产出越及时，就能够更快的为业务运营决策提供更有价值的信息。 通过对业务场景的分析，我们发现这类应用很适合通过图来建模，并在此基础上进行路径归因的计算。接下来给大家分享一下 TuGraph Analytics 是如何保证计算结果准确性的同时也满足了近线实时的时效性，一种基于实时图计算引擎进行渠道归因和路径分析计算的新尝试。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="技术方案"><font style="color:rgb(69, 69, 69)">技术方案</font><a href="https://kaiming-l.github.io/geaflow-website/blog/15#%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88" class="hash-link" aria-label="Direct link to 技术方案" title="Direct link to 技术方案">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="计算模型抽象"><font style="color:rgb(69, 69, 69)">计算模型抽象</font><a href="https://kaiming-l.github.io/geaflow-website/blog/15#%E8%AE%A1%E7%AE%97%E6%A8%A1%E5%9E%8B%E6%8A%BD%E8%B1%A1" class="hash-link" aria-label="Direct link to 计算模型抽象" title="Direct link to 计算模型抽象">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">在深入解构了归因分析的细节之后，我们发现一个用户的行为可以通过用图的方式很自然的描述出来，将用户抽象成为一种类型的点，将产品上的埋点信息抽象成为另一种类型的点，而他们之间发生的行为事件信息就可以抽象成连接两种类型点的边。 这样，一个用户及其在产品上的所有行为就构建出了一张用户行为事实图，其中一个用户有多条指向埋点位置的边。其中一条边就是一次用户行为事件（页面访问、点击操作、浏览行为等等），这条边指向一个埋点位置，边上保存了后期分析需要的基础信息（埋点信息、时间信息等等）和扩展信息（活动信息、展位信息等等）。如此，用于描述用户的点、用于描述埋点位置的点以及连接用户和埋点位置之间的边，就形成了一个用户行为网络拓扑。整个拓扑图中包含所有用户及其相应的行为，而每个用户及其相关的行为是整个拓扑图中的一张子图，可以通过图算法对其进行分析。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591072995-b2004c78-008f-4748-896c-012953b98220.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">接下来，基于这张用户行为事实拓扑图，我们可以在其上根据归因分析所要求的解析规则进行路径模式匹配，从而产出最终的用户行为路径，然后输出到下游存储系统供运营同学使用。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="路径匹配规则"><font style="color:rgb(69, 69, 69)">路径匹配规则</font><a href="https://kaiming-l.github.io/geaflow-website/blog/15#%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99" class="hash-link" aria-label="Direct link to 路径匹配规则" title="Direct link to 路径匹配规则">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">路径模式匹配的规则描述的是如何根据用户的原始行为数据得到最终转化路径的过程，该口径直接决定了需要应用于拓扑图数据上的匹配算法。这个口径一般由业务场景决定，不同的业务类型的规则由需求方提供。 用户行为日志中的交易数据是关键点，它们会触发相关用户的子图归因路径匹配计算，计算结果为最终的归因路径。这里的成交数据不仅仅指用户的交易行为，还可以泛化推及到一切需要归因分析的场景，例如签约、订阅、关注、点击等等，在所有关心转化的场景下都能够发挥作用，创造价值。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591135224-66acf812-e1e0-4433-9d74-6ce3b2b03b29.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">以上图中的 user1 为例，与其相关的行为埋点有 spm1、spm2、spm4、spm9，与其相关的交易埋点有 trade1 和 trade5，那么当系统接收到 trade1 这个埋点信息的时候，在 TuGraph Analytics 能够动态加载所有与 user1 相关的埋点信息，参与归因路径规则匹配计算。 需要说明的是，trade1 和 trade5 的计算是互不影响的，与 user1 相关的所有行为埋点信息都会分别参与两者的计算，得到各自的计算结果。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="结合-tugraph-analytics"><font style="color:rgb(69, 69, 69)">结合 TuGraph Analytics</font><a href="https://kaiming-l.github.io/geaflow-website/blog/15#%E7%BB%93%E5%90%88-tugraph-analytics" class="hash-link" aria-label="Direct link to 结合-tugraph-analytics" title="Direct link to 结合-tugraph-analytics">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">那么如何在实时到来的用户数据上构建拓扑图并且产出归因路径呢？</font></p>
<ul>
<li><font style="color:rgb(69, 69, 69)">首先，需要计算引擎能够实时构建一张巨大的用户行为事实拓扑图，维持百亿级别的输入和状态存储。</font></li>
<li><font style="color:rgb(69, 69, 69)">其次，在触发路径匹配计算交易数据实时到来之后，要能够立刻获取到与该交易行为相关的子拓扑图，其中包含了计算归因路径所需要的所有点边数据（用户节点、埋点位置节点以及两者之间的边），之后在这张子图上根据解析规则进行归因路径匹配，得到该交易的最终归因路径。</font></li>
<li><font style="color:rgb(69, 69, 69)">再次，在大量的交易数据涌入之后能够同时对所有的交易进行归因路径计算，保证输出的时效性。</font></li>
</ul>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics 作为一个实时流图计算引擎，能够满足以上的所有需求。在动态数据到来的过程中触发计算，能够尽可能快的获取到用户的行为边参与路径分析。同时 TuGraph Analytics State 也能够很好的支持千亿甚至万亿级别的图状态存储，在归因分析的场景下绰绰有余。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591194669-f3140baf-6f59-4779-9ed3-8036b54ed8a8.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="计算流程"><font style="color:rgb(69, 69, 69)">计算流程</font><a href="https://kaiming-l.github.io/geaflow-website/blog/15#%E8%AE%A1%E7%AE%97%E6%B5%81%E7%A8%8B" class="hash-link" aria-label="Direct link to 计算流程" title="Direct link to 计算流程">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="实时构图"><font style="color:rgb(69, 69, 69)">实时构图</font><a href="https://kaiming-l.github.io/geaflow-website/blog/15#%E5%AE%9E%E6%97%B6%E6%9E%84%E5%9B%BE" class="hash-link" aria-label="Direct link to 实时构图" title="Direct link to 实时构图">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">通过 TuGraph Analytics 自有的 IO 插件，可以接入多种外部数据源（静态或者动态）的数据，将二维数据转化成描述拓扑图的点边数据。 在归因分析的场景下，我们通过 SLS 插件（阿里云 SLS 日志服务）接入用户访问行为日志、用户点击行为日志以及最终达成交易的订单日志，将用户构建成一个点，与其相关的每个行为构建成从该用户指向埋点位置的一条边，同时把涉及到的的埋点信息保存下来供后续升维分析使用。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591160233-23d87c33-61fb-4c83-9279-cd32599c9ed1.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="路径计算"><font style="color:rgb(69, 69, 69)">路径计算</font><a href="https://kaiming-l.github.io/geaflow-website/blog/15#%E8%B7%AF%E5%BE%84%E8%AE%A1%E7%AE%97" class="hash-link" aria-label="Direct link to 路径计算" title="Direct link to 路径计算">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">在构建的用户行为事实图上，我们会抽取新到来的交易数据，对于这些数据涉及到的用户，提取他们的行为子图，之后在每个人的子图上基于归因路径匹配的规则进行匹配计算，得出该成交行为相应用户的归因路径，并输出到下游系统。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591125383-c25b6985-a744-4f29-a24f-b288c015e84d.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="业务效果"><font style="color:rgb(69, 69, 69)">业务效果</font><a href="https://kaiming-l.github.io/geaflow-website/blog/15#%E4%B8%9A%E5%8A%A1%E6%95%88%E6%9E%9C" class="hash-link" aria-label="Direct link to 业务效果" title="Direct link to 业务效果">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">综上所述，基于 TuGraph Analytics 的实时行为路径归因，大幅提升了数据产出的时效性，为业务提供了更及时的决策依据，整体归因准确率达到 98%左右。其中误差主要来源于算法逻辑对用户行为日志有序性的依赖，如消息延迟和乱序等。</font></p>
<p><font style="color:rgb(69, 69, 69)">而计算过程中的海量数据由 TuGraph Analytics State 承接，并未对计算负载造成很大压力，实际生产活动中，作业能够 7 * 24 小时不间断稳定运行。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="结束语"><font style="color:rgb(69, 69, 69)">结束语</font><a href="https://kaiming-l.github.io/geaflow-website/blog/15#%E7%BB%93%E6%9D%9F%E8%AF%AD" class="hash-link" aria-label="Direct link to 结束语" title="Direct link to 结束语">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">如果您对 TuGraph Analytics 项目比较感兴趣，欢迎动动手指直达 GitHub 仓库，为我们的项目加一颗 Star。</font><font style="color:rgb(69, 69, 69)"> </font><strong><font style="color:rgb(69, 69, 69)">项目地址</font></strong><font style="color:rgb(69, 69, 69)">：<a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer">https://github.com/TuGraph-family/tugraph-analytics</a></font></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/15#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591074262-80ca798e-7f4f-444b-b5a2-d8628416e55d.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么使用图进行关联运算比表Join更具吸引力？]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/14</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/14"/>
        <updated>2023-09-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：TuGraph]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：TuGraph</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="关系模型并不适合处理关系"><font style="color:rgb(69, 69, 69)">关系模型并不适合处理关系</font><a href="https://kaiming-l.github.io/geaflow-website/blog/14#%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E5%B9%B6%E4%B8%8D%E9%80%82%E5%90%88%E5%A4%84%E7%90%86%E5%85%B3%E7%B3%BB" class="hash-link" aria-label="Direct link to 关系模型并不适合处理关系" title="Direct link to 关系模型并不适合处理关系">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">关系模型被广泛应用于数据库和数仓等数据处理系统的数据建模，</font><strong><font style="color:rgb(69, 69, 69)">然而名称里带有关系一词的模型却并不适合处理关系</font></strong><font style="color:rgb(69, 69, 69)">。</font></p>
<p><font style="color:rgb(69, 69, 69)">在关系模型所用的表结构建模下，关系的运算通过 Join 运算来处理。但在实际使用中，特别是在流式更新的数据中，这种方式存在诸多痛点。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="痛点一关系运算成本高"><font style="color:rgb(69, 69, 69)">痛点一：关系运算成本高</font><a href="https://kaiming-l.github.io/geaflow-website/blog/14#%E7%97%9B%E7%82%B9%E4%B8%80%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E6%88%90%E6%9C%AC%E9%AB%98" class="hash-link" aria-label="Direct link to 痛点一关系运算成本高" title="Direct link to 痛点一关系运算成本高">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">表模型的重点在于多条记录统一描述为表，但本身缺乏关系描述能力，</font><strong><font style="color:rgb(69, 69, 69)">只能通过 Join 运算来完成关系的计算</font></strong><font style="color:rgb(69, 69, 69)">。</font></p>
<p><font style="color:rgb(69, 69, 69)">无论是在批或流的计算系统中，Join 操作都涉及大量 shuffle 和计算开销。同时，Join 产生的中间结果由于关联会放大多份，造成数据量指数级膨胀和冗余，存储消耗大。</font></p>
<p><font style="color:rgb(69, 69, 69)">在下图的实验中，我们模拟了依次执行一跳、两跳和三跳关系运算的场景。足以见得，越是复杂的多跳关系计算，关系模型中 Join 的性能表现越差。在总时间对比中，利用图的 Match 计算能够节约超过 90%的耗时。</font><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591238942-9738b84e-e9cb-42a2-910e-e565d3f71a42.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">图 1</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="痛点二数据冗余时效性低"><font style="color:rgb(69, 69, 69)">痛点二：数据冗余，时效性低</font><a href="https://kaiming-l.github.io/geaflow-website/blog/14#%E7%97%9B%E7%82%B9%E4%BA%8C%E6%95%B0%E6%8D%AE%E5%86%97%E4%BD%99%E6%97%B6%E6%95%88%E6%80%A7%E4%BD%8E" class="hash-link" aria-label="Direct link to 痛点二数据冗余时效性低" title="Direct link to 痛点二数据冗余时效性低">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">在很多数仓分析的场景中，为了提高数据查询性能，往往将多张表提前物化成一张大宽表。</font></p>
<p><font style="color:rgb(69, 69, 69)">大宽表虽然可以加速查询性能，然而其数据膨胀和冗余非常严重。由于表与表之间一对多的关联关系，导致一张表的数据通过关联会放大多份，造成数据量指数级膨胀和冗余。</font></p>
<p><font style="color:rgb(69, 69, 69)">而且宽表一经生成就难以更改，否则需要重新生成新宽表，费时费力，不够灵活。</font></p>
<p><font style="color:rgb(69, 69, 69)">此时利用图模型建模，可以轻易解决这个问题。 图是对关系的一种天然描述，以点代表实体，以边代表关系。</font></p>
<p><font style="color:rgb(69, 69, 69)">比如在人际关系图里面，每一个人可以用一个点来表示，人和人之间的关系通过边来表示，人与人之间可以存在各种各样的复杂关系，这些关系都可以通过不同的边来表示。</font></p>
<p><font style="color:rgb(69, 69, 69)">显然，</font><strong><font style="color:rgb(69, 69, 69)">构造图的过程本质上是对事物之间关系的提炼，在数据存储层面实质是对关系做了物化，以获取更好的关联计算性能</font></strong><font style="color:rgb(69, 69, 69)">。</font></p>
<p><font style="color:rgb(69, 69, 69)">相比宽表的关系物化方式，由于图结构本身的点边聚合性，构图表现得十分节约。 下图是 GeaFlow 中高性能构图的表现，可见构图操作本身极为迅速，且由于图可以分片的特性，具有十分良好的可扩展性。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591243591-d5d1060e-5412-45b9-9fed-852bea2d9583.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">图 2</font></p>
<p><font style="color:rgb(69, 69, 69)">在图一的实验中也可以发现，实质上我们用少量的插入图(青色的 insert to graph 部分开销)耗时，换取了图建模方式对之后关联查询的加速效果。</font></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="痛点三复杂关系查询难以描述"><font style="color:rgb(69, 69, 69)">痛点三：复杂关系查询难以描述</font><a href="https://kaiming-l.github.io/geaflow-website/blog/14#%E7%97%9B%E7%82%B9%E4%B8%89%E5%A4%8D%E6%9D%82%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E9%9A%BE%E4%BB%A5%E6%8F%8F%E8%BF%B0" class="hash-link" aria-label="Direct link to 痛点三复杂关系查询难以描述" title="Direct link to 痛点三复杂关系查询难以描述">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">使用表建模的分析系统只支持 SQL join 一种方式进行关系分析，这在复杂场景中能力十分局限。 比如查询一个人 4 度以内所有好友，或者查询最短路径等，这些复杂关联关系通过 SQL 表的 join 方式很难描述。</font></p>
<p><font style="color:rgb(69, 69, 69)">GeaFlow 提供融合 GQL 和 SQL 样式的查询语言，这是一种图表一体的数据分析语言，继承自标准 SQL+ISO/GQL，可以方便进行图表分析。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591239008-8bb90521-3739-468a-9810-620c3aa45406.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">图 3</font></p>
<p><strong><font style="color:rgb(69, 69, 69)">在融合 DSL 中，图计算的结果与表查询等价，都可以像表数据一样做关系运算处理。</font></strong><font style="color:rgb(69, 69, 69)">这意味着图 3 中 GQL 和 SQL 两种描述都可以达到类似的效果，极大灵活了用户的查询表达能力。</font></p>
<p><font style="color:rgb(69, 69, 69)">GeaFlow DSL 引擎层还将支持 SQL 中的 Join 自动转化为 GQL 执行，用户可以自由混用 SQL 和 GQL 样式查询，同时做图匹配、图算法和表查询。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="流图计算引擎-tugraph-analytics"><font style="color:rgb(69, 69, 69)">流图计算引擎 TuGraph-Analytics</font><a href="https://kaiming-l.github.io/geaflow-website/blog/14#%E6%B5%81%E5%9B%BE%E8%AE%A1%E7%AE%97%E5%BC%95%E6%93%8E-tugraph-analytics" class="hash-link" aria-label="Direct link to 流图计算引擎-tugraph-analytics" title="Direct link to 流图计算引擎-tugraph-analytics">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics)是蚂蚁集团开源的分布式流式图计算引擎。在蚂蚁内部，目前已广泛应用于数仓加速、金融风控、知识图谱以及社交网络等大量场景。</font></p>
<p><font style="color:rgb(69, 69, 69)">TuGraph-Analytics 已经于 2023 年 6 月正式对外开源，开放其以图为数据模型的流批一体计算核心能力。相比传统的流式计算引擎，如 Flink、Storm 这些以表为模型的实时处理系统，GeaFlow 以自研图存储为底座，流批一体计算引擎为矛，融合 GQL/SQL DSL 语言为旗帜，在复杂多度的关系运算上具备极大的优势。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591249760-e960773a-5d16-45b0-9fc3-ca04104f6a91.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">图 4</font></p>
<p><font style="color:rgb(69, 69, 69)">图 4 展示了 GeaFlow 使用 Match 算子在图上进行多跳关联查询，相比 Flink 的 Join 算子带来的实时吞吐提升。在复杂多跳场景下，现有的流式计算引擎已经基本不能胜任实时处理。而图模型的存在，则突破这一限制，扩展了实时流计算的应用场景。</font></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/14#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591238998-b2397697-d50d-4696-9b68-ec6074f1dc77.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TuGraph Analytics图计算快速上手之K-core算法]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/13</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/13"/>
        <updated>2023-09-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：郑光杰]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：郑光杰</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="引言"><font style="color:rgb(69, 69, 69)">引言</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#%E5%BC%95%E8%A8%80" class="hash-link" aria-label="Direct link to 引言" title="Direct link to 引言">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">K-Core 算法是一种用来在图中找出符合指定核心度的紧密关联的子图结构，在 K-Core 的结果子图中，每个顶点至少具有 k 的度数，且所有顶点都至少与该子图中的 k 个其他节点相连。K-Core 通常用来对一个图进行子图划分，通过去除不重要的顶点，将符合逾期的子图暴露出来进行进一步分析。K-Core 图算法常用来识别和提取图中的紧密连通群组，因具有较低的时间复杂度（线性）及较好的直观可解释性，广泛应用于金融风控、社交网络和生物学等研究领域。</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="k-core-算法介绍"><font style="color:rgb(69, 69, 69)">K-Core 算法介绍</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#k-core-%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="Direct link to k-core-算法介绍" title="Direct link to k-core-算法介绍">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">一张图的 K-Core 子图是指从图中反复去掉度（不考虑自环边）小于 k 的节点之后得到的子图。该计算过程是一个反复迭代剪枝的过程，在某一轮剪枝之前度大于等于 k 的节点，可能会在该轮剪枝后变为度小于 k。比如 3-core 子图的切分过程如图 1 所示：</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591299462-b49ebf18-1266-4830-89d2-ed984b84ff84.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">3-core 子图切分过程</font></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tugraph-analytics-实现-k-core-算法"><font style="color:rgb(69, 69, 69)">TuGraph-Analytics 实现 K-Core 算法</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#tugraph-analytics-%E5%AE%9E%E7%8E%B0-k-core-%E7%AE%97%E6%B3%95" class="hash-link" aria-label="Direct link to tugraph-analytics-实现-k-core-算法" title="Direct link to tugraph-analytics-实现-k-core-算法">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">要运行 K-Core 算法，我们可以指定使用的图，直接在图查询里调用 K-Core 算法，语法形式如下：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO tbl_result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CALL kcore(3) YIELD (id, value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RETURN id, value;</span><br></span></code></pre></div></div>
<p><font style="color:rgb(69, 69, 69)">运行该语法之后，就可以从图中查询到 k=3 的子图的 id 以及该 id 的邻居数。 TuGraph-Analytics 已经内置了许多算法，如果想要自定义算法，可以基于 AlgorithmUserFunction 接口实现，比如自定义 k-core 算法实现如下：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package com.tugraph.demo;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.antgroup.geaflow.common.type.primitive.IntegerType;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.antgroup.geaflow.dsl.common.algo.AlgorithmRuntimeContext;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.antgroup.geaflow.dsl.common.algo.AlgorithmUserFunction;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.antgroup.geaflow.dsl.common.data.RowEdge;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.antgroup.geaflow.dsl.common.data.RowVertex;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.antgroup.geaflow.dsl.common.data.impl.ObjectRow;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.antgroup.geaflow.dsl.common.function.Description;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.antgroup.geaflow.dsl.common.types.StructType;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.antgroup.geaflow.dsl.common.types.TableField;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.antgroup.geaflow.model.graph.edge.EdgeDirection;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.Iterator;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.List;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Description(name = "kcore", description = "built-in udga for KCore")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class KCore implements AlgorithmUserFunction&lt;Object, Integer&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private AlgorithmRuntimeContext&lt;Object, Integer&gt; context;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int k = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void init(AlgorithmRuntimeContext&lt;Object, Integer&gt; context, Object[] params) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.context = context;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (params.length &gt; 1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new IllegalArgumentException(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "Only support zero or more arguments, false arguments "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    + "usage: func([alpha, [convergence, [max_iteration]]])");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 设置k值，默认k=1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (params.length &gt; 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            k = Integer.parseInt(String.valueOf(params[0]));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void process(RowVertex vertex, Iterator&lt;Integer&gt; messages) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        boolean isFinish = false;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        //第一轮迭代将所有顶点初始化，目标点的value值初始化为-1，并向邻点发送消息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (this.context.getCurrentIterationId() == 1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            this.context.updateVertexValue(ObjectRow.create(-1));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // v = 0,则表示需要删除</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int currentV = (int) vertex.getValue().getField(0, IntegerType.INSTANCE);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (currentV == 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 计算点的输入消息数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int sum = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            while (messages.hasNext()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                sum += messages.next();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 如果点接收的消息数小于k的则需要删除</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (sum &lt; k) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                isFinish = true;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                sum = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 更新当前点的值为接收消息数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            context.updateVertexValue(ObjectRow.create(sum));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (isFinish) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 向点的邻居发送消息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;RowEdge&gt; outEdges = this.context.loadEdges(EdgeDirection.OUT);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (RowEdge rowEdge : outEdges) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            context.sendMessage(rowEdge.getTargetId(), 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;RowEdge&gt; inEdges = this.context.loadEdges(EdgeDirection.IN);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (RowEdge rowEdge : inEdges) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            context.sendMessage(rowEdge.getTargetId(), 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 向本点送消息，防止该点因没有消息不会触发下次迭代</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        context.sendMessage(vertex.getId(), 0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public StructType getOutputType() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new StructType(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            new TableField("id", IntegerType.INSTANCE, false),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            new TableField("v", IntegerType.INSTANCE, false)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tugraph-analytics-运行-k-core-算法"><font style="color:rgb(69, 69, 69)">TuGraph-Analytics 运行 K-Core 算法</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#tugraph-analytics-%E8%BF%90%E8%A1%8C-k-core-%E7%AE%97%E6%B3%95" class="hash-link" aria-label="Direct link to tugraph-analytics-运行-k-core-算法" title="Direct link to tugraph-analytics-运行-k-core-算法">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="图定义"><font style="color:rgb(69, 69, 69)">图定义</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#%E5%9B%BE%E5%AE%9A%E4%B9%89" class="hash-link" aria-label="Direct link to 图定义" title="Direct link to 图定义">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">如果想要在 dsl 中运行 k-core 算法，我们可以第一步先进行图定义，比如：</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE GRAPH IF NOT EXISTS g (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Vertex v (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    vid int ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    value int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Edge e (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    srcId int SOURCE ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    targetId int DESTINATION ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  storeType='rocksdb',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shardCount = 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="图构建"><font style="color:rgb(69, 69, 69)">图构建</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#%E5%9B%BE%E6%9E%84%E5%BB%BA" class="hash-link" aria-label="Direct link to 图构建" title="Direct link to 图构建">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">有了图定义之后，我们就可以往这个图中导入点边数据，将这个图构建起来。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE IF NOT EXISTS v_source (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    v_id int,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    v_value int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type='file',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  //vertex文件中保存了点的信息，文件放在与KCore类目录下的resources目录下，此处可以换成其他数据源</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow.dsl.file.path = 'resource:///input/vertex'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE IF NOT EXISTS e_source (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    src_id int,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dst_id int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type='file',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    //edge文件中保存了边的信息，文件放在与KCore类目录下的resources目录下，此处可以换成其他数据源</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  geaflow.dsl.file.path = 'resource:///input/edge'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">USE GRAPH g;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO g.v(vid, value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">v_id, v_value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM v_source;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO g.e(srcId, targetId)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> src_id, dst_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM e_source;</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="图分析与输出"><font style="color:rgb(69, 69, 69)">图分析与输出</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#%E5%9B%BE%E5%88%86%E6%9E%90%E4%B8%8E%E8%BE%93%E5%87%BA" class="hash-link" aria-label="Direct link to 图分析与输出" title="Direct link to 图分析与输出">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">当图构建之后，我们就可以在图数据基础上进行分析查询和结果输出了。</font></p>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">//定义结果表</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE IF NOT EXISTS tbl_result (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  v_id int,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type='file',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   geaflow.dsl.file.path = '/tmp/result'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//注册kcore函数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE Function kcore AS 'com.tugraph.demo.KCore';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">USE GRAPH g;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INSERT INTO tbl_result(v_id, value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//调用kcore函数，并返回结果</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CALL kcore(3) YIELD (vid, value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RETURN vid, value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">;</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="运行示例"><font style="color:rgb(69, 69, 69)">运行示例</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#%E8%BF%90%E8%A1%8C%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="Direct link to 运行示例" title="Direct link to 运行示例">​</a></h3>
<p><font style="color:rgb(69, 69, 69)">基于以上定义的 dsl，我们以图 1 的数据作为输入，来计算一下图 1 的 3-core 子图。</font></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="输入"><font style="color:rgb(69, 69, 69)">输入</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#%E8%BE%93%E5%85%A5" class="hash-link" aria-label="Direct link to 输入" title="Direct link to 输入">​</a></h4>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">//vertex文件内容:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">6,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">7,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">8,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">9,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//edge文件内容:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1,3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2,3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3,4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3,9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3,5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4,9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4,5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5,9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5,6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5,7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">6,7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">6,8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">7,8</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="输出"><font style="color:rgb(69, 69, 69)">输出</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#%E8%BE%93%E5%87%BA" class="hash-link" aria-label="Direct link to 输出" title="Direct link to 输出">​</a></h4>
<div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">3,3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4,3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5,3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">9,3</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结"><font style="color:rgb(69, 69, 69)">总结</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="Direct link to 总结" title="Direct link to 总结">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">在本篇文章中我们介绍了如何在 TuGraph Analytics 上实现 K-Core 算法，如果你觉得比较有趣，欢迎关注我们的社区（</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a><font style="color:rgb(69, 69, 69)">）。开源不易，如果你觉得还不错，可以给我们 star 支持一下～</font></p>
<hr>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/13#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591298928-e206740c-c925-448f-9887-267f3959903f.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GeaFlow图计算快速上手之K-hop算法]]></title>
        <id>https://kaiming-l.github.io/geaflow-website/blog/12</id>
        <link href="https://kaiming-l.github.io/geaflow-website/blog/12"/>
        <updated>2023-08-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[作者：范志东]]></summary>
        <content type="html"><![CDATA[<p><font style="color:rgb(69, 69, 69)">作者：范志东</font></p>
<p><strong><font style="color:rgb(69, 69, 69)">TuGraph Analytics（内部项目名 GeaFlow）</font></strong><font style="color:rgb(69, 69, 69)">是蚂蚁集团开源的分布式实时图计算引擎，即流式图计算。通过 SQL+GQL 融合分析语言对表模型和图模型进行统一处理，实现了流、批、图一体化计算，并支持了 Exactly Once 语义、高可用以及一站式图研发平台等生产化能力。</font></p>
<p><font style="color:rgb(69, 69, 69)">开源项目代码目前托管在 GitHub，欢迎业界同仁、大数据/图计算技术爱好者关注我们的项目并参与共建。</font></p>
<p><strong><font style="color:rgb(69, 69, 69)">项目地址：</font></strong><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><strong><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></strong></a></p>
<p><strong><font style="color:rgb(69, 69, 69)">GeaFlow 论文【SIGMOD 2023】：</font></strong><a href="https://dl.acm.org/doi/abs/10.1145/3589771" target="_blank" rel="noopener noreferrer"><strong><font style="color:rgb(255, 81, 0)">GeaFlow: A Graph Extended and Accelerated Dataflow System</font></strong></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="概览"><font style="color:rgb(69, 69, 69)">概览</font><a href="https://kaiming-l.github.io/geaflow-website/blog/12#%E6%A6%82%E8%A7%88" class="hash-link" aria-label="Direct link to 概览" title="Direct link to 概览">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">本文希望通过一张图描述清楚 TuGraph Analytics 的整体架构脉络和关键设计思路，以帮助大家快速对 TuGraph Analytics 项目的轮廓有个整体的认识。闲言少叙，直接上图。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591348634-6e742d50-830e-44ac-9dcd-0afdce02eceb.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics 开源技术架构一共分为五个部分：</font></p>
<ul>
<li><strong><font style="color:rgb(69, 69, 69)">DSL 层</font></strong><font style="color:rgb(69, 69, 69)">：即语言层。TuGraph Analytics 设计了 SQL+GQL 的融合分析语言，支持对表模型和图模型统一处理。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">Framework 层</font></strong><font style="color:rgb(69, 69, 69)">：即框架层。TuGraph Analytics 设计了面向 Graph 和 Stream 的两套 API 支持流、批、图融合计算，并实现了基于 Cycle 的统一分布式调度模型。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">State 层</font></strong><font style="color:rgb(69, 69, 69)">：即存储层。TuGraph Analytics 设计了面向 Graph 和 KV 的两套 API 支持表数据和图数据的混合存储，整体采用了 Sharing Nothing 的设计，并支持将数据持久化到远程存储。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">Console 平台</font></strong><font style="color:rgb(69, 69, 69)">：TuGraph Analytics 提供了一站式图研发平台，实现了图数据的建模、加工、分析能力，并提供了图作业的运维管控支持。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">执行环境</font></strong><font style="color:rgb(69, 69, 69)">：TuGraph Analytics 可以运行在多种异构执行环境，如 K8S、Ray 以及本地模式。</font></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dsl-层"><font style="color:rgb(69, 69, 69)">DSL 层</font><a href="https://kaiming-l.github.io/geaflow-website/blog/12#dsl-%E5%B1%82" class="hash-link" aria-label="Direct link to dsl-层" title="Direct link to dsl-层">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">DSL 层是一个典型的编译器技术架构，即语法分析、语义分析、中间代码生成(IR)、代码优化、目标代码生成（OBJ）的流程。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591371971-1363f96a-0f25-472b-9929-374f2799f01e.png" alt="" class="img_ev3q"></p>
<ul>
<li><strong><font style="color:rgb(69, 69, 69)">语言设计</font></strong><font style="color:rgb(69, 69, 69)">：TuGraph Analytics 设计了 SQL+GQL 的融合语法，解决了图+表一体化分析的诉求。具体语法设计可以参考文章：</font><a href="https://github.com/TuGraph-family/tugraph-analytics/blob/master/docs/docs-en/application-development/dsl/overview.md" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">DSL 语法文档</font></a></li>
<li><strong><font style="color:rgb(69, 69, 69)">语法分析</font></strong><font style="color:rgb(69, 69, 69)">：通过扩展 Calcite 的 SqlNode 和 SqlOperator，实现 SQL+GQL 的语法解析器，生成统一的语法树信息。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">语义分析</font></strong><font style="color:rgb(69, 69, 69)">：通过扩展 Calcite 的 Scope 和 Namespace，实现自定义 Validator，对语法树进行约束语义检查。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">中间代码生成</font></strong><font style="color:rgb(69, 69, 69)">：通过扩展 Calcite 的 RelNode，实现图上的 Logical RelNode，用于 GQL 语法的中间表示。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">代码优化</font></strong><font style="color:rgb(69, 69, 69)">：优化器实现了大量的优化规则（RBO）用于提升执行性能，未来也会引入 CBO。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">目标代码生成</font></strong><font style="color:rgb(69, 69, 69)">：代码生成器 Converter 负责将 Logical RelNode 转换为 Physical RelNode，即目标代码。Physical RelNode 可以直接翻译为 Graph/Table 上的 API 调用。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">自定义函数</font></strong><font style="color:rgb(69, 69, 69)">: TuGraph Analytics 提供了大量的内置系统函数，用户也可以根据需要注册自定义函数。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">自定义插件</font></strong><font style="color:rgb(69, 69, 69)">: TuGraph Analytics 允许用户扩展自己的 Connector 类型，以支持不同的数据源和数据格式。</font></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="framework-层"><font style="color:rgb(69, 69, 69)">Framework 层</font><a href="https://kaiming-l.github.io/geaflow-website/blog/12#framework-%E5%B1%82" class="hash-link" aria-label="Direct link to framework-层" title="Direct link to framework-层">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">Framework 层设计与 Flink/Spark 等同类大数据计算引擎有一定的相似性，即提供了类 FlumeJava（</font><a href="https://pages.cs.wisc.edu/~akella/CS838/F12/838-CloudPapers/FlumeJava.pdf" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">FlumeJava: Easy, Efficient Data-Parallel Pipelines</font></a><font style="color:rgb(69, 69, 69)">）的统一高阶 API（简称 HLA），用户调用高阶 API 的过程会被转换为逻辑执行计划，逻辑执行计划执行一定的优化（如 ChainCombine、UnionPushUp 等）后，被转换为物理执行计划，物理执行计划会被调度器分发到分布式 Worker 上执行，最终 Worker 会回调用户传递的高阶 API 函数逻辑，实现整个分布式计算链路的执行。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591421306-cce77bdd-6f01-4e3f-b7ea-70d2e985bc0d.png" alt="" class="img_ev3q"></p>
<ul>
<li><strong><font style="color:rgb(69, 69, 69)">高阶 API</font></strong><font style="color:rgb(69, 69, 69)">：TuGraph Analytics 通过 Environment 接口适配异构的分布式执行环境（K8S、Ray、Local），使用 Pipeline 封装了用户的数据处理流程，使用 Window 抽象统一了流处理（无界 Window）和批处理（有界 Window）。Graph 接口提供了静态图和动态图（流图）上的计算 API，如 append/snapshot/compute/traversal 等，Stream 接口提供了统一流批处理 API，如 map/reduce/join/keyBy 等。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">逻辑执行计划</font></strong><font style="color:rgb(69, 69, 69)">：逻辑执行计划信息统一封装在 PipelineGraph 对象内，将高阶 API 对应的算子（Operator）组织在 DAG 中，算子一共分为 5 大类：SourceOperator 对应数据源加载、OneInputOperator/TwoInputOperator 对应传统的数据处理、IteratorOperator 对应静态/动态图计算。DAG 中的点（PipelineVertex）记录了算子（Operator）的关键信息，如类型、并发度、算子函数等信息，边（PipelineEdge）则记录了数据 shuffle 的关键信息，如 Partition 规则（forward/broadcast/key 等）、编解码器等。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">物理执行计划</font></strong><font style="color:rgb(69, 69, 69)">：物理执行计划信息统一封装在 ExecutionGraph 对象内，并支持二级嵌套结构，以尽可能将可以流水线执行的子图（ExecutionVertexGroup）结构统一调度。图中示例的物理执行计划 DAG 被划分为三部分子图结构分别执行。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">调度器</font></strong><font style="color:rgb(69, 69, 69)">：TuGraph Analytics 设计了基于 Cycle 的调度器（CycleScheduler）实现对流、批、图的统一调度，调度过程通过事件驱动模型触发。物理执行计划中的每部分子图都会被转换为一个 ExecutionCycle 对象，调度器会向 Cycle 的头结点（Head）发送 Event，并接收 Cycle 尾结点（Tail）的发回的 Event，形成一个完整的调度闭环。对于流处理，每一轮 Cycle 调度会完成一个 Window 的数据的处理，并会一直不停地执行下去。对于批处理，整个 Cycle 调度仅执行一轮。对于图处理，每一轮 Cycle 调度会完成一次图计算迭代。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">运行时组件</font></strong><font style="color:rgb(69, 69, 69)">：TuGraph Analytics 运行时会拉起 Client、Master、Driver、Container 组件。当 Client 提交 Pipeline 给 Driver 后，会触发执行计划构建、分配 Task（ResourceManagement 提供资源）和调度。每个 Container 内可以运行多个 Worker 组件，不同 Worker 组件之间通过 Shuffle 模块交换数据，所有的 Worker 都需要定期向 Master 上报心跳（HeartbeatManagement），并向时序数据库上报运行时指标信息。另外 TuGraph Analytics 运行时也提供了故障容忍机制（FailOver），以便在异常/中断后能继续执行。</font></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="state-层"><font style="color:rgb(69, 69, 69)">State 层</font><a href="https://kaiming-l.github.io/geaflow-website/blog/12#state-%E5%B1%82" class="hash-link" aria-label="Direct link to state-层" title="Direct link to state-层">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">State 层设计相比于传统的大数据计算引擎，除了提供面向表数据的 KV 存储抽象，也支持了面向图数据的 Graph 存储抽象，以更好地支持面向图模型的 IO 性能优化。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591361883-744efdac-273b-4d79-8238-a4db875cf0c7.png" alt="" class="img_ev3q"></p>
<ul>
<li><strong><font style="color:rgb(69, 69, 69)">State API</font></strong><font style="color:rgb(69, 69, 69)">：提供了面向 KV 存储 API，如 get/put/delete 等。以及面向图存储的 API，如 V/E/VE，以及点/边的 add/update/delete 等。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">State 执行层</font></strong><font style="color:rgb(69, 69, 69)">：通过 KeyGroup 的设计实现数据的 Sharding 和扩缩容能力，Accessor 提供了面向不同读写策略和数据模型的 IO 抽象，StateOperator 抽象了存储层 SPI，如 finish（刷盘）、archive（Checkpoint）、compact（压缩）、recover（恢复）等。另外，State 提供了多种 PushDown 优化以加速 IO 访问效率。通过自定义内存管理和面向属性的二级索引也会提供大量的存储访问优化手段。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">Store 层</font></strong><font style="color:rgb(69, 69, 69)">：TuGraph Analytics 支持了多种存储系统类型，并通过 StoreContext 封装了 Schema、序列化器，以及数据版本信息。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">持久化层</font></strong><font style="color:rgb(69, 69, 69)">：State 的数据支持持久化到远程存储系统，如 HDFS、OSS、S3 等。</font></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="console-平台"><font style="color:rgb(69, 69, 69)">Console 平台</font><a href="https://kaiming-l.github.io/geaflow-website/blog/12#console-%E5%B9%B3%E5%8F%B0" class="hash-link" aria-label="Direct link to console-平台" title="Direct link to console-平台">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">Console 平台提供了一站式图研发、运维的平台能力，同时为引擎运行时提供元数据（Catalog）服务。</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591451238-c7783506-ae3c-49b9-be7f-a71610257ace.png" alt="" class="img_ev3q"></p>
<ul>
<li><strong><font style="color:rgb(69, 69, 69)">标准化 API</font></strong><font style="color:rgb(69, 69, 69)">：平台提供了标准化的 RESTful API 和认证机制，同时支持了页面端和应用端的统一 API 服务能力。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">任务研发</font></strong><font style="color:rgb(69, 69, 69)">：平台支持“关系-实体-属性”的图数据建模。基于字段映射配置，可以定义图数据传输任务，包括数据集成（Import）和数据分发（Export）。基于图表模型的图数据加工任务支持多样化的计算场景，如 Traversal、Compute、Mining 等。基于数据加速器的图数据服务，提供了多协议的实时分析能力，支持 BI、可视化分析工具的接入集成。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">构建提交</font></strong><font style="color:rgb(69, 69, 69)">：平台通过任务和作业的独立抽象，实现研发态与运维态的分离。任务开发完成后执行发布动作，会自动触发构建流水线（Release Builder），生成发布版本。任务提交器（Task Submitter）负责将发布版本的内容提交到执行环境，生成计算作业。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">作业运维</font></strong><font style="color:rgb(69, 69, 69)">：作业属于任务的运行态，平台提供了作业的操纵（启停、重置）、监控（指标、告警、审计）、调优（诊断、伸缩、调参）、调度等运维能力。作业的运行时资源会由资源池统一分配和管理。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">元数据服务</font></strong><font style="color:rgb(69, 69, 69)">：平台同时承载了引擎运行时的元数据服务能力，以实现研发与运维的自动化。元数据以实例维度进行隔离，实例内的研发资源可以根据名字直接访问，如点、边、图、表、视图、函数等。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">系统管理</font></strong><font style="color:rgb(69, 69, 69)">：平台提供了多租户隔离机制、细粒度用户权限控制，以及系统资源的管理能力。</font></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="执行环境"><font style="color:rgb(69, 69, 69)">执行环境</font><a href="https://kaiming-l.github.io/geaflow-website/blog/12#%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83" class="hash-link" aria-label="Direct link to 执行环境" title="Direct link to 执行环境">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">TuGraph Analytics 支持多种异构环境执行，以常见的 K8S 部署环境为例，其物理部署架构如下：</font></p>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591453805-84debc07-c1c0-44f2-8bd2-411ba2a4ee5b.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">在 TuGraph Analytics 作业的全生命周期过程中，涉及的关键数据流程有：</font></p>
<ul>
<li><strong><font style="color:rgb(69, 69, 69)">研发阶段</font></strong><font style="color:rgb(69, 69, 69)">：Console 平台提供了实例下所有的研发资源的管理，用户可以在创建任务前，提前准备所需的研发资源信息，并存储在 Catalog。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">构建阶段</font></strong><font style="color:rgb(69, 69, 69)">：任务创建完成后，通过发布动作触发构建流水线，用户的 JAR 包、任务的 ZIP 包等会上传到 RemoteFileStore。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">提交阶段</font></strong><font style="color:rgb(69, 69, 69)">：作业提交时，Console 会根据作业的参数配置、运行时环境信息，以及远程文件地址等创建 KubernetesJobClient，既而会拉起 Client Pod，Client 会拉起 Master Pod，Master 会拉起 Container Pods 和 Driver Pod。所有的 Pod 拉起后，Client 会把作业的 Pipeline 发送给 Driver 执行，Driver 最终通过 Cycle 调度的 Events 与 Containers 交互。所有的 Pod 启动时都会从 RemoteFileStore 下载版本 JAR 包、用户 JAR 包、作业 ZIP 包等信息。Driver 对 DSL 代码编译时，也需要通过 Console 提供的 Catalog API 操作 Schema 信息。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">运行阶段</font></strong><font style="color:rgb(69, 69, 69)">：作业运行时，各个组件会上报不同的数据和信息。Master 会上报作业的心跳汇总信息，Driver 会上报作业的 Pipeline/Cycle 指标以及错误信息，Container 会上报作业的 Offset、指标定义以及错误信息等。RuntimeMetaStore 存储作业的 Pipeline/Cycle 指标、Offset、心跳汇总、错误等信息。HAMetaStore 存储各个运行组件的地址信息。DataStore 存储 State 数据和作业 FailOver 时所需的元数据信息。MetricStore 存储运行时指标信息。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">监控阶段</font></strong><font style="color:rgb(69, 69, 69)">：Console 会主要查询 RuntimeMetaStore 和 MetricStore 存储的信息用于作业的运行时监控。</font></li>
<li><strong><font style="color:rgb(69, 69, 69)">清理阶段</font></strong><font style="color:rgb(69, 69, 69)">：作业重置/删除时，Console 会对作业的 RuntimeMeta、HAMeta 以及部分 Data 做清理操作。</font></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结"><font style="color:rgb(69, 69, 69)">总结</font><a href="https://kaiming-l.github.io/geaflow-website/blog/12#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="Direct link to 总结" title="Direct link to 总结">​</a></h2>
<p><font style="color:rgb(69, 69, 69)">希望通过以上的介绍，可以让大家对 TuGraph Analytics 开源技术架构有个比较清晰的了解，我们非常欢迎开源社区的技术爱好者参与到项目的建设中来。</font></p>
<p><font style="color:rgb(69, 69, 69)">如果您对 TuGraph Analytics 项目比较感兴趣，欢迎动动手指扫码直达 GitHub 仓库，为我们的项目加一颗 Star。【网络不畅可以尝试使用 VPN 访问】</font></p>
<p><font style="color:rgb(69, 69, 69)">GeaFlow(品牌名 TuGraph-Analytics) 已正式开源，欢迎大家关注！！！</font></p>
<p><font style="color:rgb(69, 69, 69)">欢迎给我们 Star 哦!</font></p>
<p><font style="color:rgb(69, 69, 69)">Welcome to give us a Star!</font></p>
<p><font style="color:rgb(69, 69, 69)">GitHub</font><font style="color:rgb(69, 69, 69)">👉</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微信群"><font style="color:rgb(69, 69, 69)">微信群</font><a href="https://kaiming-l.github.io/geaflow-website/blog/12#%E5%BE%AE%E4%BF%A1%E7%BE%A4" class="hash-link" aria-label="Direct link to 微信群" title="Direct link to 微信群">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/96961/1755591363107-b610d139-419a-4cea-836a-be55ca928360.png" alt="" class="img_ev3q"></p>
<p><font style="color:rgb(69, 69, 69)">请点击项目链接下方微信二维码添加微信用户群：</font><a href="https://github.com/TuGraph-family/tugraph-analytics" target="_blank" rel="noopener noreferrer"><font style="color:rgb(255, 81, 0)">https://github.com/TuGraph-family/tugraph-analytics</font></a></p>]]></content>
    </entry>
</feed>